
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class ONOFFBEST {
			
	
public static int[][] Path9()
	{ // The network as from Eramo 2017. Go to my COMNET and FGCA papers please.
	// These are the paths that have 9 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8}
	int[][] P9 = {
			
			{0,	01,	9,	16,	0,	10,	18,	26,	48,	26,	18,	10,	1},
			{1,	01,	9,	17,	0,	10,	18,	26,	49,	26,	18,	10,	1},
			{2,	01,	9,	18,	0,	10,	18,	26,	50,	26,	18,	10,	1},
			{3,	01,	9,	19,	0,	10,	18,	26,	51,	26,	18,	10,	1},
			{4,	01,	9,	20,	0,	10,	18,	26,	52,	26,	18,	10,	1},
			{5,	01,	9,	21,	0,	10,	18,	26,	53,	26,	18,	10,	1},
			{6,	01,	9,	22,	0,	10,	18,	26,	54,	26,	18,	10,	1},
			{7,	01,	9,	23,	0,	10,	18,	26,	55,	26,	18,	10,	1},
			{8,	01,	9,	24,	0,	10,	18,	27,	56,	27,	18,	10,	1},
			{9,	01,	9,	25,	0,	10,	18,	27,	57,	27,	18,	10,	1},
			{10,	01,	9,	26,	0,	10,	18,	27,	58,	27,	18,	10,	1},
			{11,	01,	9,	27,	0,	10,	18,	27,	59,	27,	18,	10,	1},
			{12,	01,	9,	28,	0,	10,	18,	27,	60,	27,	18,	10,	1},
			{13,	01,	9,	29,	0,	10,	18,	27,	61,	27,	18,	10,	1},
			{14,	01,	9,	30,	0,	10,	18,	27,	62,	27,	18,	10,	1},
			{15,	01,	9,	31,	0,	10,	18,	27,	63,	27,	18,	10,	1},
			{16,	01,	9,	16,	0,	10,	19,	26,	48,	26,	19,	10,	1},
			{17,	01,	9,	17,	0,	10,	19,	26,	49,	26,	19,	10,	1},
			{18,	01,	9,	18,	0,	10,	19,	26,	50,	26,	19,	10,	1},
			{19,	01,	9,	19,	0,	10,	19,	26,	51,	26,	19,	10,	1},
			{20,	01,	9,	20,	0,	10,	19,	26,	52,	26,	19,	10,	1},
			{21,	01,	9,	21,	0,	10,	19,	26,	53,	26,	19,	10,	1},
			{22,	01,	9,	22,	0,	10,	19,	26,	54,	26,	19,	10,	1},
			{23,	01,	9,	23,	0,	10,	19,	26,	55,	26,	19,	10,	1},
			{24,	01,	9,	24,	0,	10,	19,	27,	56,	27,	19,	10,	1},
			{25,	01,	9,	25,	0,	10,	19,	27,	57,	27,	19,	10,	1},
			{26,	01,	9,	26,	0,	10,	19,	27,	58,	27,	19,	10,	1},
			{27,	01,	9,	27,	0,	10,	19,	27,	59,	27,	19,	10,	1},
			{28,	01,	9,	28,	0,	10,	19,	27,	60,	27,	19,	10,	1},
			{29,	01,	9,	29,	0,	10,	19,	27,	61,	27,	19,	10,	1},
			{30,	01,	9,	30,	0,	10,	19,	27,	62,	27,	19,	10,	1},
			{31,	01,	9,	31,	0,	10,	19,	27,	63,	27,	19,	10,	1},
			{32,	10,	9,	24,	1,	10,	19,	27,	56,	27,	19,	10,	0},
			{33,	10,	9,	25,	1,	10,	19,	27,	57,	27,	19,	10,	0},
			{34,	10,	9,	26,	1,	10,	19,	27,	58,	27,	19,	10,	0},
			{35,	10,	9,	27,	1,	10,	19,	27,	59,	27,	19,	10,	0},
			{36,	10,	9,	28,	1,	10,	19,	27,	60,	27,	19,	10,	0},
			{37,	10,	9,	29,	1,	10,	19,	27,	61,	27,	19,	10,	0},
			{38,	10,	9,	30,	1,	10,	19,	27,	62,	27,	19,	10,	0},
			{39,	10,	9,	31,	1,	10,	19,	27,	63,	27,	19,	10,	0},
			{40,	24,	9,	40,	2,	6,	21,	29,	72,	29,	21,	7,	4},
			{41,	24,	9,	41,	2,	6,	21,	29,	73,	29,	21,	7,	4},
			{42,	24,	9,	42,	2,	6,	21,	29,	74,	29,	21,	7,	4},
			{43,	24,	9,	43,	2,	6,	21,	29,	75,	29,	21,	7,	4},
			{44,	24,	9,	44,	2,	6,	21,	29,	76,	29,	21,	7,	4},
			{45,	24,	9,	45,	2,	6,	21,	29,	77,	29,	21,	7,	4},
			{46,	24,	9,	46,	2,	6,	21,	29,	78,	29,	21,	7,	4},
			{47,	24,	9,	47,	2,	6,	21,	29,	79,	29,	21,	7,	4},
			{48,	25,	9,	48,	2,	6,	22,	30,	80,	30,	22,	6,	5},
			{49,	25,	9,	49,	2,	6,	22,	30,	81,	30,	22,	6,	5},
			{50,	25,	9,	50,	2,	6,	22,	30,	82,	30,	22,	6,	5},
			{51,	25,	9,	51,	2,	6,	22,	30,	83,	30,	22,	6,	5},
			{52,	25,	9,	52,	2,	6,	22,	30,	84,	30,	22,	6,	5},
			{53,	25,	9,	53,	2,	6,	22,	30,	85,	30,	22,	6,	5},
			{54,	25,	9,	54,	2,	6,	22,	30,	86,	30,	22,	6,	5},
			{55,	25,	9,	55,	2,	6,	22,	30,	87,	30,	22,	6,	5},
			{56,	25,	9,	56,	2,	6,	22,	31,	88,	31,	22,	6,	5},
			{57,	25,	9,	57,	2,	6,	22,	31,	89,	31,	22,	6,	5},
			{58,	25,	9,	58,	2,	6,	22,	31,	90,	31,	22,	6,	5},
			{59,	25,	9,	59,	2,	6,	22,	31,	91,	31,	22,	6,	5},
			{60,	25,	9,	60,	2,	6,	22,	31,	92,	31,	22,	6,	5},
			{61,	25,	9,	61,	2,	6,	22,	31,	93,	31,	22,	6,	5},
			{62,	25,	9,	62,	2,	6,	22,	31,	94,	31,	22,	6,	5},
			{63,	25,	9,	63,	2,	6,	22,	31,	95,	31,	22,	6,	5},
			{64,	42,	9,	40,	4,	7,	20,	29,	72,	29,	20,	6,	2},
			{65,	42,	9,	41,	4,	7,	20,	29,	73,	29,	20,	6,	2},
			{66,	42,	9,	42,	4,	7,	20,	29,	74,	29,	20,	6,	2},
			{67,	42,	9,	43,	4,	7,	20,	29,	75,	29,	20,	6,	2},
			{68,	42,	9,	44,	4,	7,	20,	29,	76,	29,	20,	6,	2},
			{69,	42,	9,	45,	4,	7,	20,	29,	77,	29,	20,	6,	2},
			{70,	42,	9,	46,	4,	7,	20,	29,	78,	29,	20,	6,	2},
			{71,	42,	9,	47,	4,	7,	20,	29,	79,	29,	20,	6,	2},
			{72,	42,	9,	32,	4,	7,	21,	28,	64,	28,	21,	6,	2},
			{73,	42,	9,	33,	4,	7,	21,	28,	65,	28,	21,	6,	2},
			{74,	42,	9,	34,	4,	7,	21,	28,	66,	28,	21,	6,	2},
			{75,	42,	9,	35,	4,	7,	21,	28,	67,	28,	21,	6,	2},
			{76,	42,	9,	36,	4,	7,	21,	28,	68,	28,	21,	6,	2},
			{77,	42,	9,	37,	4,	7,	21,	28,	69,	28,	21,	6,	2},
			{78,	42,	9,	38,	4,	7,	21,	28,	70,	28,	21,	6,	2},
			{79,	42,	9,	39,	4,	7,	21,	28,	71,	28,	21,	6,	2},
			{80,	42,	9,	40,	4,	7,	21,	29,	72,	29,	21,	6,	2},
			{81,	42,	9,	41,	4,	7,	21,	29,	73,	29,	21,	6,	2},
			{82,	42,	9,	42,	4,	7,	21,	29,	74,	29,	21,	6,	2},
			{83,	42,	9,	43,	4,	7,	21,	29,	75,	29,	21,	6,	2},
			{84,	42,	9,	44,	4,	7,	21,	29,	76,	29,	21,	6,	2},
			{85,	42,	9,	45,	4,	7,	21,	29,	77,	29,	21,	6,	2},
			{86,	42,	9,	46,	4,	7,	21,	29,	78,	29,	21,	6,	2},
			{87,	42,	9,	47,	4,	7,	21,	29,	79,	29,	21,	6,	2},
			{88,	45,	9,	32,	4,	7,	20,	28,	64,	28,	20,	6,	5},
			{89,	45,	9,	33,	4,	7,	20,	28,	65,	28,	20,	6,	5},
			{90,	45,	9,	34,	4,	7,	20,	28,	66,	28,	20,	6,	5},
			{91,	45,	9,	35,	4,	7,	20,	28,	67,	28,	20,	6,	5},
			{92,	45,	9,	36,	4,	7,	20,	28,	68,	28,	20,	6,	5},
			{93,	45,	9,	37,	4,	7,	20,	28,	69,	28,	20,	6,	5},
			{94,	45,	9,	38,	4,	7,	20,	28,	70,	28,	20,	6,	5},
			{95,	45,	9,	39,	4,	7,	20,	28,	71,	28,	20,	6,	5},
			{96,	45,	9,	40,	4,	7,	20,	29,	72,	29,	20,	6,	5},
			{97,	45,	9,	41,	4,	7,	20,	29,	73,	29,	20,	6,	5},
			{98,	45,	9,	42,	4,	7,	20,	29,	74,	29,	20,	6,	5},
			{99,	45,	9,	43,	4,	7,	20,	29,	75,	29,	20,	6,	5},
			{100,	45,	9,	44,	4,	7,	20,	29,	76,	29,	20,	6,	5},
			{101,	45,	9,	45,	4,	7,	20,	29,	77,	29,	20,	6,	5},
			{102,	45,	9,	46,	4,	7,	20,	29,	78,	29,	20,	6,	5},
			{103,	45,	9,	47,	4,	7,	20,	29,	79,	29,	20,	6,	5},
			{104,	45,	9,	32,	4,	7,	21,	28,	64,	28,	21,	6,	5},
			{105,	45,	9,	33,	4,	7,	21,	28,	65,	28,	21,	6,	5},
			{106,	45,	9,	34,	4,	7,	21,	28,	66,	28,	21,	6,	5},
			{107,	45,	9,	35,	4,	7,	21,	28,	67,	28,	21,	6,	5},
			{108,	45,	9,	36,	4,	7,	21,	28,	68,	28,	21,	6,	5},
			{109,	45,	9,	37,	4,	7,	21,	28,	69,	28,	21,	6,	5},
			{110,	45,	9,	38,	4,	7,	21,	28,	70,	28,	21,	6,	5},
			{111,	45,	9,	39,	4,	7,	21,	28,	71,	28,	21,	6,	5},
			{112,	45,	9,	40,	4,	7,	21,	29,	72,	29,	21,	6,	5},
			{113,	45,	9,	41,	4,	7,	21,	29,	73,	29,	21,	6,	5},
			{114,	45,	9,	42,	4,	7,	21,	29,	74,	29,	21,	6,	5},
			{115,	45,	9,	43,	4,	7,	21,	29,	75,	29,	21,	6,	5},
			{116,	45,	9,	44,	4,	7,	21,	29,	76,	29,	21,	6,	5},
			{117,	45,	9,	45,	4,	7,	21,	29,	77,	29,	21,	6,	5},
			{118,	45,	9,	46,	4,	7,	21,	29,	78,	29,	21,	6,	5},
			{119,	45,	9,	47,	4,	7,	21,	29,	79,	29,	21,	6,	5},
			{120,	54,	9,	32,	5,	6,	20,	28,	64,	28,	20,	7,	4},
			{121,	54,	9,	33,	5,	6,	20,	28,	65,	28,	20,	7,	4},
			{122,	54,	9,	34,	5,	6,	20,	28,	66,	28,	20,	7,	4},
			{123,	54,	9,	35,	5,	6,	20,	28,	67,	28,	20,	7,	4},
			{124,	54,	9,	36,	5,	6,	20,	28,	68,	28,	20,	7,	4},
			{125,	54,	9,	37,	5,	6,	20,	28,	69,	28,	20,	7,	4},
			{126,	54,	9,	38,	5,	6,	20,	28,	70,	28,	20,	7,	4},
			{127,	54,	9,	39,	5,	6,	20,	28,	71,	28,	20,	7,	4},
			{128,	54,	9,	40,	5,	6,	20,	29,	72,	29,	20,	7,	4},
			{129,	54,	9,	41,	5,	6,	20,	29,	73,	29,	20,	7,	4},
			{130,	54,	9,	42,	5,	6,	20,	29,	74,	29,	20,	7,	4},
			{131,	54,	9,	43,	5,	6,	20,	29,	75,	29,	20,	7,	4},
			{132,	54,	9,	44,	5,	6,	20,	29,	76,	29,	20,	7,	4},
			{133,	54,	9,	45,	5,	6,	20,	29,	77,	29,	20,	7,	4},
			{134,	54,	9,	46,	5,	6,	20,	29,	78,	29,	20,	7,	4},
			{135,	54,	9,	47,	5,	6,	20,	29,	79,	29,	20,	7,	4},
			{136,	54,	9,	32,	5,	6,	21,	28,	64,	28,	21,	7,	4},
			{137,	54,	9,	33,	5,	6,	21,	28,	65,	28,	21,	7,	4},
			{138,	54,	9,	34,	5,	6,	21,	28,	66,	28,	21,	7,	4},
			{139,	54,	9,	35,	5,	6,	21,	28,	67,	28,	21,	7,	4},
			{140,	54,	9,	36,	5,	6,	21,	28,	68,	28,	21,	7,	4},
			{141,	54,	9,	37,	5,	6,	21,	28,	69,	28,	21,	7,	4},
			{142,	54,	9,	38,	5,	6,	21,	28,	70,	28,	21,	7,	4},
			{143,	54,	9,	39,	5,	6,	21,	28,	71,	28,	21,	7,	4},
			{144,	54,	9,	40,	5,	6,	21,	29,	72,	29,	21,	7,	4},
			{145,	54,	9,	41,	5,	6,	21,	29,	73,	29,	21,	7,	4},
			{146,	54,	9,	42,	5,	6,	21,	29,	74,	29,	21,	7,	4},
			{147,	54,	9,	43,	5,	6,	21,	29,	75,	29,	21,	7,	4},
			{148,	54,	9,	44,	5,	6,	21,	29,	76,	29,	21,	7,	4},
			{149,	54,	9,	45,	5,	6,	21,	29,	77,	29,	21,	7,	4},
			{150,	54,	9,	46,	5,	6,	21,	29,	78,	29,	21,	7,	4},
			{151,	54,	9,	47,	5,	6,	21,	29,	79,	29,	21,	7,	4},
			{152,	52,	9,	48,	5,	6,	22,	30,	80,	30,	22,	6,	2},
			{153,	52,	9,	49,	5,	6,	22,	30,	81,	30,	22,	6,	2},
			{154,	52,	9,	50,	5,	6,	22,	30,	82,	30,	22,	6,	2},
			{155,	52,	9,	51,	5,	6,	22,	30,	83,	30,	22,	6,	2},
			{156,	52,	9,	52,	5,	6,	22,	30,	84,	30,	22,	6,	2},
			{157,	52,	9,	53,	5,	6,	22,	30,	85,	30,	22,	6,	2},
			{158,	52,	9,	54,	5,	6,	22,	30,	86,	30,	22,	6,	2},
			{159,	52,	9,	55,	5,	6,	22,	30,	87,	30,	22,	6,	2},
			{160,	52,	9,	56,	5,	6,	22,	31,	88,	31,	22,	6,	2},
			{161,	52,	9,	57,	5,	6,	22,	31,	89,	31,	22,	6,	2},
			{162,	52,	9,	58,	5,	6,	22,	31,	90,	31,	22,	6,	2},
			{163,	52,	9,	59,	5,	6,	22,	31,	91,	31,	22,	6,	2},
			{164,	52,	9,	60,	5,	6,	22,	31,	92,	31,	22,	6,	2},
			{165,	52,	9,	61,	5,	6,	22,	31,	93,	31,	22,	6,	2},
			{166,	52,	9,	62,	5,	6,	22,	31,	94,	31,	22,	6,	2},
			{167,	52,	9,	63,	5,	6,	22,	31,	95,	31,	22,	6,	2},
			{168,	52,	9,	48,	5,	6,	23,	30,	80,	30,	23,	6,	2},
			{169,	52,	9,	49,	5,	6,	23,	30,	81,	30,	23,	6,	2},
			{170,	52,	9,	50,	5,	6,	23,	30,	82,	30,	23,	6,	2},
			{171,	52,	9,	51,	5,	6,	23,	30,	83,	30,	23,	6,	2},
			{172,	52,	9,	52,	5,	6,	23,	30,	84,	30,	23,	6,	2},
			{173,	52,	9,	53,	5,	6,	23,	30,	85,	30,	23,	6,	2},
			{174,	52,	9,	54,	5,	6,	23,	30,	86,	30,	23,	6,	2},
			{175,	52,	9,	55,	5,	6,	23,	30,	87,	30,	23,	6,	2},
			{176,	52,	9,	56,	5,	6,	23,	31,	88,	31,	23,	6,	2},
			{177,	52,	9,	57,	5,	6,	23,	31,	89,	31,	23,	6,	2},
			{178,	52,	9,	58,	5,	6,	23,	31,	90,	31,	23,	6,	2},
			{179,	52,	9,	59,	5,	6,	23,	31,	91,	31,	23,	6,	2},
			{180,	52,	9,	60,	5,	6,	23,	31,	92,	31,	23,	6,	2},
			{181,	52,	9,	61,	5,	6,	23,	31,	93,	31,	23,	6,	2},
			{182,	52,	9,	62,	5,	6,	23,	31,	94,	31,	23,	6,	2},
			{183,	52,	9,	63,	5,	6,	23,	31,	95,	31,	23,	6,	2},
			{184,	03,	9,	16,	0,	10,	18,	26,	16,	26,	18,	10,	3},
			{185,	03,	9,	17,	0,	10,	18,	26,	17,	26,	18,	10,	3},
			{186,	03,	9,	18,	0,	10,	18,	26,	18,	26,	18,	10,	3},
			{187,	03,	9,	19,	0,	10,	18,	26,	19,	26,	18,	10,	3},
			{188,	03,	9,	20,	0,	10,	18,	26,	20,	26,	18,	10,	3},
			{189,	03,	9,	21,	0,	10,	18,	26,	21,	26,	18,	10,	3},
			{190,	03,	9,	22,	0,	10,	18,	26,	22,	26,	18,	10,	3},
			{191,	03,	9,	23,	0,	10,	18,	26,	23,	26,	18,	10,	3},
			{192,	03,	9,	24,	0,	10,	18,	27,	24,	27,	18,	10,	3},
			{193,	03,	9,	25,	0,	10,	18,	27,	25,	27,	18,	10,	3},
			{194,	03,	9,	26,	0,	10,	18,	27,	26,	27,	18,	10,	3},
			{195,	03,	9,	27,	0,	10,	18,	27,	27,	27,	18,	10,	3},
			{196,	03,	9,	28,	0,	10,	18,	27,	28,	27,	18,	10,	3},
			{197,	03,	9,	29,	0,	10,	18,	27,	29,	27,	18,	10,	3},
			{198,	03,	9,	30,	0,	10,	18,	27,	30,	27,	18,	10,	3},
			{199,	03,	9,	31,	0,	10,	18,	27,	31,	27,	18,	10,	3},
			{200,	03,	9,	16,	0,	10,	19,	26,	16,	26,	19,	10,	3},
			{201,	03,	9,	17,	0,	10,	19,	26,	17,	26,	19,	10,	3},
			{202,	03,	9,	18,	0,	10,	19,	26,	18,	26,	19,	10,	3},
			{203,	03,	9,	19,	0,	10,	19,	26,	19,	26,	19,	10,	3},
			{204,	03,	9,	20,	0,	10,	19,	26,	20,	26,	19,	10,	3},
			{205,	03,	9,	21,	0,	10,	19,	26,	21,	26,	19,	10,	3},
			{206,	03,	9,	22,	0,	10,	19,	26,	22,	26,	19,	10,	3},
			{207,	03,	9,	23,	0,	10,	19,	26,	23,	26,	19,	10,	3},
			{208,	03,	9,	24,	0,	10,	19,	27,	24,	27,	19,	10,	3},
			{209,	03,	9,	25,	0,	10,	19,	27,	25,	27,	19,	10,	3},
			{210,	03,	9,	26,	0,	10,	19,	27,	26,	27,	19,	10,	3},
			{211,	03,	9,	27,	0,	10,	19,	27,	27,	27,	19,	10,	3},
			{212,	03,	9,	28,	0,	10,	19,	27,	28,	27,	19,	10,	3},
			{213,	03,	9,	29,	0,	10,	19,	27,	29,	27,	19,	10,	3},
			{214,	03,	9,	30,	0,	10,	19,	27,	30,	27,	19,	10,	3},
			{215,	03,	9,	31,	0,	10,	19,	27,	31,	27,	19,	10,	3},
			{216,	03,	9,	48,	0,	10,	22,	30,	48,	30,	22,	10,	3},
			{217,	03,	9,	49,	0,	10,	22,	30,	49,	30,	22,	10,	3},
			{218,	03,	9,	50,	0,	10,	22,	30,	50,	30,	22,	10,	3},
			{219,	03,	9,	51,	0,	10,	22,	30,	51,	30,	22,	10,	3},
			{220,	03,	9,	52,	0,	10,	22,	30,	52,	30,	22,	10,	3},
			{221,	03,	9,	53,	0,	10,	22,	30,	53,	30,	22,	10,	3},
			{222,	03,	9,	54,	0,	10,	22,	30,	54,	30,	22,	10,	3},
			{223,	03,	9,	55,	0,	10,	22,	30,	55,	30,	22,	10,	3},
			{224,	03,	9,	56,	0,	10,	22,	31,	56,	31,	22,	10,	3},
			{225,	03,	9,	57,	0,	10,	22,	31,	57,	31,	22,	10,	3},
			{226,	03,	9,	58,	0,	10,	22,	31,	58,	31,	22,	10,	3},
			{227,	03,	9,	59,	0,	10,	22,	31,	59,	31,	22,	10,	3},
			{228,	03,	9,	60,	0,	10,	22,	31,	60,	31,	22,	10,	3},
			{229,	03,	9,	61,	0,	10,	22,	31,	61,	31,	22,	10,	3},
			{230,	03,	9,	62,	0,	10,	22,	31,	62,	31,	22,	10,	3},
			{231,	03,	9,	63,	0,	10,	22,	31,	63,	31,	22,	10,	3},
			{232,	03,	9,	48,	0,	10,	23,	30,	48,	30,	23,	10,	3},
			{233,	03,	9,	49,	0,	10,	23,	30,	49,	30,	23,	10,	3},
			{234,	03,	9,	50,	0,	10,	23,	30,	50,	30,	23,	10,	3},
			{235,	03,	9,	51,	0,	10,	23,	30,	51,	30,	23,	10,	3},
			{236,	03,	9,	52,	0,	10,	23,	30,	52,	30,	23,	10,	3},
			{237,	03,	9,	53,	0,	10,	23,	30,	53,	30,	23,	10,	3},
			{238,	03,	9,	54,	0,	10,	23,	30,	54,	30,	23,	10,	3},
			{239,	03,	9,	55,	0,	10,	23,	30,	55,	30,	23,	10,	3},
			{240,	03,	9,	56,	0,	10,	23,	31,	56,	31,	23,	10,	3},
			{241,	03,	9,	57,	0,	10,	23,	31,	57,	31,	23,	10,	3},
			{242,	03,	9,	58,	0,	10,	23,	31,	58,	31,	23,	10,	3},
			{243,	03,	9,	59,	0,	10,	23,	31,	59,	31,	23,	10,	3},
			{244,	03,	9,	60,	0,	10,	23,	31,	60,	31,	23,	10,	3},
			{245,	03,	9,	61,	0,	10,	23,	31,	61,	31,	23,	10,	3},
			{246,	03,	9,	62,	0,	10,	23,	31,	62,	31,	23,	10,	3},
			{247,	03,	9,	63,	0,	10,	23,	31,	63,	31,	23,	10,	3},
			{248,	13,	9,	16,	1,	10,	18,	26,	16,	26,	18,	10,	3},
			{249,	13,	9,	17,	1,	10,	18,	26,	17,	26,	18,	10,	3},
			{250,	13,	9,	18,	1,	10,	18,	26,	18,	26,	18,	10,	3},
			{251,	13,	9,	19,	1,	10,	18,	26,	19,	26,	18,	10,	3},
			{252,	13,	9,	20,	1,	10,	18,	26,	20,	26,	18,	10,	3},
			{253,	13,	9,	21,	1,	10,	18,	26,	21,	26,	18,	10,	3},
			{254,	13,	9,	22,	1,	10,	18,	26,	22,	26,	18,	10,	3},
			{255,	13,	9,	23,	1,	10,	18,	26,	23,	26,	18,	10,	3},
			{256,	13,	9,	24,	1,	10,	18,	27,	24,	27,	18,	10,	3},
			{257,	13,	9,	25,	1,	10,	18,	27,	25,	27,	18,	10,	3},
			{258,	13,	9,	26,	1,	10,	18,	27,	26,	27,	18,	10,	3},
			{259,	13,	9,	27,	1,	10,	18,	27,	27,	27,	18,	10,	3},
			{260,	13,	9,	28,	1,	10,	18,	27,	28,	27,	18,	10,	3},
			{261,	13,	9,	29,	1,	10,	18,	27,	29,	27,	18,	10,	3},
			{262,	13,	9,	30,	1,	10,	18,	27,	30,	27,	18,	10,	3},
			{263,	13,	9,	31,	1,	10,	18,	27,	31,	27,	18,	10,	3},
			{264,	13,	9,	16,	1,	10,	19,	26,	16,	26,	19,	10,	3},
			{265,	13,	9,	17,	1,	10,	19,	26,	17,	26,	19,	10,	3},
			{266,	13,	9,	18,	1,	10,	19,	26,	18,	26,	19,	10,	3},
			{267,	13,	9,	19,	1,	10,	19,	26,	19,	26,	19,	10,	3},
			{268,	13,	9,	20,	1,	10,	19,	26,	20,	26,	19,	10,	3},
			{269,	13,	9,	21,	1,	10,	19,	26,	21,	26,	19,	10,	3},
			{270,	13,	9,	22,	1,	10,	19,	26,	22,	26,	19,	10,	3},
			{271,	13,	9,	23,	1,	10,	19,	26,	23,	26,	19,	10,	3},
			{272,	13,	9,	24,	1,	10,	19,	27,	24,	27,	19,	10,	3},
			{273,	13,	9,	25,	1,	10,	19,	27,	25,	27,	19,	10,	3},
			{274,	13,	9,	26,	1,	10,	19,	27,	26,	27,	19,	10,	3},
			{275,	13,	9,	27,	1,	10,	19,	27,	27,	27,	19,	10,	3},
			{276,	13,	9,	28,	1,	10,	19,	27,	28,	27,	19,	10,	3},
			{277,	13,	9,	29,	1,	10,	19,	27,	29,	27,	19,	10,	3},
			{278,	13,	9,	30,	1,	10,	19,	27,	30,	27,	19,	10,	3},
			{279,	13,	9,	31,	1,	10,	19,	27,	31,	27,	19,	10,	3},
			{280,	13,	9,	48,	1,	10,	22,	30,	48,	30,	22,	10,	3},
			{281,	13,	9,	49,	1,	10,	22,	30,	49,	30,	22,	10,	3},
			{282,	13,	9,	50,	1,	10,	22,	30,	50,	30,	22,	10,	3},
			{283,	13,	9,	51,	1,	10,	22,	30,	51,	30,	22,	10,	3},
			{284,	13,	9,	52,	1,	10,	22,	30,	52,	30,	22,	10,	3},
			{285,	13,	9,	53,	1,	10,	22,	30,	53,	30,	22,	10,	3},
			{286,	13,	9,	54,	1,	10,	22,	30,	54,	30,	22,	10,	3},
			{287,	13,	9,	55,	1,	10,	22,	30,	55,	30,	22,	10,	3},
			{288,	13,	9,	56,	1,	10,	22,	31,	56,	31,	22,	10,	3},
			{289,	13,	9,	57,	1,	10,	22,	31,	57,	31,	22,	10,	3},
			{290,	13,	9,	58,	1,	10,	22,	31,	58,	31,	22,	10,	3},
			{291,	13,	9,	59,	1,	10,	22,	31,	59,	31,	22,	10,	3},
			{292,	13,	9,	60,	1,	10,	22,	31,	60,	31,	22,	10,	3},
			{293,	13,	9,	61,	1,	10,	22,	31,	61,	31,	22,	10,	3},
			{294,	13,	9,	62,	1,	10,	22,	31,	62,	31,	22,	10,	3},
			{295,	13,	9,	63,	1,	10,	22,	31,	63,	31,	22,	10,	3},
			{296,	13,	9,	48,	1,	10,	23,	30,	48,	30,	23,	10,	3},
			{297,	13,	9,	49,	1,	10,	23,	30,	49,	30,	23,	10,	3},
			{298,	13,	9,	50,	1,	10,	23,	30,	50,	30,	23,	10,	3},
			{299,	13,	9,	51,	1,	10,	23,	30,	51,	30,	23,	10,	3},
			{300,	13,	9,	52,	1,	10,	23,	30,	52,	30,	23,	10,	3},
			{301,	13,	9,	53,	1,	10,	23,	30,	53,	30,	23,	10,	3},
			{302,	13,	9,	54,	1,	10,	23,	30,	54,	30,	23,	10,	3},
			{303,	13,	9,	55,	1,	10,	23,	30,	55,	30,	23,	10,	3},
			{304,	13,	9,	56,	1,	10,	23,	31,	56,	31,	23,	10,	3},
			{305,	13,	9,	57,	1,	10,	23,	31,	57,	31,	23,	10,	3},
			{306,	13,	9,	58,	1,	10,	23,	31,	58,	31,	23,	10,	3},
			{307,	13,	9,	59,	1,	10,	23,	31,	59,	31,	23,	10,	3},
			{308,	13,	9,	60,	1,	10,	23,	31,	60,	31,	23,	10,	3},
			{309,	13,	9,	61,	1,	10,	23,	31,	61,	31,	23,	10,	3},
			{310,	13,	9,	62,	1,	10,	23,	31,	62,	31,	23,	10,	3},
			{311,	13,	9,	63,	1,	10,	23,	31,	63,	31,	23,	10,	3},
			{312,	30,	9,	16,	3,	10,	18,	26,	16,	26,	18,	10,	0},
			{313,	30,	9,	17,	3,	10,	18,	26,	17,	26,	18,	10,	0},
			{314,	30,	9,	18,	3,	10,	18,	26,	18,	26,	18,	10,	0},
			{315,	30,	9,	19,	3,	10,	18,	26,	19,	26,	18,	10,	0},
			{316,	30,	9,	20,	3,	10,	18,	26,	20,	26,	18,	10,	0},
			{317,	30,	9,	21,	3,	10,	18,	26,	21,	26,	18,	10,	0},
			{318,	30,	9,	22,	3,	10,	18,	26,	22,	26,	18,	10,	0},
			{319,	30,	9,	23,	3,	10,	18,	26,	23,	26,	18,	10,	0},
			{320,	30,	9,	24,	3,	10,	18,	27,	24,	27,	18,	10,	0},
			{321,	30,	9,	25,	3,	10,	18,	27,	25,	27,	18,	10,	0},
			{322,	30,	9,	26,	3,	10,	18,	27,	26,	27,	18,	10,	0},
			{323,	30,	9,	27,	3,	10,	18,	27,	27,	27,	18,	10,	0},
			{324,	30,	9,	28,	3,	10,	18,	27,	28,	27,	18,	10,	0},
			{325,	30,	9,	29,	3,	10,	18,	27,	29,	27,	18,	10,	0},
			{326,	30,	9,	30,	3,	10,	18,	27,	30,	27,	18,	10,	0},
			{327,	30,	9,	31,	3,	10,	18,	27,	31,	27,	18,	10,	0},
			{328,	30,	9,	16,	3,	10,	19,	26,	16,	26,	19,	10,	0},
			{329,	30,	9,	17,	3,	10,	19,	26,	17,	26,	19,	10,	0},
			{330,	30,	9,	18,	3,	10,	19,	26,	18,	26,	19,	10,	0},
			{331,	30,	9,	19,	3,	10,	19,	26,	19,	26,	19,	10,	0},
			{332,	30,	9,	20,	3,	10,	19,	26,	20,	26,	19,	10,	0},
			{333,	30,	9,	21,	3,	10,	19,	26,	21,	26,	19,	10,	0},
			{334,	30,	9,	22,	3,	10,	19,	26,	22,	26,	19,	10,	0},
			{335,	30,	9,	23,	3,	10,	19,	26,	23,	26,	19,	10,	0},
			{336,	30,	9,	24,	3,	10,	19,	27,	24,	27,	19,	10,	0},
			{337,	30,	9,	25,	3,	10,	19,	27,	25,	27,	19,	10,	0},
			{338,	30,	9,	26,	3,	10,	19,	27,	26,	27,	19,	10,	0},
			{339,	30,	9,	27,	3,	10,	19,	27,	27,	27,	19,	10,	0},
			{340,	30,	9,	28,	3,	10,	19,	27,	28,	27,	19,	10,	0},
			{341,	30,	9,	29,	3,	10,	19,	27,	29,	27,	19,	10,	0},
			{342,	30,	9,	30,	3,	10,	19,	27,	30,	27,	19,	10,	0},
			{343,	30,	9,	31,	3,	10,	19,	27,	31,	27,	19,	10,	0},
			{344,	30,	9,	48,	3,	10,	22,	30,	48,	30,	22,	10,	0},
			{345,	30,	9,	49,	3,	10,	22,	30,	49,	30,	22,	10,	0},
			{346,	30,	9,	50,	3,	10,	22,	30,	50,	30,	22,	10,	0},
			{347,	30,	9,	51,	3,	10,	22,	30,	51,	30,	22,	10,	0},
			{348,	30,	9,	52,	3,	10,	22,	30,	52,	30,	22,	10,	0},
			{349,	30,	9,	53,	3,	10,	22,	30,	53,	30,	22,	10,	0},
			{350,	30,	9,	54,	3,	10,	22,	30,	54,	30,	22,	10,	0},
			{351,	30,	9,	55,	3,	10,	22,	30,	55,	30,	22,	10,	0},
			{352,	30,	9,	56,	3,	10,	22,	31,	56,	31,	22,	10,	0},
			{353,	30,	9,	57,	3,	10,	22,	31,	57,	31,	22,	10,	0},
			{354,	30,	9,	58,	3,	10,	22,	31,	58,	31,	22,	10,	0},
			{355,	30,	9,	59,	3,	10,	22,	31,	59,	31,	22,	10,	0},
			{356,	30,	9,	60,	3,	10,	22,	31,	60,	31,	22,	10,	0},
			{357,	30,	9,	61,	3,	10,	22,	31,	61,	31,	22,	10,	0},
			{358,	30,	9,	62,	3,	10,	22,	31,	62,	31,	22,	10,	0},
			{359,	30,	9,	63,	3,	10,	22,	31,	63,	31,	22,	10,	0},
			{360,	30,	9,	48,	3,	10,	23,	30,	48,	30,	23,	10,	0},
			{361,	30,	9,	49,	3,	10,	23,	30,	49,	30,	23,	10,	0},
			{362,	30,	9,	50,	3,	10,	23,	30,	50,	30,	23,	10,	0},
			{363,	30,	9,	51,	3,	10,	23,	30,	51,	30,	23,	10,	0},
			{364,	30,	9,	52,	3,	10,	23,	30,	52,	30,	23,	10,	0},
			{365,	30,	9,	53,	3,	10,	23,	30,	53,	30,	23,	10,	0},
			{366,	30,	9,	54,	3,	10,	23,	30,	54,	30,	23,	10,	0},
			{367,	30,	9,	55,	3,	10,	23,	30,	55,	30,	23,	10,	0},
			{368,	30,	9,	56,	3,	10,	23,	31,	56,	31,	23,	10,	0},
			{369,	30,	9,	57,	3,	10,	23,	31,	57,	31,	23,	10,	0},
			{370,	30,	9,	58,	3,	10,	23,	31,	58,	31,	23,	10,	0},
			{371,	30,	9,	59,	3,	10,	23,	31,	59,	31,	23,	10,	0},
			{372,	30,	9,	60,	3,	10,	23,	31,	60,	31,	23,	10,	0},
			{373,	30,	9,	61,	3,	10,	23,	31,	61,	31,	23,	10,	0},
			{374,	30,	9,	62,	3,	10,	23,	31,	62,	31,	23,	10,	0},
			{375,	30,	9,	63,	3,	10,	23,	31,	63,	31,	23,	10,	0},
			{376,	31,	9,	16,	3,	10,	18,	26,	16,	26,	18,	10,	1},
			{377,	31,	9,	17,	3,	10,	18,	26,	17,	26,	18,	10,	1},
			{378,	31,	9,	18,	3,	10,	18,	26,	18,	26,	18,	10,	1},
			{379,	31,	9,	19,	3,	10,	18,	26,	19,	26,	18,	10,	1},
			{380,	31,	9,	20,	3,	10,	18,	26,	20,	26,	18,	10,	1},
			{381,	31,	9,	21,	3,	10,	18,	26,	21,	26,	18,	10,	1},
			{382,	31,	9,	22,	3,	10,	18,	26,	22,	26,	18,	10,	1},
			{383,	31,	9,	23,	3,	10,	18,	26,	23,	26,	18,	10,	1},
			{384,	31,	9,	24,	3,	10,	18,	27,	24,	27,	18,	10,	1},
			{385,	31,	9,	25,	3,	10,	18,	27,	25,	27,	18,	10,	1},
			{386,	31,	9,	26,	3,	10,	18,	27,	26,	27,	18,	10,	1},
			{387,	31,	9,	27,	3,	10,	18,	27,	27,	27,	18,	10,	1},
			{388,	31,	9,	28,	3,	10,	18,	27,	28,	27,	18,	10,	1},
			{389,	31,	9,	29,	3,	10,	18,	27,	29,	27,	18,	10,	1},
			{390,	31,	9,	30,	3,	10,	18,	27,	30,	27,	18,	10,	1},
			{391,	31,	9,	31,	3,	10,	18,	27,	31,	27,	18,	10,	1},
			{392,	31,	9,	16,	3,	10,	19,	26,	16,	26,	19,	10,	1},
			{393,	31,	9,	17,	3,	10,	19,	26,	17,	26,	19,	10,	1},
			{394,	31,	9,	18,	3,	10,	19,	26,	18,	26,	19,	10,	1},
			{395,	31,	9,	19,	3,	10,	19,	26,	19,	26,	19,	10,	1},
			{396,	31,	9,	20,	3,	10,	19,	26,	20,	26,	19,	10,	1},
			{397,	31,	9,	21,	3,	10,	19,	26,	21,	26,	19,	10,	1},
			{398,	31,	9,	22,	3,	10,	19,	26,	22,	26,	19,	10,	1},
			{399,	31,	9,	23,	3,	10,	19,	26,	23,	26,	19,	10,	1},
			{400,	31,	9,	24,	3,	10,	19,	27,	24,	27,	19,	10,	1},
			{401,	31,	9,	25,	3,	10,	19,	27,	25,	27,	19,	10,	1},
			{402,	31,	9,	26,	3,	10,	19,	27,	26,	27,	19,	10,	1},
			{403,	31,	9,	27,	3,	10,	19,	27,	27,	27,	19,	10,	1},
			{404,	31,	9,	28,	3,	10,	19,	27,	28,	27,	19,	10,	1},
			{405,	31,	9,	29,	3,	10,	19,	27,	29,	27,	19,	10,	1},
			{406,	31,	9,	30,	3,	10,	19,	27,	30,	27,	19,	10,	1},
			{407,	31,	9,	31,	3,	10,	19,	27,	31,	27,	19,	10,	1},
			{408,	31,	9,	48,	3,	10,	22,	30,	48,	30,	22,	10,	1},
			{409,	31,	9,	49,	3,	10,	22,	30,	49,	30,	22,	10,	1},
			{410,	31,	9,	50,	3,	10,	22,	30,	50,	30,	22,	10,	1},
			{411,	31,	9,	51,	3,	10,	22,	30,	51,	30,	22,	10,	1},
			{412,	31,	9,	52,	3,	10,	22,	30,	52,	30,	22,	10,	1},
			{413,	31,	9,	53,	3,	10,	22,	30,	53,	30,	22,	10,	1},
			{414,	31,	9,	54,	3,	10,	22,	30,	54,	30,	22,	10,	1},
			{415,	31,	9,	55,	3,	10,	22,	30,	55,	30,	22,	10,	1},
			{416,	31,	9,	56,	3,	10,	22,	31,	56,	31,	22,	10,	1},
			{417,	31,	9,	57,	3,	10,	22,	31,	57,	31,	22,	10,	1},
			{418,	31,	9,	58,	3,	10,	22,	31,	58,	31,	22,	10,	1},
			{419,	31,	9,	59,	3,	10,	22,	31,	59,	31,	22,	10,	1},
			{420,	31,	9,	60,	3,	10,	22,	31,	60,	31,	22,	10,	1},
			{421,	31,	9,	61,	3,	10,	22,	31,	61,	31,	22,	10,	1},
			{422,	31,	9,	62,	3,	10,	22,	31,	62,	31,	22,	10,	1},
			{423,	31,	9,	63,	3,	10,	22,	31,	63,	31,	22,	10,	1},
			{424,	31,	9,	48,	3,	10,	23,	30,	48,	30,	23,	10,	1},
			{425,	31,	9,	49,	3,	10,	23,	30,	49,	30,	23,	10,	1},
			{426,	31,	9,	50,	3,	10,	23,	30,	50,	30,	23,	10,	1},
			{427,	31,	9,	51,	3,	10,	23,	30,	51,	30,	23,	10,	1},
			{428,	31,	9,	52,	3,	10,	23,	30,	52,	30,	23,	10,	1},
			{429,	31,	9,	53,	3,	10,	23,	30,	53,	30,	23,	10,	1},
			{430,	31,	9,	54,	3,	10,	23,	30,	54,	30,	23,	10,	1},
			{431,	31,	9,	55,	3,	10,	23,	30,	55,	30,	23,	10,	1},
			{432,	31,	9,	56,	3,	10,	23,	31,	56,	31,	23,	10,	1},
			{433,	31,	9,	57,	3,	10,	23,	31,	57,	31,	23,	10,	1},
			{434,	31,	9,	58,	3,	10,	23,	31,	58,	31,	23,	10,	1},
			{435,	31,	9,	59,	3,	10,	23,	31,	59,	31,	23,	10,	1},
			{436,	31,	9,	60,	3,	10,	23,	31,	60,	31,	23,	10,	1},
			{437,	31,	9,	61,	3,	10,	23,	31,	61,	31,	23,	10,	1},
			{438,	31,	9,	62,	3,	10,	23,	31,	62,	31,	23,	10,	1},
			{439,	31,	9,	63,	3,	10,	23,	31,	63,	31,	23,	10,	1},
};
	
	return P9;
	};

public static int[][] Path101()
	{	
	//These are the paths that have 10 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8,9}
	int[][] P101 = {
			{2000,	02,	10,	16,	0,	10,	18,	26,	48,	26,	18,	10,	6,	2},
			{2001,	02,	10,	17,	0,	10,	18,	26,	49,	26,	18,	10,	6,	2},
			{2002,	02,	10,	18,	0,	10,	18,	26,	50,	26,	18,	10,	6,	2},
			{2003,	02,	10,	19,	0,	10,	18,	26,	51,	26,	18,	10,	6,	2},
			{2004,	02,	10,	20,	0,	10,	18,	26,	52,	26,	18,	10,	6,	2},
			{2005,	02,	10,	21,	0,	10,	18,	26,	53,	26,	18,	10,	6,	2},
			{2006,	02,	10,	22,	0,	10,	18,	26,	54,	26,	18,	10,	6,	2},
			{2007,	02,	10,	23,	0,	10,	18,	26,	55,	26,	18,	10,	6,	2},
			{2008,	02,	10,	16,	0,	10,	19,	26,	48,	26,	19,	10,	6,	2},
			{2009,	02,	10,	17,	0,	10,	19,	26,	49,	26,	19,	10,	6,	2},
			{2010,	02,	10,	18,	0,	10,	19,	26,	50,	26,	19,	10,	6,	2},
			{2011,	02,	10,	19,	0,	10,	19,	26,	51,	26,	19,	10,	6,	2},
			{2012,	02,	10,	20,	0,	10,	19,	26,	52,	26,	19,	10,	6,	2},
			{2013,	02,	10,	21,	0,	10,	19,	26,	53,	26,	19,	10,	6,	2},
			{2014,	02,	10,	22,	0,	10,	19,	26,	54,	26,	19,	10,	6,	2},
			{2015,	02,	10,	23,	0,	10,	19,	26,	55,	26,	19,	10,	6,	2},
			{2016,	02,	10,	48,	0,	10,	22,	30,	80,	30,	22,	10,	6,	2},
			{2017,	02,	10,	49,	0,	10,	22,	30,	81,	30,	22,	10,	6,	2},
			{2018,	02,	10,	50,	0,	10,	22,	30,	82,	30,	22,	10,	6,	2},
			{2019,	02,	10,	51,	0,	10,	22,	30,	83,	30,	22,	10,	6,	2},
			{2020,	02,	10,	52,	0,	10,	22,	30,	84,	30,	22,	10,	6,	2},
			{2021,	02,	10,	53,	0,	10,	22,	30,	85,	30,	22,	10,	6,	2},
			{2022,	02,	10,	54,	0,	10,	22,	30,	86,	30,	22,	10,	6,	2},
			{2023,	02,	10,	55,	0,	10,	22,	30,	87,	30,	22,	10,	6,	2},
			{2024,	02,	10,	48,	0,	10,	23,	30,	80,	30,	23,	10,	6,	2},
			{2025,	02,	10,	49,	0,	10,	23,	30,	81,	30,	23,	10,	6,	2},
			{2026,	02,	10,	50,	0,	10,	23,	30,	82,	30,	23,	10,	6,	2},
			{2027,	02,	10,	51,	0,	10,	23,	30,	83,	30,	23,	10,	6,	2},
			{2028,	02,	10,	52,	0,	10,	23,	30,	84,	30,	23,	10,	6,	2},
			{2029,	02,	10,	53,	0,	10,	23,	30,	85,	30,	23,	10,	6,	2},
			{2030,	02,	10,	54,	0,	10,	23,	30,	86,	30,	23,	10,	6,	2},
			{2031,	02,	10,	55,	0,	10,	23,	30,	87,	30,	23,	10,	6,	2},
			{2032,	05,	10,	16,	0,	10,	18,	26,	48,	26,	18,	10,	6,	5},
			{2033,	05,	10,	17,	0,	10,	18,	26,	49,	26,	18,	10,	6,	5},
			{2034,	05,	10,	18,	0,	10,	18,	26,	50,	26,	18,	10,	6,	5},
			{2035,	05,	10,	19,	0,	10,	18,	26,	51,	26,	18,	10,	6,	5},
			{2036,	05,	10,	20,	0,	10,	18,	26,	52,	26,	18,	10,	6,	5},
			{2037,	05,	10,	21,	0,	10,	18,	26,	53,	26,	18,	10,	6,	5},
			{2038,	05,	10,	22,	0,	10,	18,	26,	54,	26,	18,	10,	6,	5},
			{2039,	05,	10,	23,	0,	10,	18,	26,	55,	26,	18,	10,	6,	5},
			{2040,	05,	10,	16,	0,	10,	19,	26,	48,	26,	19,	10,	6,	5},
			{2041,	05,	10,	17,	0,	10,	19,	26,	49,	26,	19,	10,	6,	5},
			{2042,	05,	10,	18,	0,	10,	19,	26,	50,	26,	19,	10,	6,	5},
			{2043,	05,	10,	19,	0,	10,	19,	26,	51,	26,	19,	10,	6,	5},
			{2044,	05,	10,	20,	0,	10,	19,	26,	52,	26,	19,	10,	6,	5},
			{2045,	05,	10,	21,	0,	10,	19,	26,	53,	26,	19,	10,	6,	5},
			{2046,	05,	10,	22,	0,	10,	19,	26,	54,	26,	19,	10,	6,	5},
			{2047,	05,	10,	23,	0,	10,	19,	26,	55,	26,	19,	10,	6,	5},
			{2048,	05,	10,	48,	0,	10,	22,	30,	80,	30,	22,	10,	6,	5},
			{2049,	05,	10,	49,	0,	10,	22,	30,	81,	30,	22,	10,	6,	5},
			{2050,	05,	10,	50,	0,	10,	22,	30,	82,	30,	22,	10,	6,	5},
			{2051,	05,	10,	51,	0,	10,	22,	30,	83,	30,	22,	10,	6,	5},
			{2052,	05,	10,	52,	0,	10,	22,	30,	84,	30,	22,	10,	6,	5},
			{2053,	05,	10,	53,	0,	10,	22,	30,	85,	30,	22,	10,	6,	5},
			{2054,	05,	10,	54,	0,	10,	22,	30,	86,	30,	22,	10,	6,	5},
			{2055,	05,	10,	55,	0,	10,	22,	30,	87,	30,	22,	10,	6,	5},
			{2056,	05,	10,	48,	0,	10,	23,	30,	80,	30,	23,	10,	6,	5},
			{2057,	05,	10,	49,	0,	10,	23,	30,	81,	30,	23,	10,	6,	5},
			{2058,	05,	10,	50,	0,	10,	23,	30,	82,	30,	23,	10,	6,	5},
			{2059,	05,	10,	51,	0,	10,	23,	30,	83,	30,	23,	10,	6,	5},
			{2060,	05,	10,	52,	0,	10,	23,	30,	84,	30,	23,	10,	6,	5},
			{2061,	05,	10,	53,	0,	10,	23,	30,	85,	30,	23,	10,	6,	5},
			{2062,	05,	10,	54,	0,	10,	23,	30,	86,	30,	23,	10,	6,	5},
			{2063,	05,	10,	55,	0,	10,	23,	30,	87,	30,	23,	10,	6,	5},
			{2064,	05,	10,	56,	0,	10,	22,	31,	88,	31,	22,	10,	6,	5},
			{2065,	05,	10,	57,	0,	10,	22,	31,	89,	31,	22,	10,	6,	5},
			{2066,	05,	10,	58,	0,	10,	22,	31,	90,	31,	22,	10,	6,	5},
			{2067,	05,	10,	59,	0,	10,	22,	31,	91,	31,	22,	10,	6,	5},
			{2068,	05,	10,	60,	0,	10,	22,	31,	92,	31,	22,	10,	6,	5},
			{2069,	05,	10,	61,	0,	10,	22,	31,	93,	31,	22,	10,	6,	5},
			{2070,	05,	10,	62,	0,	10,	22,	31,	94,	31,	22,	10,	6,	5},
			{2071,	05,	10,	63,	0,	10,	22,	31,	95,	31,	22,	10,	6,	5},
			{2072,	12,	10,	16,	1,	10,	18,	26,	48,	26,	18,	10,	6,	2},
			{2073,	12,	10,	17,	1,	10,	18,	26,	49,	26,	18,	10,	6,	2},
			{2074,	12,	10,	18,	1,	10,	18,	26,	50,	26,	18,	10,	6,	2},
			{2075,	12,	10,	19,	1,	10,	18,	26,	51,	26,	18,	10,	6,	2},
			{2076,	12,	10,	20,	1,	10,	18,	26,	52,	26,	18,	10,	6,	2},
			{2077,	12,	10,	21,	1,	10,	18,	26,	53,	26,	18,	10,	6,	2},
			{2078,	12,	10,	22,	1,	10,	18,	26,	54,	26,	18,	10,	6,	2},
			{2079,	12,	10,	23,	1,	10,	18,	26,	55,	26,	18,	10,	6,	2},
			{2080,	12,	10,	16,	1,	10,	19,	26,	48,	26,	19,	10,	6,	2},
			{2081,	12,	10,	17,	1,	10,	19,	26,	49,	26,	19,	10,	6,	2},
			{2082,	12,	10,	18,	1,	10,	19,	26,	50,	26,	19,	10,	6,	2},
			{2083,	12,	10,	19,	1,	10,	19,	26,	51,	26,	19,	10,	6,	2},
			{2084,	12,	10,	20,	1,	10,	19,	26,	52,	26,	19,	10,	6,	2},
			{2085,	12,	10,	21,	1,	10,	19,	26,	53,	26,	19,	10,	6,	2},
			{2086,	12,	10,	22,	1,	10,	19,	26,	54,	26,	19,	10,	6,	2},
			{2087,	12,	10,	23,	1,	10,	19,	26,	55,	26,	19,	10,	6,	2},
			{2088,	12,	10,	48,	1,	10,	22,	30,	80,	30,	22,	10,	6,	2},
			{2089,	12,	10,	49,	1,	10,	22,	30,	81,	30,	22,	10,	6,	2},
			{2090,	12,	10,	50,	1,	10,	22,	30,	82,	30,	22,	10,	6,	2},
			{2091,	12,	10,	51,	1,	10,	22,	30,	83,	30,	22,	10,	6,	2},
			{2092,	12,	10,	52,	1,	10,	22,	30,	84,	30,	22,	10,	6,	2},
			{2093,	12,	10,	53,	1,	10,	22,	30,	85,	30,	22,	10,	6,	2},
			{2094,	12,	10,	54,	1,	10,	22,	30,	86,	30,	22,	10,	6,	2},
			{2095,	12,	10,	55,	1,	10,	22,	30,	87,	30,	22,	10,	6,	2},
			{2096,	12,	10,	48,	1,	10,	23,	30,	80,	30,	23,	10,	6,	2},
			{2097,	12,	10,	49,	1,	10,	23,	30,	81,	30,	23,	10,	6,	2},
			{2098,	12,	10,	50,	1,	10,	23,	30,	82,	30,	23,	10,	6,	2},
			{2099,	12,	10,	51,	1,	10,	23,	30,	83,	30,	23,	10,	6,	2},
			{2100,	12,	10,	52,	1,	10,	23,	30,	84,	30,	23,	10,	6,	2},
			{2101,	12,	10,	53,	1,	10,	23,	30,	85,	30,	23,	10,	6,	2},
			{2102,	12,	10,	54,	1,	10,	23,	30,	86,	30,	23,	10,	6,	2},
			{2103,	12,	10,	55,	1,	10,	23,	30,	87,	30,	23,	10,	6,	2},
			{2104,	15,	10,	16,	1,	10,	18,	26,	48,	26,	18,	10,	6,	5},
			{2105,	15,	10,	17,	1,	10,	18,	26,	49,	26,	18,	10,	6,	5},
			{2106,	15,	10,	18,	1,	10,	18,	26,	50,	26,	18,	10,	6,	5},
			{2107,	15,	10,	19,	1,	10,	18,	26,	51,	26,	18,	10,	6,	5},
			{2108,	15,	10,	20,	1,	10,	18,	26,	52,	26,	18,	10,	6,	5},
			{2109,	15,	10,	21,	1,	10,	18,	26,	53,	26,	18,	10,	6,	5},
			{2110,	15,	10,	22,	1,	10,	18,	26,	54,	26,	18,	10,	6,	5},
			{2111,	15,	10,	23,	1,	10,	18,	26,	55,	26,	18,	10,	6,	5},
			{2112,	15,	10,	16,	1,	10,	19,	26,	48,	26,	19,	10,	6,	5},
			{2113,	15,	10,	17,	1,	10,	19,	26,	49,	26,	19,	10,	6,	5},
			{2114,	15,	10,	18,	1,	10,	19,	26,	50,	26,	19,	10,	6,	5},
			{2115,	15,	10,	19,	1,	10,	19,	26,	51,	26,	19,	10,	6,	5},
			{2116,	15,	10,	20,	1,	10,	19,	26,	52,	26,	19,	10,	6,	5},
			{2117,	15,	10,	21,	1,	10,	19,	26,	53,	26,	19,	10,	6,	5},
			{2118,	15,	10,	22,	1,	10,	19,	26,	54,	26,	19,	10,	6,	5},
			{2119,	15,	10,	23,	1,	10,	19,	26,	55,	26,	19,	10,	6,	5},
			{2120,	15,	10,	48,	1,	10,	22,	30,	80,	30,	22,	10,	6,	5},
			{2121,	15,	10,	49,	1,	10,	22,	30,	81,	30,	22,	10,	6,	5},
			{2122,	15,	10,	50,	1,	10,	22,	30,	82,	30,	22,	10,	6,	5},
			{2123,	15,	10,	51,	1,	10,	22,	30,	83,	30,	22,	10,	6,	5},
			{2124,	15,	10,	52,	1,	10,	22,	30,	84,	30,	22,	10,	6,	5},
			{2125,	15,	10,	53,	1,	10,	22,	30,	85,	30,	22,	10,	6,	5},
			{2126,	15,	10,	54,	1,	10,	22,	30,	86,	30,	22,	10,	6,	5},
			{2127,	15,	10,	55,	1,	10,	22,	30,	87,	30,	22,	10,	6,	5},
			{2128,	15,	10,	48,	1,	10,	23,	30,	80,	30,	23,	10,	6,	5},
			{2129,	15,	10,	49,	1,	10,	23,	30,	81,	30,	23,	10,	6,	5},
			{2130,	15,	10,	50,	1,	10,	23,	30,	82,	30,	23,	10,	6,	5},
			{2131,	15,	10,	51,	1,	10,	23,	30,	83,	30,	23,	10,	6,	5},
			{2132,	15,	10,	52,	1,	10,	23,	30,	84,	30,	23,	10,	6,	5},
			{2133,	15,	10,	53,	1,	10,	23,	30,	85,	30,	23,	10,	6,	5},
			{2134,	15,	10,	54,	1,	10,	23,	30,	86,	30,	23,	10,	6,	5},
			{2135,	15,	10,	55,	1,	10,	23,	30,	87,	30,	23,	10,	6,	5},
			{2136,	15,	10,	56,	1,	10,	22,	31,	88,	31,	22,	10,	6,	5},
			{2137,	15,	10,	57,	1,	10,	22,	31,	89,	31,	22,	10,	6,	5},
			{2138,	15,	10,	58,	1,	10,	22,	31,	90,	31,	22,	10,	6,	5},
			{2139,	15,	10,	59,	1,	10,	22,	31,	91,	31,	22,	10,	6,	5},
			{2140,	15,	10,	60,	1,	10,	22,	31,	92,	31,	22,	10,	6,	5},
			{2141,	15,	10,	61,	1,	10,	22,	31,	93,	31,	22,	10,	6,	5},
			{2142,	15,	10,	62,	1,	10,	22,	31,	94,	31,	22,	10,	6,	5},
			{2143,	15,	10,	63,	1,	10,	22,	31,	95,	31,	22,	10,	6,	5},
			{2144,	20,	10,	16,	2,	6,	10,	18,	26,	48,	26,	18,	10,	0},
			{2145,	20,	10,	17,	2,	6,	10,	18,	26,	49,	26,	18,	10,	0},
			{2146,	20,	10,	18,	2,	6,	10,	18,	26,	50,	26,	18,	10,	0},
			{2147,	20,	10,	19,	2,	6,	10,	18,	26,	51,	26,	18,	10,	0},
			{2148,	20,	10,	20,	2,	6,	10,	18,	26,	52,	26,	18,	10,	0},
			{2149,	20,	10,	21,	2,	6,	10,	18,	26,	53,	26,	18,	10,	0},
			{2150,	20,	10,	22,	2,	6,	10,	18,	26,	54,	26,	18,	10,	0},
			{2151,	20,	10,	23,	2,	6,	10,	18,	26,	55,	26,	18,	10,	0},
			{2152,	20,	10,	16,	2,	6,	10,	19,	26,	48,	26,	19,	10,	0},
			{2153,	20,	10,	17,	2,	6,	10,	19,	26,	49,	26,	19,	10,	0},
			{2154,	20,	10,	18,	2,	6,	10,	19,	26,	50,	26,	19,	10,	0},
			{2155,	20,	10,	19,	2,	6,	10,	19,	26,	51,	26,	19,	10,	0},
			{2156,	20,	10,	20,	2,	6,	10,	19,	26,	52,	26,	19,	10,	0},
			{2157,	20,	10,	21,	2,	6,	10,	19,	26,	53,	26,	19,	10,	0},
			{2158,	20,	10,	22,	2,	6,	10,	19,	26,	54,	26,	19,	10,	0},
			{2159,	20,	10,	23,	2,	6,	10,	19,	26,	55,	26,	19,	10,	0},
			{2160,	20,	10,	24,	2,	6,	10,	18,	27,	56,	27,	18,	10,	0},
			{2161,	20,	10,	25,	2,	6,	10,	18,	27,	57,	27,	18,	10,	0},
			{2162,	20,	10,	26,	2,	6,	10,	18,	27,	58,	27,	18,	10,	0},
			{2163,	20,	10,	27,	2,	6,	10,	18,	27,	59,	27,	18,	10,	0},
			{2164,	20,	10,	28,	2,	6,	10,	18,	27,	60,	27,	18,	10,	0},
			{2165,	20,	10,	29,	2,	6,	10,	18,	27,	61,	27,	18,	10,	0},
			{2166,	20,	10,	30,	2,	6,	10,	18,	27,	62,	27,	18,	10,	0},
			{2167,	20,	10,	31,	2,	6,	10,	18,	27,	63,	27,	18,	10,	0},
			{2168,	20,	10,	24,	2,	6,	10,	19,	27,	56,	27,	19,	10,	0},
			{2169,	20,	10,	25,	2,	6,	10,	19,	27,	57,	27,	19,	10,	0},
			{2170,	20,	10,	26,	2,	6,	10,	19,	27,	58,	27,	19,	10,	0},
			{2171,	20,	10,	27,	2,	6,	10,	19,	27,	59,	27,	19,	10,	0},
			{2172,	20,	10,	28,	2,	6,	10,	19,	27,	60,	27,	19,	10,	0},
			{2173,	20,	10,	29,	2,	6,	10,	19,	27,	61,	27,	19,	10,	0},
			{2174,	20,	10,	30,	2,	6,	10,	19,	27,	62,	27,	19,	10,	0},
			{2175,	20,	10,	31,	2,	6,	10,	19,	27,	63,	27,	19,	10,	0},
			{2176,	20,	10,	48,	2,	6,	10,	22,	30,	80,	30,	22,	10,	0},
			{2177,	20,	10,	49,	2,	6,	10,	22,	30,	81,	30,	22,	10,	0},
			{2178,	20,	10,	50,	2,	6,	10,	22,	30,	82,	30,	22,	10,	0},
			{2179,	20,	10,	51,	2,	6,	10,	22,	30,	83,	30,	22,	10,	0},
			{2180,	20,	10,	52,	2,	6,	10,	22,	30,	84,	30,	22,	10,	0},
			{2181,	20,	10,	53,	2,	6,	10,	22,	30,	85,	30,	22,	10,	0},
			{2182,	20,	10,	54,	2,	6,	10,	22,	30,	86,	30,	22,	10,	0},
			{2183,	20,	10,	55,	2,	6,	10,	22,	30,	87,	30,	22,	10,	0},
			{2184,	20,	10,	48,	2,	6,	10,	23,	30,	80,	30,	23,	10,	0},
			{2185,	20,	10,	49,	2,	6,	10,	23,	30,	81,	30,	23,	10,	0},
			{2186,	20,	10,	50,	2,	6,	10,	23,	30,	82,	30,	23,	10,	0},
			{2187,	20,	10,	51,	2,	6,	10,	23,	30,	83,	30,	23,	10,	0},
			{2188,	20,	10,	52,	2,	6,	10,	23,	30,	84,	30,	23,	10,	0},
			{2189,	20,	10,	53,	2,	6,	10,	23,	30,	85,	30,	23,	10,	0},
			{2190,	20,	10,	54,	2,	6,	10,	23,	30,	86,	30,	23,	10,	0},
			{2191,	20,	10,	55,	2,	6,	10,	23,	30,	87,	30,	23,	10,	0},
			{2192,	20,	10,	56,	2,	6,	10,	22,	31,	88,	31,	22,	10,	0},
			{2193,	20,	10,	57,	2,	6,	10,	22,	31,	89,	31,	22,	10,	0},
			{2194,	20,	10,	58,	2,	6,	10,	22,	31,	90,	31,	22,	10,	0},
			{2195,	20,	10,	59,	2,	6,	10,	22,	31,	91,	31,	22,	10,	0},
			{2196,	20,	10,	60,	2,	6,	10,	22,	31,	92,	31,	22,	10,	0},
			{2197,	20,	10,	61,	2,	6,	10,	22,	31,	93,	31,	22,	10,	0},
			{2198,	20,	10,	62,	2,	6,	10,	22,	31,	94,	31,	22,	10,	0},
			{2199,	20,	10,	63,	2,	6,	10,	22,	31,	95,	31,	22,	10,	0},
			{2200,	21,	10,	16,	2,	6,	10,	18,	26,	48,	26,	18,	10,	1},
			{2201,	21,	10,	17,	2,	6,	10,	18,	26,	49,	26,	18,	10,	1},
			{2202,	21,	10,	18,	2,	6,	10,	18,	26,	50,	26,	18,	10,	1},
			{2203,	21,	10,	19,	2,	6,	10,	18,	26,	51,	26,	18,	10,	1},
			{2204,	21,	10,	20,	2,	6,	10,	18,	26,	52,	26,	18,	10,	1},
			{2205,	21,	10,	21,	2,	6,	10,	18,	26,	53,	26,	18,	10,	1},
			{2206,	21,	10,	22,	2,	6,	10,	18,	26,	54,	26,	18,	10,	1},
			{2207,	21,	10,	23,	2,	6,	10,	18,	26,	55,	26,	18,	10,	1},
			{2208,	21,	10,	16,	2,	6,	10,	19,	26,	48,	26,	19,	10,	1},
			{2209,	21,	10,	17,	2,	6,	10,	19,	26,	49,	26,	19,	10,	1},
			{2210,	21,	10,	18,	2,	6,	10,	19,	26,	50,	26,	19,	10,	1},
			{2211,	21,	10,	19,	2,	6,	10,	19,	26,	51,	26,	19,	10,	1},
			{2212,	21,	10,	20,	2,	6,	10,	19,	26,	52,	26,	19,	10,	1},
			{2213,	21,	10,	21,	2,	6,	10,	19,	26,	53,	26,	19,	10,	1},
			{2214,	21,	10,	22,	2,	6,	10,	19,	26,	54,	26,	19,	10,	1},
			{2215,	21,	10,	23,	2,	6,	10,	19,	26,	55,	26,	19,	10,	1},
			{2216,	21,	10,	24,	2,	6,	10,	18,	27,	56,	27,	18,	10,	1},
			{2217,	21,	10,	25,	2,	6,	10,	18,	27,	57,	27,	18,	10,	1},
			{2218,	21,	10,	26,	2,	6,	10,	18,	27,	58,	27,	18,	10,	1},
			{2219,	21,	10,	27,	2,	6,	10,	18,	27,	59,	27,	18,	10,	1},
			{2220,	21,	10,	28,	2,	6,	10,	18,	27,	60,	27,	18,	10,	1},
			{2221,	21,	10,	29,	2,	6,	10,	18,	27,	61,	27,	18,	10,	1},
			{2222,	21,	10,	30,	2,	6,	10,	18,	27,	62,	27,	18,	10,	1},
			{2223,	21,	10,	31,	2,	6,	10,	18,	27,	63,	27,	18,	10,	1},
			{2224,	21,	10,	24,	2,	6,	10,	19,	27,	56,	27,	19,	10,	1},
			{2225,	21,	10,	25,	2,	6,	10,	19,	27,	57,	27,	19,	10,	1},
			{2226,	21,	10,	26,	2,	6,	10,	19,	27,	58,	27,	19,	10,	1},
			{2227,	21,	10,	27,	2,	6,	10,	19,	27,	59,	27,	19,	10,	1},
			{2228,	21,	10,	28,	2,	6,	10,	19,	27,	60,	27,	19,	10,	1},
			{2229,	21,	10,	29,	2,	6,	10,	19,	27,	61,	27,	19,	10,	1},
			{2230,	21,	10,	30,	2,	6,	10,	19,	27,	62,	27,	19,	10,	1},
			{2231,	21,	10,	31,	2,	6,	10,	19,	27,	63,	27,	19,	10,	1},
			{2232,	21,	10,	48,	2,	6,	10,	22,	30,	80,	30,	22,	10,	1},
			{2233,	21,	10,	49,	2,	6,	10,	22,	30,	81,	30,	22,	10,	1},
			{2234,	21,	10,	50,	2,	6,	10,	22,	30,	82,	30,	22,	10,	1},
			{2235,	21,	10,	51,	2,	6,	10,	22,	30,	83,	30,	22,	10,	1},
			{2236,	21,	10,	52,	2,	6,	10,	22,	30,	84,	30,	22,	10,	1},
			{2237,	21,	10,	53,	2,	6,	10,	22,	30,	85,	30,	22,	10,	1},
			{2238,	21,	10,	54,	2,	6,	10,	22,	30,	86,	30,	22,	10,	1},
			{2239,	21,	10,	55,	2,	6,	10,	22,	30,	87,	30,	22,	10,	1},
			{2240,	21,	10,	48,	2,	6,	10,	23,	30,	80,	30,	23,	10,	1},
			{2241,	21,	10,	49,	2,	6,	10,	23,	30,	81,	30,	23,	10,	1},
			{2242,	21,	10,	50,	2,	6,	10,	23,	30,	82,	30,	23,	10,	1},
			{2243,	21,	10,	51,	2,	6,	10,	23,	30,	83,	30,	23,	10,	1},
			{2244,	21,	10,	52,	2,	6,	10,	23,	30,	84,	30,	23,	10,	1},
			{2245,	21,	10,	53,	2,	6,	10,	23,	30,	85,	30,	23,	10,	1},
			{2246,	21,	10,	54,	2,	6,	10,	23,	30,	86,	30,	23,	10,	1},
			{2247,	21,	10,	55,	2,	6,	10,	23,	30,	87,	30,	23,	10,	1},
			{2248,	21,	10,	56,	2,	6,	10,	22,	31,	88,	31,	22,	10,	1},
			{2249,	21,	10,	57,	2,	6,	10,	22,	31,	89,	31,	22,	10,	1},
			{2250,	21,	10,	58,	2,	6,	10,	22,	31,	90,	31,	22,	10,	1},
			{2251,	21,	10,	59,	2,	6,	10,	22,	31,	91,	31,	22,	10,	1},
			{2252,	21,	10,	60,	2,	6,	10,	22,	31,	92,	31,	22,	10,	1},
			{2253,	21,	10,	61,	2,	6,	10,	22,	31,	93,	31,	22,	10,	1},
			{2254,	21,	10,	62,	2,	6,	10,	22,	31,	94,	31,	22,	10,	1},
			{2255,	21,	10,	63,	2,	6,	10,	22,	31,	95,	31,	22,	10,	1},
			{2256,	23,	10,	16,	2,	6,	10,	18,	26,	48,	26,	18,	10,	3},
			{2257,	23,	10,	17,	2,	6,	10,	18,	26,	49,	26,	18,	10,	3},
			{2258,	23,	10,	18,	2,	6,	10,	18,	26,	50,	26,	18,	10,	3},
			{2259,	23,	10,	19,	2,	6,	10,	18,	26,	51,	26,	18,	10,	3},
			{2260,	23,	10,	20,	2,	6,	10,	18,	26,	52,	26,	18,	10,	3},
			{2261,	23,	10,	21,	2,	6,	10,	18,	26,	53,	26,	18,	10,	3},
			{2262,	23,	10,	22,	2,	6,	10,	18,	26,	54,	26,	18,	10,	3},
			{2263,	23,	10,	23,	2,	6,	10,	18,	26,	55,	26,	18,	10,	3},
			{2264,	23,	10,	16,	2,	6,	10,	19,	26,	48,	26,	19,	10,	3},
			{2265,	23,	10,	17,	2,	6,	10,	19,	26,	49,	26,	19,	10,	3},
			{2266,	23,	10,	18,	2,	6,	10,	19,	26,	50,	26,	19,	10,	3},
			{2267,	23,	10,	19,	2,	6,	10,	19,	26,	51,	26,	19,	10,	3},
			{2268,	23,	10,	20,	2,	6,	10,	19,	26,	52,	26,	19,	10,	3},
			{2269,	23,	10,	21,	2,	6,	10,	19,	26,	53,	26,	19,	10,	3},
			{2270,	23,	10,	22,	2,	6,	10,	19,	26,	54,	26,	19,	10,	3},
			{2271,	23,	10,	23,	2,	6,	10,	19,	26,	55,	26,	19,	10,	3},
			{2272,	23,	10,	24,	2,	6,	10,	18,	27,	56,	27,	18,	10,	3},
			{2273,	23,	10,	25,	2,	6,	10,	18,	27,	57,	27,	18,	10,	3},
			{2274,	23,	10,	26,	2,	6,	10,	18,	27,	58,	27,	18,	10,	3},
			{2275,	23,	10,	27,	2,	6,	10,	18,	27,	59,	27,	18,	10,	3},
			{2276,	23,	10,	28,	2,	6,	10,	18,	27,	60,	27,	18,	10,	3},
			{2277,	23,	10,	29,	2,	6,	10,	18,	27,	61,	27,	18,	10,	3},
			{2278,	23,	10,	30,	2,	6,	10,	18,	27,	62,	27,	18,	10,	3},
			{2279,	23,	10,	31,	2,	6,	10,	18,	27,	63,	27,	18,	10,	3},
			{2280,	23,	10,	24,	2,	6,	10,	19,	27,	56,	27,	19,	10,	3},
			{2281,	23,	10,	25,	2,	6,	10,	19,	27,	57,	27,	19,	10,	3},
			{2282,	23,	10,	26,	2,	6,	10,	19,	27,	58,	27,	19,	10,	3},
			{2283,	23,	10,	27,	2,	6,	10,	19,	27,	59,	27,	19,	10,	3},
			{2284,	23,	10,	28,	2,	6,	10,	19,	27,	60,	27,	19,	10,	3},
			{2285,	23,	10,	29,	2,	6,	10,	19,	27,	61,	27,	19,	10,	3},
			{2286,	23,	10,	30,	2,	6,	10,	19,	27,	62,	27,	19,	10,	3},
			{2287,	23,	10,	31,	2,	6,	10,	19,	27,	63,	27,	19,	10,	3},
			{2288,	23,	10,	48,	2,	6,	10,	22,	30,	80,	30,	22,	10,	3},
			{2289,	23,	10,	49,	2,	6,	10,	22,	30,	81,	30,	22,	10,	3},
			{2290,	23,	10,	50,	2,	6,	10,	22,	30,	82,	30,	22,	10,	3},
			{2291,	23,	10,	51,	2,	6,	10,	22,	30,	83,	30,	22,	10,	3},
			{2292,	23,	10,	52,	2,	6,	10,	22,	30,	84,	30,	22,	10,	3},
			{2293,	23,	10,	53,	2,	6,	10,	22,	30,	85,	30,	22,	10,	3},
			{2294,	23,	10,	54,	2,	6,	10,	22,	30,	86,	30,	22,	10,	3},
			{2295,	23,	10,	55,	2,	6,	10,	22,	30,	87,	30,	22,	10,	3},
			{2296,	23,	10,	48,	2,	6,	10,	23,	30,	80,	30,	23,	10,	3},
			{2297,	23,	10,	49,	2,	6,	10,	23,	30,	81,	30,	23,	10,	3},
			{2298,	23,	10,	50,	2,	6,	10,	23,	30,	82,	30,	23,	10,	3},
			{2299,	23,	10,	51,	2,	6,	10,	23,	30,	83,	30,	23,	10,	3},
			{2300,	23,	10,	52,	2,	6,	10,	23,	30,	84,	30,	23,	10,	3},
			{2301,	23,	10,	53,	2,	6,	10,	23,	30,	85,	30,	23,	10,	3},
			{2302,	23,	10,	54,	2,	6,	10,	23,	30,	86,	30,	23,	10,	3},
			{2303,	23,	10,	55,	2,	6,	10,	23,	30,	87,	30,	23,	10,	3},
			{2304,	23,	10,	56,	2,	6,	10,	22,	31,	88,	31,	22,	10,	3},
			{2305,	23,	10,	57,	2,	6,	10,	22,	31,	89,	31,	22,	10,	3},
			{2306,	23,	10,	58,	2,	6,	10,	22,	31,	90,	31,	22,	10,	3},
			{2307,	23,	10,	59,	2,	6,	10,	22,	31,	91,	31,	22,	10,	3},
			{2308,	23,	10,	60,	2,	6,	10,	22,	31,	92,	31,	22,	10,	3},
			{2309,	23,	10,	61,	2,	6,	10,	22,	31,	93,	31,	22,	10,	3},
			{2310,	23,	10,	62,	2,	6,	10,	22,	31,	94,	31,	22,	10,	3},
			{2311,	23,	10,	63,	2,	6,	10,	22,	31,	95,	31,	22,	10,	3},
			{2312,	24,	10,	0,	2,	6,	7,	16,	24,	32,	24,	16,	7,	4},
			{2313,	24,	10,	1,	2,	6,	7,	16,	24,	33,	24,	16,	7,	4},
			{2314,	24,	10,	2,	2,	6,	7,	16,	24,	34,	24,	16,	7,	4},
			{2315,	24,	10,	3,	2,	6,	7,	16,	24,	35,	24,	16,	7,	4},
			{2316,	24,	10,	4,	2,	6,	7,	16,	24,	36,	24,	16,	7,	4},
			{2317,	24,	10,	5,	2,	6,	7,	16,	24,	37,	24,	16,	7,	4},
			{2318,	24,	10,	6,	2,	6,	7,	16,	24,	38,	24,	16,	7,	4},
			{2319,	24,	10,	7,	2,	6,	7,	16,	24,	39,	24,	16,	7,	4},
			{2320,	24,	10,	0,	2,	6,	7,	17,	24,	32,	24,	17,	7,	4},
			{2321,	24,	10,	1,	2,	6,	7,	17,	24,	33,	24,	17,	7,	4},
			{2322,	24,	10,	2,	2,	6,	7,	17,	24,	34,	24,	17,	7,	4},
			{2323,	24,	10,	3,	2,	6,	7,	17,	24,	35,	24,	17,	7,	4},
			{2324,	24,	10,	4,	2,	6,	7,	17,	24,	36,	24,	17,	7,	4},
			{2325,	24,	10,	5,	2,	6,	7,	17,	24,	37,	24,	17,	7,	4},
			{2326,	24,	10,	6,	2,	6,	7,	17,	24,	38,	24,	17,	7,	4},
			{2327,	24,	10,	7,	2,	6,	7,	17,	24,	39,	24,	17,	7,	4},
			{2328,	24,	10,	8,	2,	6,	7,	16,	25,	40,	25,	16,	7,	4},
			{2329,	24,	10,	9,	2,	6,	7,	16,	25,	41,	25,	16,	7,	4},
			{2330,	24,	10,	10,	2,	6,	7,	16,	25,	42,	25,	16,	7,	4},
			{2331,	24,	10,	11,	2,	6,	7,	16,	25,	43,	25,	16,	7,	4},
			{2332,	24,	10,	12,	2,	6,	7,	16,	25,	44,	25,	16,	7,	4},
			{2333,	24,	10,	13,	2,	6,	7,	16,	25,	45,	25,	16,	7,	4},
			{2334,	24,	10,	14,	2,	6,	7,	16,	25,	46,	25,	16,	7,	4},
			{2335,	24,	10,	15,	2,	6,	7,	16,	25,	47,	25,	16,	7,	4},
			{2336,	24,	10,	8,	2,	6,	7,	17,	25,	40,	25,	17,	7,	4},
			{2337,	24,	10,	9,	2,	6,	7,	17,	25,	41,	25,	17,	7,	4},
			{2338,	24,	10,	10,	2,	6,	7,	17,	25,	42,	25,	17,	7,	4},
			{2339,	24,	10,	11,	2,	6,	7,	17,	25,	43,	25,	17,	7,	4},
			{2340,	24,	10,	12,	2,	6,	7,	17,	25,	44,	25,	17,	7,	4},
			{2341,	24,	10,	13,	2,	6,	7,	17,	25,	45,	25,	17,	7,	4},
			{2342,	24,	10,	14,	2,	6,	7,	17,	25,	46,	25,	17,	7,	4},
			{2343,	24,	10,	15,	2,	6,	7,	17,	25,	47,	25,	17,	7,	4},
			{2344,	24,	10,	32,	2,	6,	7,	20,	28,	64,	28,	20,	7,	4},
			{2345,	24,	10,	33,	2,	6,	7,	20,	28,	65,	28,	20,	7,	4},
			{2346,	24,	10,	34,	2,	6,	7,	20,	28,	66,	28,	20,	7,	4},
			{2347,	24,	10,	35,	2,	6,	7,	20,	28,	67,	28,	20,	7,	4},
			{2348,	24,	10,	36,	2,	6,	7,	20,	28,	68,	28,	20,	7,	4},
			{2349,	24,	10,	37,	2,	6,	7,	20,	28,	69,	28,	20,	7,	4},
			{2350,	24,	10,	38,	2,	6,	7,	20,	28,	70,	28,	20,	7,	4},
			{2351,	24,	10,	39,	2,	6,	7,	20,	28,	71,	28,	20,	7,	4},
			{2352,	24,	10,	32,	2,	6,	7,	21,	28,	64,	28,	21,	7,	4},
			{2353,	24,	10,	33,	2,	6,	7,	21,	28,	65,	28,	21,	7,	4},
			{2354,	24,	10,	34,	2,	6,	7,	21,	28,	66,	28,	21,	7,	4},
			{2355,	24,	10,	35,	2,	6,	7,	21,	28,	67,	28,	21,	7,	4},
			{2356,	24,	10,	36,	2,	6,	7,	21,	28,	68,	28,	21,	7,	4},
			{2357,	24,	10,	37,	2,	6,	7,	21,	28,	69,	28,	21,	7,	4},
			{2358,	24,	10,	38,	2,	6,	7,	21,	28,	70,	28,	21,	7,	4},
			{2359,	24,	10,	39,	2,	6,	7,	21,	28,	71,	28,	21,	7,	4},
			{2360,	24,	10,	40,	2,	6,	7,	20,	29,	72,	29,	20,	7,	4},
			{2361,	24,	10,	41,	2,	6,	7,	20,	29,	73,	29,	20,	7,	4},
			{2362,	24,	10,	42,	2,	6,	7,	20,	29,	74,	29,	20,	7,	4},
			{2363,	24,	10,	43,	2,	6,	7,	20,	29,	75,	29,	20,	7,	4},
			{2364,	24,	10,	44,	2,	6,	7,	20,	29,	76,	29,	20,	7,	4},
			{2365,	24,	10,	45,	2,	6,	7,	20,	29,	77,	29,	20,	7,	4},
			{2366,	24,	10,	46,	2,	6,	7,	20,	29,	78,	29,	20,	7,	4},
			{2367,	24,	10,	47,	2,	6,	7,	20,	29,	79,	29,	20,	7,	4},
			{2368,	24,	10,	40,	2,	6,	7,	21,	29,	72,	29,	21,	7,	4},
			{2369,	24,	10,	41,	2,	6,	7,	21,	29,	73,	29,	21,	7,	4},
			{2370,	24,	10,	42,	2,	6,	7,	21,	29,	74,	29,	21,	7,	4},
			{2371,	24,	10,	43,	2,	6,	7,	21,	29,	75,	29,	21,	7,	4},
			{2372,	24,	10,	44,	2,	6,	7,	21,	29,	76,	29,	21,	7,	4},
			{2373,	24,	10,	45,	2,	6,	7,	21,	29,	77,	29,	21,	7,	4},
			{2374,	24,	10,	46,	2,	6,	7,	21,	29,	78,	29,	21,	7,	4},
			{2375,	24,	10,	47,	2,	6,	7,	21,	29,	79,	29,	21,	7,	4},
			{2376,	25,	10,	32,	2,	6,	7,	20,	28,	64,	28,	20,	6,	5},
			{2377,	25,	10,	33,	2,	6,	7,	20,	28,	65,	28,	20,	6,	5},
			{2378,	25,	10,	34,	2,	6,	7,	20,	28,	66,	28,	20,	6,	5},
			{2379,	25,	10,	35,	2,	6,	7,	20,	28,	67,	28,	20,	6,	5},
			{2380,	25,	10,	36,	2,	6,	7,	20,	28,	68,	28,	20,	6,	5},
			{2381,	25,	10,	37,	2,	6,	7,	20,	28,	69,	28,	20,	6,	5},
			{2382,	25,	10,	38,	2,	6,	7,	20,	28,	70,	28,	20,	6,	5},
			{2383,	25,	10,	39,	2,	6,	7,	20,	28,	71,	28,	20,	6,	5},
			{2384,	25,	10,	32,	2,	6,	7,	21,	28,	64,	28,	21,	6,	5},
			{2385,	25,	10,	33,	2,	6,	7,	21,	28,	65,	28,	21,	6,	5},
			{2386,	25,	10,	34,	2,	6,	7,	21,	28,	66,	28,	21,	6,	5},
			{2387,	25,	10,	35,	2,	6,	7,	21,	28,	67,	28,	21,	6,	5},
			{2388,	25,	10,	36,	2,	6,	7,	21,	28,	68,	28,	21,	6,	5},
			{2389,	25,	10,	37,	2,	6,	7,	21,	28,	69,	28,	21,	6,	5},
			{2390,	25,	10,	38,	2,	6,	7,	21,	28,	70,	28,	21,	6,	5},
			{2391,	25,	10,	39,	2,	6,	7,	21,	28,	71,	28,	21,	6,	5},
			{2392,	25,	10,	32,	2,	6,	20,	28,	64,	28,	20,	7,	6,	5},
			{2393,	25,	10,	33,	2,	6,	20,	28,	65,	28,	20,	7,	6,	5},
			{2394,	25,	10,	34,	2,	6,	20,	28,	66,	28,	20,	7,	6,	5},
			{2395,	25,	10,	35,	2,	6,	20,	28,	67,	28,	20,	7,	6,	5},
			{2396,	25,	10,	36,	2,	6,	20,	28,	68,	28,	20,	7,	6,	5},
			{2397,	25,	10,	37,	2,	6,	20,	28,	69,	28,	20,	7,	6,	5},
			{2398,	25,	10,	38,	2,	6,	20,	28,	70,	28,	20,	7,	6,	5},
			{2399,	25,	10,	39,	2,	6,	20,	28,	71,	28,	20,	7,	6,	5},
			{2400,	25,	10,	32,	2,	6,	21,	28,	64,	28,	21,	7,	6,	5},
			{2401,	25,	10,	33,	2,	6,	21,	28,	65,	28,	21,	7,	6,	5},
			{2402,	25,	10,	34,	2,	6,	21,	28,	66,	28,	21,	7,	6,	5},
			{2403,	25,	10,	35,	2,	6,	21,	28,	67,	28,	21,	7,	6,	5},
			{2404,	25,	10,	36,	2,	6,	21,	28,	68,	28,	21,	7,	6,	5},
			{2405,	25,	10,	37,	2,	6,	21,	28,	69,	28,	21,	7,	6,	5},
			{2406,	25,	10,	38,	2,	6,	21,	28,	70,	28,	21,	7,	6,	5},
			{2407,	25,	10,	39,	2,	6,	21,	28,	71,	28,	21,	7,	6,	5},
			{2408,	25,	10,	40,	2,	6,	7,	20,	29,	72,	29,	20,	6,	5},
			{2409,	25,	10,	41,	2,	6,	7,	20,	29,	73,	29,	20,	6,	5},
			{2410,	25,	10,	42,	2,	6,	7,	20,	29,	74,	29,	20,	6,	5},
			{2411,	25,	10,	43,	2,	6,	7,	20,	29,	75,	29,	20,	6,	5},
			{2412,	25,	10,	44,	2,	6,	7,	20,	29,	76,	29,	20,	6,	5},
			{2413,	25,	10,	45,	2,	6,	7,	20,	29,	77,	29,	20,	6,	5},
			{2414,	25,	10,	46,	2,	6,	7,	20,	29,	78,	29,	20,	6,	5},
			{2415,	25,	10,	47,	2,	6,	7,	20,	29,	79,	29,	20,	6,	5},
			{2416,	25,	10,	40,	2,	6,	7,	21,	29,	72,	29,	21,	6,	5},
			{2417,	25,	10,	41,	2,	6,	7,	21,	29,	73,	29,	21,	6,	5},
			{2418,	25,	10,	42,	2,	6,	7,	21,	29,	74,	29,	21,	6,	5},
			{2419,	25,	10,	43,	2,	6,	7,	21,	29,	75,	29,	21,	6,	5},
			{2420,	25,	10,	44,	2,	6,	7,	21,	29,	76,	29,	21,	6,	5},
			{2421,	25,	10,	45,	2,	6,	7,	21,	29,	77,	29,	21,	6,	5},
			{2422,	25,	10,	46,	2,	6,	7,	21,	29,	78,	29,	21,	6,	5},
			{2423,	25,	10,	47,	2,	6,	7,	21,	29,	79,	29,	21,	6,	5},
			{2424,	25,	10,	40,	2,	6,	20,	29,	72,	29,	20,	7,	6,	5},
			{2425,	25,	10,	41,	2,	6,	20,	29,	73,	29,	20,	7,	6,	5},
			{2426,	25,	10,	42,	2,	6,	20,	29,	74,	29,	20,	7,	6,	5},
			{2427,	25,	10,	43,	2,	6,	20,	29,	75,	29,	20,	7,	6,	5},
			{2428,	25,	10,	44,	2,	6,	20,	29,	76,	29,	20,	7,	6,	5},
			{2429,	25,	10,	45,	2,	6,	20,	29,	77,	29,	20,	7,	6,	5},
			{2430,	25,	10,	46,	2,	6,	20,	29,	78,	29,	20,	7,	6,	5},
			{2431,	25,	10,	47,	2,	6,	20,	29,	79,	29,	20,	7,	6,	5},
			{2432,	25,	10,	40,	2,	6,	21,	29,	72,	29,	21,	7,	6,	5},
			{2433,	25,	10,	41,	2,	6,	21,	29,	73,	29,	21,	7,	6,	5},
			{2434,	25,	10,	42,	2,	6,	21,	29,	74,	29,	21,	7,	6,	5},
			{2435,	25,	10,	43,	2,	6,	21,	29,	75,	29,	21,	7,	6,	5},
			{2436,	25,	10,	44,	2,	6,	21,	29,	76,	29,	21,	7,	6,	5},
			{2437,	25,	10,	45,	2,	6,	21,	29,	77,	29,	21,	7,	6,	5},
			{2438,	25,	10,	46,	2,	6,	21,	29,	78,	29,	21,	7,	6,	5},
			{2439,	25,	10,	47,	2,	6,	21,	29,	79,	29,	21,	7,	6,	5},
			{2440,	25,	10,	48,	2,	6,	10,	22,	30,	80,	30,	22,	6,	5},
			{2441,	25,	10,	49,	2,	6,	10,	22,	30,	81,	30,	22,	6,	5},
			{2442,	25,	10,	50,	2,	6,	10,	22,	30,	82,	30,	22,	6,	5},
			{2443,	25,	10,	51,	2,	6,	10,	22,	30,	83,	30,	22,	6,	5},
			{2444,	25,	10,	52,	2,	6,	10,	22,	30,	84,	30,	22,	6,	5},
			{2445,	25,	10,	53,	2,	6,	10,	22,	30,	85,	30,	22,	6,	5},
			{2446,	25,	10,	54,	2,	6,	10,	22,	30,	86,	30,	22,	6,	5},
			{2447,	25,	10,	55,	2,	6,	10,	22,	30,	87,	30,	22,	6,	5},
			{2448,	25,	10,	48,	2,	6,	10,	23,	30,	80,	30,	23,	6,	5},
			{2449,	25,	10,	49,	2,	6,	10,	23,	30,	81,	30,	23,	6,	5},
			{2450,	25,	10,	50,	2,	6,	10,	23,	30,	82,	30,	23,	6,	5},
			{2451,	25,	10,	51,	2,	6,	10,	23,	30,	83,	30,	23,	6,	5},
			{2452,	25,	10,	52,	2,	6,	10,	23,	30,	84,	30,	23,	6,	5},
			{2453,	25,	10,	53,	2,	6,	10,	23,	30,	85,	30,	23,	6,	5},
			{2454,	25,	10,	54,	2,	6,	10,	23,	30,	86,	30,	23,	6,	5},
			{2455,	25,	10,	55,	2,	6,	10,	23,	30,	87,	30,	23,	6,	5},
			{2456,	25,	10,	48,	2,	6,	22,	30,	80,	30,	22,	10,	6,	5},
			{2457,	25,	10,	49,	2,	6,	22,	30,	81,	30,	22,	10,	6,	5},
			{2458,	25,	10,	50,	2,	6,	22,	30,	82,	30,	22,	10,	6,	5},
			{2459,	25,	10,	51,	2,	6,	22,	30,	83,	30,	22,	10,	6,	5},
			{2460,	25,	10,	52,	2,	6,	22,	30,	84,	30,	22,	10,	6,	5},
			{2461,	25,	10,	53,	2,	6,	22,	30,	85,	30,	22,	10,	6,	5},
			{2462,	25,	10,	54,	2,	6,	22,	30,	86,	30,	22,	10,	6,	5},
			{2463,	25,	10,	55,	2,	6,	22,	30,	87,	30,	22,	10,	6,	5},
			{2464,	25,	10,	48,	2,	6,	23,	30,	80,	30,	23,	10,	6,	5},
			{2465,	25,	10,	49,	2,	6,	23,	30,	81,	30,	23,	10,	6,	5},
			{2466,	25,	10,	50,	2,	6,	23,	30,	82,	30,	23,	10,	6,	5},
			{2467,	25,	10,	51,	2,	6,	23,	30,	83,	30,	23,	10,	6,	5},
			{2468,	25,	10,	52,	2,	6,	23,	30,	84,	30,	23,	10,	6,	5},
			{2469,	25,	10,	53,	2,	6,	23,	30,	85,	30,	23,	10,	6,	5},
			{2470,	25,	10,	54,	2,	6,	23,	30,	86,	30,	23,	10,	6,	5},
			{2471,	25,	10,	55,	2,	6,	23,	30,	87,	30,	23,	10,	6,	5},
			{2472,	25,	10,	56,	2,	6,	22,	31,	88,	31,	22,	10,	6,	5},
			{2473,	25,	10,	57,	2,	6,	22,	31,	89,	31,	22,	10,	6,	5},
			{2474,	25,	10,	58,	2,	6,	22,	31,	90,	31,	22,	10,	6,	5},
			{2475,	25,	10,	59,	2,	6,	22,	31,	91,	31,	22,	10,	6,	5},
			{2476,	25,	10,	60,	2,	6,	22,	31,	92,	31,	22,	10,	6,	5},
			{2477,	25,	10,	61,	2,	6,	22,	31,	93,	31,	22,	10,	6,	5},
			{2478,	25,	10,	62,	2,	6,	22,	31,	94,	31,	22,	10,	6,	5},
			{2479,	25,	10,	63,	2,	6,	22,	31,	95,	31,	22,	10,	6,	5},
			{2480,	32,	10,	16,	3,	10,	18,	26,	48,	26,	18,	10,	6,	2},
			{2481,	32,	10,	17,	3,	10,	18,	26,	49,	26,	18,	10,	6,	2},
			{2482,	32,	10,	18,	3,	10,	18,	26,	50,	26,	18,	10,	6,	2},
			{2483,	32,	10,	19,	3,	10,	18,	26,	51,	26,	18,	10,	6,	2},
			{2484,	32,	10,	20,	3,	10,	18,	26,	52,	26,	18,	10,	6,	2},
			{2485,	32,	10,	21,	3,	10,	18,	26,	53,	26,	18,	10,	6,	2},
			{2486,	32,	10,	22,	3,	10,	18,	26,	54,	26,	18,	10,	6,	2},
			{2487,	32,	10,	23,	3,	10,	18,	26,	55,	26,	18,	10,	6,	2},
			{2488,	32,	10,	16,	3,	10,	19,	26,	48,	26,	19,	10,	6,	2},
			{2489,	32,	10,	17,	3,	10,	19,	26,	49,	26,	19,	10,	6,	2},
			{2490,	32,	10,	18,	3,	10,	19,	26,	50,	26,	19,	10,	6,	2},
			{2491,	32,	10,	19,	3,	10,	19,	26,	51,	26,	19,	10,	6,	2},
			{2492,	32,	10,	20,	3,	10,	19,	26,	52,	26,	19,	10,	6,	2},
			{2493,	32,	10,	21,	3,	10,	19,	26,	53,	26,	19,	10,	6,	2},
			{2494,	32,	10,	22,	3,	10,	19,	26,	54,	26,	19,	10,	6,	2},
			{2495,	32,	10,	23,	3,	10,	19,	26,	55,	26,	19,	10,	6,	2},
			{2496,	32,	10,	48,	3,	10,	22,	30,	80,	30,	22,	10,	6,	2},
			{2497,	32,	10,	49,	3,	10,	22,	30,	81,	30,	22,	10,	6,	2},
			{2498,	32,	10,	50,	3,	10,	22,	30,	82,	30,	22,	10,	6,	2},
			{2499,	32,	10,	51,	3,	10,	22,	30,	83,	30,	22,	10,	6,	2},
			{2500,	32,	10,	52,	3,	10,	22,	30,	84,	30,	22,	10,	6,	2},
			{2501,	32,	10,	53,	3,	10,	22,	30,	85,	30,	22,	10,	6,	2},
			{2502,	32,	10,	54,	3,	10,	22,	30,	86,	30,	22,	10,	6,	2},
			{2503,	32,	10,	55,	3,	10,	22,	30,	87,	30,	22,	10,	6,	2},
			{2504,	32,	10,	48,	3,	10,	23,	30,	80,	30,	23,	10,	6,	2},
			{2505,	32,	10,	49,	3,	10,	23,	30,	81,	30,	23,	10,	6,	2},
			{2506,	32,	10,	50,	3,	10,	23,	30,	82,	30,	23,	10,	6,	2},
			{2507,	32,	10,	51,	3,	10,	23,	30,	83,	30,	23,	10,	6,	2},
			{2508,	32,	10,	52,	3,	10,	23,	30,	84,	30,	23,	10,	6,	2},
			{2509,	32,	10,	53,	3,	10,	23,	30,	85,	30,	23,	10,	6,	2},
			{2510,	32,	10,	54,	3,	10,	23,	30,	86,	30,	23,	10,	6,	2},
			{2511,	32,	10,	55,	3,	10,	23,	30,	87,	30,	23,	10,	6,	2},
			{2512,	35,	10,	16,	3,	10,	18,	26,	48,	26,	18,	10,	6,	5},
			{2513,	35,	10,	17,	3,	10,	18,	26,	49,	26,	18,	10,	6,	5},
			{2514,	35,	10,	18,	3,	10,	18,	26,	50,	26,	18,	10,	6,	5},
			{2515,	35,	10,	19,	3,	10,	18,	26,	51,	26,	18,	10,	6,	5},
			{2516,	35,	10,	20,	3,	10,	18,	26,	52,	26,	18,	10,	6,	5},
			{2517,	35,	10,	21,	3,	10,	18,	26,	53,	26,	18,	10,	6,	5},
			{2518,	35,	10,	22,	3,	10,	18,	26,	54,	26,	18,	10,	6,	5},
			{2519,	35,	10,	23,	3,	10,	18,	26,	55,	26,	18,	10,	6,	5},
			{2520,	35,	10,	16,	3,	10,	19,	26,	48,	26,	19,	10,	6,	5},
			{2521,	35,	10,	17,	3,	10,	19,	26,	49,	26,	19,	10,	6,	5},
			{2522,	35,	10,	18,	3,	10,	19,	26,	50,	26,	19,	10,	6,	5},
			{2523,	35,	10,	19,	3,	10,	19,	26,	51,	26,	19,	10,	6,	5},
			{2524,	35,	10,	20,	3,	10,	19,	26,	52,	26,	19,	10,	6,	5},
			{2525,	35,	10,	21,	3,	10,	19,	26,	53,	26,	19,	10,	6,	5},
			{2526,	35,	10,	22,	3,	10,	19,	26,	54,	26,	19,	10,	6,	5},
			{2527,	35,	10,	23,	3,	10,	19,	26,	55,	26,	19,	10,	6,	5},
			{2528,	35,	10,	48,	3,	10,	22,	30,	80,	30,	22,	10,	6,	5},
			{2529,	35,	10,	49,	3,	10,	22,	30,	81,	30,	22,	10,	6,	5},
			{2530,	35,	10,	50,	3,	10,	22,	30,	82,	30,	22,	10,	6,	5},
			{2531,	35,	10,	51,	3,	10,	22,	30,	83,	30,	22,	10,	6,	5},
			{2532,	35,	10,	52,	3,	10,	22,	30,	84,	30,	22,	10,	6,	5},
			{2533,	35,	10,	53,	3,	10,	22,	30,	85,	30,	22,	10,	6,	5},
			{2534,	35,	10,	54,	3,	10,	22,	30,	86,	30,	22,	10,	6,	5},
			{2535,	35,	10,	55,	3,	10,	22,	30,	87,	30,	22,	10,	6,	5},
			{2536,	35,	10,	48,	3,	10,	23,	30,	80,	30,	23,	10,	6,	5},
			{2537,	35,	10,	49,	3,	10,	23,	30,	81,	30,	23,	10,	6,	5},
			{2538,	35,	10,	50,	3,	10,	23,	30,	82,	30,	23,	10,	6,	5},
			{2539,	35,	10,	51,	3,	10,	23,	30,	83,	30,	23,	10,	6,	5},
			{2540,	35,	10,	52,	3,	10,	23,	30,	84,	30,	23,	10,	6,	5},
			{2541,	35,	10,	53,	3,	10,	23,	30,	85,	30,	23,	10,	6,	5},
			{2542,	35,	10,	54,	3,	10,	23,	30,	86,	30,	23,	10,	6,	5},
			{2543,	35,	10,	55,	3,	10,	23,	30,	87,	30,	23,	10,	6,	5},
			{2544,	35,	10,	56,	3,	10,	22,	31,	88,	31,	22,	10,	6,	5},
			{2545,	35,	10,	57,	3,	10,	22,	31,	89,	31,	22,	10,	6,	5},
			{2546,	35,	10,	58,	3,	10,	22,	31,	90,	31,	22,	10,	6,	5},
			{2547,	35,	10,	59,	3,	10,	22,	31,	91,	31,	22,	10,	6,	5},
			{2548,	35,	10,	60,	3,	10,	22,	31,	92,	31,	22,	10,	6,	5},
			{2549,	35,	10,	61,	3,	10,	22,	31,	93,	31,	22,	10,	6,	5},
			{2550,	35,	10,	62,	3,	10,	22,	31,	94,	31,	22,	10,	6,	5},
			{2551,	35,	10,	63,	3,	10,	22,	31,	95,	31,	22,	10,	6,	5},
			{2552,	42,	10,	0,	4,	7,	16,	24,	32,	24,	16,	7,	6,	2},
			{2553,	42,	10,	1,	4,	7,	16,	24,	33,	24,	16,	7,	6,	2},
			{2554,	42,	10,	2,	4,	7,	16,	24,	34,	24,	16,	7,	6,	2},
			{2555,	42,	10,	3,	4,	7,	16,	24,	35,	24,	16,	7,	6,	2},
			{2556,	42,	10,	4,	4,	7,	16,	24,	36,	24,	16,	7,	6,	2},
			{2557,	42,	10,	5,	4,	7,	16,	24,	37,	24,	16,	7,	6,	2},
			{2558,	42,	10,	6,	4,	7,	16,	24,	38,	24,	16,	7,	6,	2},
			{2559,	42,	10,	7,	4,	7,	16,	24,	39,	24,	16,	7,	6,	2},
			{2560,	42,	10,	0,	4,	7,	17,	24,	32,	24,	17,	7,	6,	2},
			{2561,	42,	10,	1,	4,	7,	17,	24,	33,	24,	17,	7,	6,	2},
			{2562,	42,	10,	2,	4,	7,	17,	24,	34,	24,	17,	7,	6,	2},
			{2563,	42,	10,	3,	4,	7,	17,	24,	35,	24,	17,	7,	6,	2},
			{2564,	42,	10,	4,	4,	7,	17,	24,	36,	24,	17,	7,	6,	2},
			{2565,	42,	10,	5,	4,	7,	17,	24,	37,	24,	17,	7,	6,	2},
			{2566,	42,	10,	6,	4,	7,	17,	24,	38,	24,	17,	7,	6,	2},
			{2567,	42,	10,	7,	4,	7,	17,	24,	39,	24,	17,	7,	6,	2},
			{2568,	42,	10,	8,	4,	7,	16,	25,	40,	25,	16,	7,	6,	2},
			{2569,	42,	10,	9,	4,	7,	16,	25,	41,	25,	16,	7,	6,	2},
			{2570,	42,	10,	10,	4,	7,	16,	25,	42,	25,	16,	7,	6,	2},
			{2571,	42,	10,	11,	4,	7,	16,	25,	43,	25,	16,	7,	6,	2},
			{2572,	42,	10,	12,	4,	7,	16,	25,	44,	25,	16,	7,	6,	2},
			{2573,	42,	10,	13,	4,	7,	16,	25,	45,	25,	16,	7,	6,	2},
			{2574,	42,	10,	14,	4,	7,	16,	25,	46,	25,	16,	7,	6,	2},
			{2575,	42,	10,	15,	4,	7,	16,	25,	47,	25,	16,	7,	6,	2},
			{2576,	42,	10,	8,	4,	7,	16,	25,	40,	25,	17,	7,	6,	2},
			{2577,	42,	10,	9,	4,	7,	16,	25,	41,	25,	17,	7,	6,	2},
			{2578,	42,	10,	10,	4,	7,	16,	25,	42,	25,	17,	7,	6,	2},
			{2579,	42,	10,	11,	4,	7,	16,	25,	43,	25,	17,	7,	6,	2},
			{2580,	42,	10,	12,	4,	7,	16,	25,	44,	25,	17,	7,	6,	2},
			{2581,	42,	10,	13,	4,	7,	16,	25,	45,	25,	17,	7,	6,	2},
			{2582,	42,	10,	14,	4,	7,	16,	25,	46,	25,	17,	7,	6,	2},
			{2583,	42,	10,	15,	4,	7,	16,	25,	47,	25,	17,	7,	6,	2},
			{2584,	42,	10,	32,	4,	7,	20,	28,	64,	28,	20,	7,	6,	2},
			{2585,	42,	10,	33,	4,	7,	20,	28,	65,	28,	20,	7,	6,	2},
			{2586,	42,	10,	34,	4,	7,	20,	28,	66,	28,	20,	7,	6,	2},
			{2587,	42,	10,	35,	4,	7,	20,	28,	67,	28,	20,	7,	6,	2},
			{2588,	42,	10,	36,	4,	7,	20,	28,	68,	28,	20,	7,	6,	2},
			{2589,	42,	10,	37,	4,	7,	20,	28,	69,	28,	20,	7,	6,	2},
			{2590,	42,	10,	38,	4,	7,	20,	28,	70,	28,	20,	7,	6,	2},
			{2591,	42,	10,	39,	4,	7,	20,	28,	71,	28,	20,	7,	6,	2},
			{2592,	42,	10,	32,	4,	7,	21,	28,	64,	28,	21,	7,	6,	2},
			{2593,	42,	10,	33,	4,	7,	21,	28,	65,	28,	21,	7,	6,	2},
			{2594,	42,	10,	34,	4,	7,	21,	28,	66,	28,	21,	7,	6,	2},
			{2595,	42,	10,	35,	4,	7,	21,	28,	67,	28,	21,	7,	6,	2},
			{2596,	42,	10,	36,	4,	7,	21,	28,	68,	28,	21,	7,	6,	2},
			{2597,	42,	10,	37,	4,	7,	21,	28,	69,	28,	21,	7,	6,	2},
			{2598,	42,	10,	38,	4,	7,	21,	28,	70,	28,	21,	7,	6,	2},
			{2599,	42,	10,	39,	4,	7,	21,	28,	71,	28,	21,	7,	6,	2},

			
	};

	return P101;
};

public static int[][] Path102()
{
	
int[][] P102= {
		
		{2600,	42,	10,	40,	4,	7,	20,	29,	72,	29,	20,	7,	6,	2},
		{2601,	42,	10,	41,	4,	7,	20,	29,	73,	29,	20,	7,	6,	2},
		{2602,	42,	10,	42,	4,	7,	20,	29,	74,	29,	20,	7,	6,	2},
		{2603,	42,	10,	43,	4,	7,	20,	29,	75,	29,	20,	7,	6,	2},
		{2604,	42,	10,	44,	4,	7,	20,	29,	76,	29,	20,	7,	6,	2},
		{2605,	42,	10,	45,	4,	7,	20,	29,	77,	29,	20,	7,	6,	2},
		{2606,	42,	10,	46,	4,	7,	20,	29,	78,	29,	20,	7,	6,	2},
		{2607,	42,	10,	47,	4,	7,	20,	29,	79,	29,	20,	7,	6,	2},
		{2608,	42,	10,	40,	4,	7,	21,	29,	72,	29,	21,	7,	6,	2},
		{2609,	42,	10,	41,	4,	7,	21,	29,	73,	29,	21,	7,	6,	2},
		{2610,	42,	10,	42,	4,	7,	21,	29,	74,	29,	21,	7,	6,	2},
		{2611,	42,	10,	43,	4,	7,	21,	29,	75,	29,	21,	7,	6,	2},
		{2612,	42,	10,	44,	4,	7,	21,	29,	76,	29,	21,	7,	6,	2},
		{2613,	42,	10,	45,	4,	7,	21,	29,	77,	29,	21,	7,	6,	2},
		{2614,	42,	10,	46,	4,	7,	21,	29,	78,	29,	21,	7,	6,	2},
		{2615,	42,	10,	47,	4,	7,	21,	29,	79,	29,	21,	7,	6,	2},
		{2616,	45,	10,	0,	4,	7,	16,	24,	32,	24,	16,	7,	6,	5},
		{2617,	45,	10,	1,	4,	7,	16,	24,	33,	24,	16,	7,	6,	5},
		{2618,	45,	10,	2,	4,	7,	16,	24,	34,	24,	16,	7,	6,	5},
		{2619,	45,	10,	3,	4,	7,	16,	24,	35,	24,	16,	7,	6,	5},
		{2620,	45,	10,	4,	4,	7,	16,	24,	36,	24,	16,	7,	6,	5},
		{2621,	45,	10,	5,	4,	7,	16,	24,	37,	24,	16,	7,	6,	5},
		{2622,	45,	10,	6,	4,	7,	16,	24,	38,	24,	16,	7,	6,	5},
		{2623,	45,	10,	7,	4,	7,	16,	24,	39,	24,	16,	7,	6,	5},
		{2624,	45,	10,	0,	4,	7,	17,	24,	32,	24,	17,	7,	6,	5},
		{2625,	45,	10,	1,	4,	7,	17,	24,	33,	24,	17,	7,	6,	5},
		{2626,	45,	10,	2,	4,	7,	17,	24,	34,	24,	17,	7,	6,	5},
		{2627,	45,	10,	3,	4,	7,	17,	24,	35,	24,	17,	7,	6,	5},
		{2628,	45,	10,	4,	4,	7,	17,	24,	36,	24,	17,	7,	6,	5},
		{2629,	45,	10,	5,	4,	7,	17,	24,	37,	24,	17,	7,	6,	5},
		{2630,	45,	10,	6,	4,	7,	17,	24,	38,	24,	17,	7,	6,	5},
		{2631,	45,	10,	7,	4,	7,	17,	24,	39,	24,	17,	7,	6,	5},
		{2632,	45,	10,	8,	4,	7,	16,	25,	40,	25,	16,	7,	6,	5},
		{2633,	45,	10,	9,	4,	7,	16,	25,	41,	25,	16,	7,	6,	5},
		{2634,	45,	10,	10,	4,	7,	16,	25,	42,	25,	16,	7,	6,	5},
		{2635,	45,	10,	11,	4,	7,	16,	25,	43,	25,	16,	7,	6,	5},
		{2636,	45,	10,	12,	4,	7,	16,	25,	44,	25,	16,	7,	6,	5},
		{2637,	45,	10,	13,	4,	7,	16,	25,	45,	25,	16,	7,	6,	5},
		{2638,	45,	10,	14,	4,	7,	16,	25,	46,	25,	16,	7,	6,	5},
		{2639,	45,	10,	15,	4,	7,	16,	25,	47,	25,	16,	7,	6,	5},
		{2640,	45,	10,	8,	4,	7,	17,	25,	40,	25,	17,	7,	6,	5},
		{2641,	45,	10,	9,	4,	7,	17,	25,	41,	25,	17,	7,	6,	5},
		{2642,	45,	10,	10,	4,	7,	17,	25,	42,	25,	17,	7,	6,	5},
		{2643,	45,	10,	11,	4,	7,	17,	25,	43,	25,	17,	7,	6,	5},
		{2644,	45,	10,	12,	4,	7,	17,	25,	44,	25,	17,	7,	6,	5},
		{2645,	45,	10,	13,	4,	7,	17,	25,	45,	25,	17,	7,	6,	5},
		{2646,	45,	10,	14,	4,	7,	17,	25,	46,	25,	17,	7,	6,	5},
		{2647,	45,	10,	15,	4,	7,	17,	25,	47,	25,	17,	7,	6,	5},
		{2648,	45,	10,	32,	4,	7,	20,	28,	64,	28,	20,	7,	6,	5},
		{2649,	45,	10,	33,	4,	7,	20,	28,	65,	28,	20,	7,	6,	5},
		{2650,	45,	10,	34,	4,	7,	20,	28,	66,	28,	20,	7,	6,	5},
		{2651,	45,	10,	35,	4,	7,	20,	28,	67,	28,	20,	7,	6,	5},
		{2652,	45,	10,	36,	4,	7,	20,	28,	68,	28,	20,	7,	6,	5},
		{2653,	45,	10,	37,	4,	7,	20,	28,	69,	28,	20,	7,	6,	5},
		{2654,	45,	10,	38,	4,	7,	20,	28,	70,	28,	20,	7,	6,	5},
		{2655,	45,	10,	39,	4,	7,	20,	28,	71,	28,	20,	7,	6,	5},
		{2656,	45,	10,	32,	4,	7,	21,	28,	64,	28,	21,	7,	6,	5},
		{2657,	45,	10,	33,	4,	7,	21,	28,	65,	28,	21,	7,	6,	5},
		{2658,	45,	10,	34,	4,	7,	21,	28,	66,	28,	21,	7,	6,	5},
		{2659,	45,	10,	35,	4,	7,	21,	28,	67,	28,	21,	7,	6,	5},
		{2660,	45,	10,	36,	4,	7,	21,	28,	68,	28,	21,	7,	6,	5},
		{2661,	45,	10,	37,	4,	7,	21,	28,	69,	28,	21,	7,	6,	5},
		{2662,	45,	10,	38,	4,	7,	21,	28,	70,	28,	21,	7,	6,	5},
		{2663,	45,	10,	39,	4,	7,	21,	28,	71,	28,	21,	7,	6,	5},
		{2664,	45,	10,	40,	4,	7,	20,	29,	72,	29,	20,	7,	6,	5},
		{2665,	45,	10,	41,	4,	7,	20,	29,	73,	29,	20,	7,	6,	5},
		{2666,	45,	10,	42,	4,	7,	20,	29,	74,	29,	20,	7,	6,	5},
		{2667,	45,	10,	43,	4,	7,	20,	29,	75,	29,	20,	7,	6,	5},
		{2668,	45,	10,	44,	4,	7,	20,	29,	76,	29,	20,	7,	6,	5},
		{2669,	45,	10,	45,	4,	7,	20,	29,	77,	29,	20,	7,	6,	5},
		{2670,	45,	10,	46,	4,	7,	20,	29,	78,	29,	20,	7,	6,	5},
		{2671,	45,	10,	47,	4,	7,	20,	29,	79,	29,	20,	7,	6,	5},
		{2672,	45,	10,	40,	4,	7,	21,	29,	72,	29,	21,	7,	6,	5},
		{2673,	45,	10,	41,	4,	7,	21,	29,	73,	29,	21,	7,	6,	5},
		{2674,	45,	10,	42,	4,	7,	21,	29,	74,	29,	21,	7,	6,	5},
		{2675,	45,	10,	43,	4,	7,	21,	29,	75,	29,	21,	7,	6,	5},
		{2676,	45,	10,	44,	4,	7,	21,	29,	76,	29,	21,	7,	6,	5},
		{2677,	45,	10,	45,	4,	7,	21,	29,	77,	29,	21,	7,	6,	5},
		{2678,	45,	10,	46,	4,	7,	21,	29,	78,	29,	21,	7,	6,	5},
		{2679,	45,	10,	47,	4,	7,	21,	29,	79,	29,	21,	7,	6,	5},
		{2680,	50,	10,	16,	5,	6,	10,	18,	26,	48,	26,	18,	10,	0},
		{2681,	50,	10,	17,	5,	6,	10,	18,	26,	49,	26,	18,	10,	0},
		{2682,	50,	10,	18,	5,	6,	10,	18,	26,	50,	26,	18,	10,	0},
		{2683,	50,	10,	19,	5,	6,	10,	18,	26,	51,	26,	18,	10,	0},
		{2684,	50,	10,	20,	5,	6,	10,	18,	26,	52,	26,	18,	10,	0},
		{2685,	50,	10,	21,	5,	6,	10,	18,	26,	53,	26,	18,	10,	0},
		{2686,	50,	10,	22,	5,	6,	10,	18,	26,	54,	26,	18,	10,	0},
		{2687,	50,	10,	23,	5,	6,	10,	18,	26,	55,	26,	18,	10,	0},
		{2688,	50,	10,	16,	5,	6,	10,	19,	26,	48,	26,	19,	10,	0},
		{2689,	50,	10,	17,	5,	6,	10,	19,	26,	49,	26,	19,	10,	0},
		{2690,	50,	10,	18,	5,	6,	10,	19,	26,	50,	26,	19,	10,	0},
		{2691,	50,	10,	19,	5,	6,	10,	19,	26,	51,	26,	19,	10,	0},
		{2692,	50,	10,	20,	5,	6,	10,	19,	26,	52,	26,	19,	10,	0},
		{2693,	50,	10,	21,	5,	6,	10,	19,	26,	53,	26,	19,	10,	0},
		{2694,	50,	10,	22,	5,	6,	10,	19,	26,	54,	26,	19,	10,	0},
		{2695,	50,	10,	23,	5,	6,	10,	19,	26,	55,	26,	19,	10,	0},
		{2696,	50,	10,	24,	5,	6,	10,	18,	27,	56,	27,	18,	10,	0},
		{2697,	50,	10,	25,	5,	6,	10,	18,	27,	57,	27,	18,	10,	0},
		{2698,	50,	10,	26,	5,	6,	10,	18,	27,	58,	27,	18,	10,	0},
		{2699,	50,	10,	27,	5,	6,	10,	18,	27,	59,	27,	18,	10,	0},
		{2700,	50,	10,	28,	5,	6,	10,	18,	27,	60,	27,	18,	10,	0},
		{2701,	50,	10,	29,	5,	6,	10,	18,	27,	61,	27,	18,	10,	0},
		{2702,	50,	10,	30,	5,	6,	10,	18,	27,	62,	27,	18,	10,	0},
		{2703,	50,	10,	31,	5,	6,	10,	18,	27,	63,	27,	18,	10,	0},
		{2704,	50,	10,	24,	5,	6,	10,	19,	27,	56,	27,	19,	10,	0},
		{2705,	50,	10,	25,	5,	6,	10,	19,	27,	57,	27,	19,	10,	0},
		{2706,	50,	10,	26,	5,	6,	10,	19,	27,	58,	27,	19,	10,	0},
		{2707,	50,	10,	27,	5,	6,	10,	19,	27,	59,	27,	19,	10,	0},
		{2708,	50,	10,	28,	5,	6,	10,	19,	27,	60,	27,	19,	10,	0},
		{2709,	50,	10,	29,	5,	6,	10,	19,	27,	61,	27,	19,	10,	0},
		{2710,	50,	10,	30,	5,	6,	10,	19,	27,	62,	27,	19,	10,	0},
		{2711,	50,	10,	31,	5,	6,	10,	19,	27,	63,	27,	19,	10,	0},
		{2712,	50,	10,	48,	5,	6,	10,	22,	30,	80,	30,	22,	10,	0},
		{2713,	50,	10,	49,	5,	6,	10,	22,	30,	81,	30,	22,	10,	0},
		{2714,	50,	10,	50,	5,	6,	10,	22,	30,	82,	30,	22,	10,	0},
		{2715,	50,	10,	51,	5,	6,	10,	22,	30,	83,	30,	22,	10,	0},
		{2716,	50,	10,	52,	5,	6,	10,	22,	30,	84,	30,	22,	10,	0},
		{2717,	50,	10,	53,	5,	6,	10,	22,	30,	85,	30,	22,	10,	0},
		{2718,	50,	10,	54,	5,	6,	10,	22,	30,	86,	30,	22,	10,	0},
		{2719,	50,	10,	55,	5,	6,	10,	22,	30,	87,	30,	22,	10,	0},
		{2720,	50,	10,	48,	5,	6,	10,	23,	30,	80,	30,	23,	10,	0},
		{2721,	50,	10,	49,	5,	6,	10,	23,	30,	81,	30,	23,	10,	0},
		{2722,	50,	10,	50,	5,	6,	10,	23,	30,	82,	30,	23,	10,	0},
		{2723,	50,	10,	51,	5,	6,	10,	23,	30,	83,	30,	23,	10,	0},
		{2724,	50,	10,	52,	5,	6,	10,	23,	30,	84,	30,	23,	10,	0},
		{2725,	50,	10,	53,	5,	6,	10,	23,	30,	85,	30,	23,	10,	0},
		{2726,	50,	10,	54,	5,	6,	10,	23,	30,	86,	30,	23,	10,	0},
		{2727,	50,	10,	55,	5,	6,	10,	23,	30,	87,	30,	23,	10,	0},
		{2728,	50,	10,	56,	5,	6,	10,	22,	31,	88,	31,	22,	10,	0},
		{2729,	50,	10,	57,	5,	6,	10,	22,	31,	89,	31,	22,	10,	0},
		{2730,	50,	10,	58,	5,	6,	10,	22,	31,	90,	31,	22,	10,	0},
		{2731,	50,	10,	59,	5,	6,	10,	22,	31,	91,	31,	22,	10,	0},
		{2732,	50,	10,	60,	5,	6,	10,	22,	31,	92,	31,	22,	10,	0},
		{2733,	50,	10,	61,	5,	6,	10,	22,	31,	93,	31,	22,	10,	0},
		{2734,	50,	10,	62,	5,	6,	10,	22,	31,	94,	31,	22,	10,	0},
		{2735,	50,	10,	63,	5,	6,	10,	22,	31,	95,	31,	22,	10,	0},
		{2736,	51,	10,	16,	5,	6,	10,	18,	26,	48,	26,	18,	10,	1},
		{2737,	51,	10,	17,	5,	6,	10,	18,	26,	49,	26,	18,	10,	1},
		{2738,	51,	10,	18,	5,	6,	10,	18,	26,	50,	26,	18,	10,	1},
		{2739,	51,	10,	19,	5,	6,	10,	18,	26,	51,	26,	18,	10,	1},
		{2740,	51,	10,	20,	5,	6,	10,	18,	26,	52,	26,	18,	10,	1},
		{2741,	51,	10,	21,	5,	6,	10,	18,	26,	53,	26,	18,	10,	1},
		{2742,	51,	10,	22,	5,	6,	10,	18,	26,	54,	26,	18,	10,	1},
		{2743,	51,	10,	23,	5,	6,	10,	18,	26,	55,	26,	18,	10,	1},
		{2744,	51,	10,	16,	5,	6,	10,	19,	26,	48,	26,	19,	10,	1},
		{2745,	51,	10,	17,	5,	6,	10,	19,	26,	49,	26,	19,	10,	1},
		{2746,	51,	10,	18,	5,	6,	10,	19,	26,	50,	26,	19,	10,	1},
		{2747,	51,	10,	19,	5,	6,	10,	19,	26,	51,	26,	19,	10,	1},
		{2748,	51,	10,	20,	5,	6,	10,	19,	26,	52,	26,	19,	10,	1},
		{2749,	51,	10,	21,	5,	6,	10,	19,	26,	53,	26,	19,	10,	1},
		{2750,	51,	10,	22,	5,	6,	10,	19,	26,	54,	26,	19,	10,	1},
		{2751,	51,	10,	23,	5,	6,	10,	19,	26,	55,	26,	19,	10,	1},
		{2752,	51,	10,	24,	5,	6,	10,	18,	27,	56,	27,	18,	10,	1},
		{2753,	51,	10,	25,	5,	6,	10,	18,	27,	57,	27,	18,	10,	1},
		{2754,	51,	10,	26,	5,	6,	10,	18,	27,	58,	27,	18,	10,	1},
		{2755,	51,	10,	27,	5,	6,	10,	18,	27,	59,	27,	18,	10,	1},
		{2756,	51,	10,	28,	5,	6,	10,	18,	27,	60,	27,	18,	10,	1},
		{2757,	51,	10,	29,	5,	6,	10,	18,	27,	61,	27,	18,	10,	1},
		{2758,	51,	10,	30,	5,	6,	10,	18,	27,	62,	27,	18,	10,	1},
		{2759,	51,	10,	31,	5,	6,	10,	18,	27,	63,	27,	18,	10,	1},
		{2760,	51,	10,	24,	5,	6,	10,	19,	27,	56,	27,	19,	10,	1},
		{2761,	51,	10,	25,	5,	6,	10,	19,	27,	57,	27,	19,	10,	1},
		{2762,	51,	10,	26,	5,	6,	10,	19,	27,	58,	27,	19,	10,	1},
		{2763,	51,	10,	27,	5,	6,	10,	19,	27,	59,	27,	19,	10,	1},
		{2764,	51,	10,	28,	5,	6,	10,	19,	27,	60,	27,	19,	10,	1},
		{2765,	51,	10,	29,	5,	6,	10,	19,	27,	61,	27,	19,	10,	1},
		{2766,	51,	10,	30,	5,	6,	10,	19,	27,	62,	27,	19,	10,	1},
		{2767,	51,	10,	31,	5,	6,	10,	19,	27,	63,	27,	19,	10,	1},
		{2768,	51,	10,	48,	5,	6,	10,	22,	30,	80,	30,	22,	10,	1},
		{2769,	51,	10,	49,	5,	6,	10,	22,	30,	81,	30,	22,	10,	1},
		{2770,	51,	10,	50,	5,	6,	10,	22,	30,	82,	30,	22,	10,	1},
		{2771,	51,	10,	51,	5,	6,	10,	22,	30,	83,	30,	22,	10,	1},
		{2772,	51,	10,	52,	5,	6,	10,	22,	30,	84,	30,	22,	10,	1},
		{2773,	51,	10,	53,	5,	6,	10,	22,	30,	85,	30,	22,	10,	1},
		{2774,	51,	10,	54,	5,	6,	10,	22,	30,	86,	30,	22,	10,	1},
		{2775,	51,	10,	55,	5,	6,	10,	22,	30,	87,	30,	22,	10,	1},
		{2776,	51,	10,	48,	5,	6,	10,	23,	30,	80,	30,	23,	10,	1},
		{2777,	51,	10,	49,	5,	6,	10,	23,	30,	81,	30,	23,	10,	1},
		{2778,	51,	10,	50,	5,	6,	10,	23,	30,	82,	30,	23,	10,	1},
		{2779,	51,	10,	51,	5,	6,	10,	23,	30,	83,	30,	23,	10,	1},
		{2780,	51,	10,	52,	5,	6,	10,	23,	30,	84,	30,	23,	10,	1},
		{2781,	51,	10,	53,	5,	6,	10,	23,	30,	85,	30,	23,	10,	1},
		{2782,	51,	10,	54,	5,	6,	10,	23,	30,	86,	30,	23,	10,	1},
		{2783,	51,	10,	55,	5,	6,	10,	23,	30,	87,	30,	23,	10,	1},
		{2784,	51,	10,	56,	5,	6,	10,	22,	31,	88,	31,	22,	10,	1},
		{2785,	51,	10,	57,	5,	6,	10,	22,	31,	89,	31,	22,	10,	1},
		{2786,	51,	10,	58,	5,	6,	10,	22,	31,	90,	31,	22,	10,	1},
		{2787,	51,	10,	59,	5,	6,	10,	22,	31,	91,	31,	22,	10,	1},
		{2788,	51,	10,	60,	5,	6,	10,	22,	31,	92,	31,	22,	10,	1},
		{2789,	51,	10,	61,	5,	6,	10,	22,	31,	93,	31,	22,	10,	1},
		{2790,	51,	10,	62,	5,	6,	10,	22,	31,	94,	31,	22,	10,	1},
		{2791,	51,	10,	63,	5,	6,	10,	22,	31,	95,	31,	22,	10,	1},
		{2792,	52,	10,	32,	5,	6,	7,	20,	28,	64,	28,	20,	6,	2},
		{2793,	52,	10,	33,	5,	6,	7,	20,	28,	65,	28,	20,	6,	2},
		{2794,	52,	10,	34,	5,	6,	7,	20,	28,	66,	28,	20,	6,	2},
		{2795,	52,	10,	35,	5,	6,	7,	20,	28,	67,	28,	20,	6,	2},
		{2796,	52,	10,	36,	5,	6,	7,	20,	28,	68,	28,	20,	6,	2},
		{2797,	52,	10,	37,	5,	6,	7,	20,	28,	69,	28,	20,	6,	2},
		{2798,	52,	10,	38,	5,	6,	7,	20,	28,	70,	28,	20,	6,	2},
		{2799,	52,	10,	39,	5,	6,	7,	20,	28,	71,	28,	20,	6,	2},
		{2800,	52,	10,	32,	5,	6,	7,	21,	28,	64,	28,	21,	6,	2},
		{2801,	52,	10,	33,	5,	6,	7,	21,	28,	65,	28,	21,	6,	2},
		{2802,	52,	10,	34,	5,	6,	7,	21,	28,	66,	28,	21,	6,	2},
		{2803,	52,	10,	35,	5,	6,	7,	21,	28,	67,	28,	21,	6,	2},
		{2804,	52,	10,	36,	5,	6,	7,	21,	28,	68,	28,	21,	6,	2},
		{2805,	52,	10,	37,	5,	6,	7,	21,	28,	69,	28,	21,	6,	2},
		{2806,	52,	10,	38,	5,	6,	7,	21,	28,	70,	28,	21,	6,	2},
		{2807,	52,	10,	39,	5,	6,	7,	21,	28,	71,	28,	21,	6,	2},
		{2808,	52,	10,	32,	5,	6,	20,	28,	64,	28,	20,	7,	6,	2},
		{2809,	52,	10,	33,	5,	6,	20,	28,	65,	28,	20,	7,	6,	2},
		{2810,	52,	10,	34,	5,	6,	20,	28,	66,	28,	20,	7,	6,	2},
		{2811,	52,	10,	35,	5,	6,	20,	28,	67,	28,	20,	7,	6,	2},
		{2812,	52,	10,	36,	5,	6,	20,	28,	68,	28,	20,	7,	6,	2},
		{2813,	52,	10,	37,	5,	6,	20,	28,	69,	28,	20,	7,	6,	2},
		{2814,	52,	10,	38,	5,	6,	20,	28,	70,	28,	20,	7,	6,	2},
		{2815,	52,	10,	39,	5,	6,	20,	28,	71,	28,	20,	7,	6,	2},
		{2816,	52,	10,	32,	5,	6,	21,	28,	64,	28,	21,	7,	6,	2},
		{2817,	52,	10,	33,	5,	6,	21,	28,	65,	28,	21,	7,	6,	2},
		{2818,	52,	10,	34,	5,	6,	21,	28,	66,	28,	21,	7,	6,	2},
		{2819,	52,	10,	35,	5,	6,	21,	28,	67,	28,	21,	7,	6,	2},
		{2820,	52,	10,	36,	5,	6,	21,	28,	68,	28,	21,	7,	6,	2},
		{2821,	52,	10,	37,	5,	6,	21,	28,	69,	28,	21,	7,	6,	2},
		{2822,	52,	10,	38,	5,	6,	21,	28,	70,	28,	21,	7,	6,	2},
		{2823,	52,	10,	39,	5,	6,	21,	28,	71,	28,	21,	7,	6,	2},
		{2824,	52,	10,	40,	5,	6,	7,	20,	29,	72,	29,	20,	6,	2},
		{2825,	52,	10,	41,	5,	6,	7,	20,	29,	73,	29,	20,	6,	2},
		{2826,	52,	10,	42,	5,	6,	7,	20,	29,	74,	29,	20,	6,	2},
		{2827,	52,	10,	43,	5,	6,	7,	20,	29,	75,	29,	20,	6,	2},
		{2828,	52,	10,	44,	5,	6,	7,	20,	29,	76,	29,	20,	6,	2},
		{2829,	52,	10,	45,	5,	6,	7,	20,	29,	77,	29,	20,	6,	2},
		{2830,	52,	10,	46,	5,	6,	7,	20,	29,	78,	29,	20,	6,	2},
		{2831,	52,	10,	47,	5,	6,	7,	20,	29,	79,	29,	20,	6,	2},
		{2832,	52,	10,	40,	5,	6,	7,	21,	29,	72,	29,	21,	6,	2},
		{2833,	52,	10,	41,	5,	6,	7,	21,	29,	73,	29,	21,	6,	2},
		{2834,	52,	10,	42,	5,	6,	7,	21,	29,	74,	29,	21,	6,	2},
		{2835,	52,	10,	43,	5,	6,	7,	21,	29,	75,	29,	21,	6,	2},
		{2836,	52,	10,	44,	5,	6,	7,	21,	29,	76,	29,	21,	6,	2},
		{2837,	52,	10,	45,	5,	6,	7,	21,	29,	77,	29,	21,	6,	2},
		{2838,	52,	10,	46,	5,	6,	7,	21,	29,	78,	29,	21,	6,	2},
		{2839,	52,	10,	47,	5,	6,	7,	21,	29,	79,	29,	21,	6,	2},
		{2840,	52,	10,	40,	5,	6,	20,	29,	72,	29,	20,	7,	6,	2},
		{2841,	52,	10,	41,	5,	6,	20,	29,	73,	29,	20,	7,	6,	2},
		{2842,	52,	10,	42,	5,	6,	20,	29,	74,	29,	20,	7,	6,	2},
		{2843,	52,	10,	43,	5,	6,	20,	29,	75,	29,	20,	7,	6,	2},
		{2844,	52,	10,	44,	5,	6,	20,	29,	76,	29,	20,	7,	6,	2},
		{2845,	52,	10,	45,	5,	6,	20,	29,	77,	29,	20,	7,	6,	2},
		{2846,	52,	10,	46,	5,	6,	20,	29,	78,	29,	20,	7,	6,	2},
		{2847,	52,	10,	47,	5,	6,	20,	29,	79,	29,	20,	7,	6,	2},
		{2848,	52,	10,	40,	5,	6,	21,	29,	72,	29,	21,	7,	6,	2},
		{2849,	52,	10,	41,	5,	6,	21,	29,	73,	29,	21,	7,	6,	2},
		{2850,	52,	10,	42,	5,	6,	21,	29,	74,	29,	21,	7,	6,	2},
		{2851,	52,	10,	43,	5,	6,	21,	29,	75,	29,	21,	7,	6,	2},
		{2852,	52,	10,	44,	5,	6,	21,	29,	76,	29,	21,	7,	6,	2},
		{2853,	52,	10,	45,	5,	6,	21,	29,	77,	29,	21,	7,	6,	2},
		{2854,	52,	10,	46,	5,	6,	21,	29,	78,	29,	21,	7,	6,	2},
		{2855,	52,	10,	47,	5,	6,	21,	29,	79,	29,	21,	7,	6,	2},
		{2856,	53,	10,	16,	5,	6,	10,	18,	26,	48,	26,	18,	10,	3},
		{2857,	53,	10,	17,	5,	6,	10,	18,	26,	49,	26,	18,	10,	3},
		{2858,	53,	10,	18,	5,	6,	10,	18,	26,	50,	26,	18,	10,	3},
		{2859,	53,	10,	19,	5,	6,	10,	18,	26,	51,	26,	18,	10,	3},
		{2860,	53,	10,	20,	5,	6,	10,	18,	26,	52,	26,	18,	10,	3},
		{2861,	53,	10,	21,	5,	6,	10,	18,	26,	53,	26,	18,	10,	3},
		{2862,	53,	10,	22,	5,	6,	10,	18,	26,	54,	26,	18,	10,	3},
		{2863,	53,	10,	23,	5,	6,	10,	18,	26,	55,	26,	18,	10,	3},
		{2864,	53,	10,	16,	5,	6,	10,	19,	26,	48,	26,	19,	10,	3},
		{2865,	53,	10,	17,	5,	6,	10,	19,	26,	49,	26,	19,	10,	3},
		{2866,	53,	10,	18,	5,	6,	10,	19,	26,	50,	26,	19,	10,	3},
		{2867,	53,	10,	19,	5,	6,	10,	19,	26,	51,	26,	19,	10,	3},
		{2868,	53,	10,	20,	5,	6,	10,	19,	26,	52,	26,	19,	10,	3},
		{2869,	53,	10,	21,	5,	6,	10,	19,	26,	53,	26,	19,	10,	3},
		{2870,	53,	10,	22,	5,	6,	10,	19,	26,	54,	26,	19,	10,	3},
		{2871,	53,	10,	23,	5,	6,	10,	19,	26,	55,	26,	19,	10,	3},
		{2872,	53,	10,	24,	5,	6,	10,	18,	27,	56,	27,	18,	10,	3},
		{2873,	53,	10,	25,	5,	6,	10,	18,	27,	57,	27,	18,	10,	3},
		{2874,	53,	10,	26,	5,	6,	10,	18,	27,	58,	27,	18,	10,	3},
		{2875,	53,	10,	27,	5,	6,	10,	18,	27,	59,	27,	18,	10,	3},
		{2876,	53,	10,	28,	5,	6,	10,	18,	27,	60,	27,	18,	10,	3},
		{2877,	53,	10,	29,	5,	6,	10,	18,	27,	61,	27,	18,	10,	3},
		{2878,	53,	10,	30,	5,	6,	10,	18,	27,	62,	27,	18,	10,	3},
		{2879,	53,	10,	31,	5,	6,	10,	18,	27,	63,	27,	18,	10,	3},
		{2880,	53,	10,	24,	5,	6,	10,	19,	27,	56,	27,	19,	10,	3},
		{2881,	53,	10,	25,	5,	6,	10,	19,	27,	57,	27,	19,	10,	3},
		{2882,	53,	10,	26,	5,	6,	10,	19,	27,	58,	27,	19,	10,	3},
		{2883,	53,	10,	27,	5,	6,	10,	19,	27,	59,	27,	19,	10,	3},
		{2884,	53,	10,	28,	5,	6,	10,	19,	27,	60,	27,	19,	10,	3},
		{2885,	53,	10,	29,	5,	6,	10,	19,	27,	61,	27,	19,	10,	3},
		{2886,	53,	10,	30,	5,	6,	10,	19,	27,	62,	27,	19,	10,	3},
		{2887,	53,	10,	31,	5,	6,	10,	19,	27,	63,	27,	19,	10,	3},
		{2888,	53,	10,	48,	5,	6,	10,	22,	30,	80,	30,	22,	10,	3},
		{2889,	53,	10,	49,	5,	6,	10,	22,	30,	81,	30,	22,	10,	3},
		{2890,	53,	10,	50,	5,	6,	10,	22,	30,	82,	30,	22,	10,	3},
		{2891,	53,	10,	51,	5,	6,	10,	22,	30,	83,	30,	22,	10,	3},
		{2892,	53,	10,	52,	5,	6,	10,	22,	30,	84,	30,	22,	10,	3},
		{2893,	53,	10,	53,	5,	6,	10,	22,	30,	85,	30,	22,	10,	3},
		{2894,	53,	10,	54,	5,	6,	10,	22,	30,	86,	30,	22,	10,	3},
		{2895,	53,	10,	55,	5,	6,	10,	22,	30,	87,	30,	22,	10,	3},
		{2896,	53,	10,	48,	5,	6,	10,	23,	30,	80,	30,	23,	10,	3},
		{2897,	53,	10,	49,	5,	6,	10,	23,	30,	81,	30,	23,	10,	3},
		{2898,	53,	10,	50,	5,	6,	10,	23,	30,	82,	30,	23,	10,	3},
		{2899,	53,	10,	51,	5,	6,	10,	23,	30,	83,	30,	23,	10,	3},
		{2900,	53,	10,	52,	5,	6,	10,	23,	30,	84,	30,	23,	10,	3},
		{2901,	53,	10,	53,	5,	6,	10,	23,	30,	85,	30,	23,	10,	3},
		{2902,	53,	10,	54,	5,	6,	10,	23,	30,	86,	30,	23,	10,	3},
		{2903,	53,	10,	55,	5,	6,	10,	23,	30,	87,	30,	23,	10,	3},
		{2904,	53,	10,	56,	5,	6,	10,	22,	31,	88,	31,	22,	10,	3},
		{2905,	53,	10,	57,	5,	6,	10,	22,	31,	89,	31,	22,	10,	3},
		{2906,	53,	10,	58,	5,	6,	10,	22,	31,	90,	31,	22,	10,	3},
		{2907,	53,	10,	59,	5,	6,	10,	22,	31,	91,	31,	22,	10,	3},
		{2908,	53,	10,	60,	5,	6,	10,	22,	31,	92,	31,	22,	10,	3},
		{2909,	53,	10,	61,	5,	6,	10,	22,	31,	93,	31,	22,	10,	3},
		{2910,	53,	10,	62,	5,	6,	10,	22,	31,	94,	31,	22,	10,	3},
		{2911,	53,	10,	63,	5,	6,	10,	22,	31,	95,	31,	22,	10,	3},
		{2912,	54,	10,	0,	5,	6,	7,	16,	24,	32,	24,	16,	7,	4},
		{2913,	54,	10,	1,	5,	6,	7,	16,	24,	33,	24,	16,	7,	4},
		{2914,	54,	10,	2,	5,	6,	7,	16,	24,	34,	24,	16,	7,	4},
		{2915,	54,	10,	3,	5,	6,	7,	16,	24,	35,	24,	16,	7,	4},
		{2916,	54,	10,	4,	5,	6,	7,	16,	24,	36,	24,	16,	7,	4},
		{2917,	54,	10,	5,	5,	6,	7,	16,	24,	37,	24,	16,	7,	4},
		{2918,	54,	10,	6,	5,	6,	7,	16,	24,	38,	24,	16,	7,	4},
		{2919,	54,	10,	7,	5,	6,	7,	16,	24,	39,	24,	16,	7,	4},
		{2920,	54,	10,	0,	5,	6,	7,	17,	24,	32,	24,	17,	7,	4},
		{2921,	54,	10,	1,	5,	6,	7,	17,	24,	33,	24,	17,	7,	4},
		{2922,	54,	10,	2,	5,	6,	7,	17,	24,	34,	24,	17,	7,	4},
		{2923,	54,	10,	3,	5,	6,	7,	17,	24,	35,	24,	17,	7,	4},
		{2924,	54,	10,	4,	5,	6,	7,	17,	24,	36,	24,	17,	7,	4},
		{2925,	54,	10,	5,	5,	6,	7,	17,	24,	37,	24,	17,	7,	4},
		{2926,	54,	10,	6,	5,	6,	7,	17,	24,	38,	24,	17,	7,	4},
		{2927,	54,	10,	7,	5,	6,	7,	17,	24,	39,	24,	17,	7,	4},
		{2928,	54,	10,	8,	5,	6,	7,	16,	25,	40,	25,	16,	7,	4},
		{2929,	54,	10,	9,	5,	6,	7,	16,	25,	41,	25,	16,	7,	4},
		{2930,	54,	10,	10,	5,	6,	7,	16,	25,	42,	25,	16,	7,	4},
		{2931,	54,	10,	11,	5,	6,	7,	16,	25,	43,	25,	16,	7,	4},
		{2932,	54,	10,	12,	5,	6,	7,	16,	25,	44,	25,	16,	7,	4},
		{2933,	54,	10,	13,	5,	6,	7,	16,	25,	45,	25,	16,	7,	4},
		{2934,	54,	10,	14,	5,	6,	7,	16,	25,	46,	25,	16,	7,	4},
		{2935,	54,	10,	15,	5,	6,	7,	16,	25,	47,	25,	16,	7,	4},
		{2936,	54,	10,	8,	5,	6,	7,	17,	25,	40,	25,	17,	7,	4},
		{2937,	54,	10,	9,	5,	6,	7,	17,	25,	41,	25,	17,	7,	4},
		{2938,	54,	10,	10,	5,	6,	7,	17,	25,	42,	25,	17,	7,	4},
		{2939,	54,	10,	11,	5,	6,	7,	17,	25,	43,	25,	17,	7,	4},
		{2940,	54,	10,	12,	5,	6,	7,	17,	25,	44,	25,	17,	7,	4},
		{2941,	54,	10,	13,	5,	6,	7,	17,	25,	45,	25,	17,	7,	4},
		{2942,	54,	10,	14,	5,	6,	7,	17,	25,	46,	25,	17,	7,	4},
		{2943,	54,	10,	15,	5,	6,	7,	17,	25,	47,	25,	17,	7,	4},
		{2944,	54,	10,	32,	5,	6,	7,	20,	28,	64,	28,	20,	7,	4},
		{2945,	54,	10,	33,	5,	6,	7,	20,	28,	65,	28,	20,	7,	4},
		{2946,	54,	10,	34,	5,	6,	7,	20,	28,	66,	28,	20,	7,	4},
		{2947,	54,	10,	35,	5,	6,	7,	20,	28,	67,	28,	20,	7,	4},
		{2948,	54,	10,	36,	5,	6,	7,	20,	28,	68,	28,	20,	7,	4},
		{2949,	54,	10,	37,	5,	6,	7,	20,	28,	69,	28,	20,	7,	4},
		{2950,	54,	10,	38,	5,	6,	7,	20,	28,	70,	28,	20,	7,	4},
		{2951,	54,	10,	39,	5,	6,	7,	20,	28,	71,	28,	20,	7,	4},
		{2952,	54,	10,	32,	5,	6,	7,	21,	28,	64,	28,	21,	7,	4},
		{2953,	54,	10,	33,	5,	6,	7,	21,	28,	65,	28,	21,	7,	4},
		{2954,	54,	10,	34,	5,	6,	7,	21,	28,	66,	28,	21,	7,	4},
		{2955,	54,	10,	35,	5,	6,	7,	21,	28,	67,	28,	21,	7,	4},
		{2956,	54,	10,	36,	5,	6,	7,	21,	28,	68,	28,	21,	7,	4},
		{2957,	54,	10,	37,	5,	6,	7,	21,	28,	69,	28,	21,	7,	4},
		{2958,	54,	10,	38,	5,	6,	7,	21,	28,	70,	28,	21,	7,	4},
		{2959,	54,	10,	39,	5,	6,	7,	21,	28,	71,	28,	21,	7,	4},
		{2960,	54,	10,	40,	5,	6,	7,	20,	29,	72,	29,	20,	7,	4},
		{2961,	54,	10,	41,	5,	6,	7,	20,	29,	73,	29,	20,	7,	4},
		{2962,	54,	10,	42,	5,	6,	7,	20,	29,	74,	29,	20,	7,	4},
		{2963,	54,	10,	43,	5,	6,	7,	20,	29,	75,	29,	20,	7,	4},
		{2964,	54,	10,	44,	5,	6,	7,	20,	29,	76,	29,	20,	7,	4},
		{2965,	54,	10,	45,	5,	6,	7,	20,	29,	77,	29,	20,	7,	4},
		{2966,	54,	10,	46,	5,	6,	7,	20,	29,	78,	29,	20,	7,	4},
		{2967,	54,	10,	47,	5,	6,	7,	20,	29,	79,	29,	20,	7,	4},
		{2968,	54,	10,	40,	5,	6,	7,	21,	29,	72,	29,	21,	7,	4},
		{2969,	54,	10,	41,	5,	6,	7,	21,	29,	73,	29,	21,	7,	4},
		{2970,	54,	10,	42,	5,	6,	7,	21,	29,	74,	29,	21,	7,	4},
		{2971,	54,	10,	43,	5,	6,	7,	21,	29,	75,	29,	21,	7,	4},
		{2972,	54,	10,	44,	5,	6,	7,	21,	29,	76,	29,	21,	7,	4},
		{2973,	54,	10,	45,	5,	6,	7,	21,	29,	77,	29,	21,	7,	4},
		{2974,	54,	10,	46,	5,	6,	7,	21,	29,	78,	29,	21,	7,	4},
		{2975,	54,	10,	47,	5,	6,	7,	21,	29,	79,	29,	21,	7,	4}

		
};
return P102;
};

public static int[][] Path11()
{
	//These are the paths that have 11 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8,9,10}
	int[][] P11 = {
			
			{0,	24,	11,	0,	2,	6,	7,	16,	24,	32,	24,	16,	8,	7,	4},
			{1,	24,	11,	1,	2,	6,	7,	16,	24,	33,	24,	16,	8,	7,	4},
			{2,	24,	11,	2,	2,	6,	7,	16,	24,	34,	24,	16,	8,	7,	4},
			{3,	24,	11,	3,	2,	6,	7,	16,	24,	35,	24,	16,	8,	7,	4},
			{4,	24,	11,	4,	2,	6,	7,	16,	24,	36,	24,	16,	8,	7,	4},
			{5,	24,	11,	5,	2,	6,	7,	16,	24,	37,	24,	16,	8,	7,	4},
			{6,	24,	11,	6,	2,	6,	7,	16,	24,	38,	24,	16,	8,	7,	4},
			{7,	24,	11,	7,	2,	6,	7,	16,	24,	39,	24,	16,	8,	7,	4},
			{8,	25,	11,	16,	2,	6,	10,	18,	26,	48,	26,	18,	10,	6,	5},
			{9,	25,	11,	17,	2,	6,	10,	18,	26,	49,	26,	18,	10,	6,	5},
			{10,	25,	11,	18,	2,	6,	10,	18,	26,	50,	26,	18,	10,	6,	5},
			{11,	25,	11,	19,	2,	6,	10,	18,	26,	51,	26,	18,	10,	6,	5},
			{12,	25,	11,	20,	2,	6,	10,	18,	26,	52,	26,	18,	10,	6,	5},
			{13,	25,	11,	21,	2,	6,	10,	18,	26,	53,	26,	18,	10,	6,	5},
			{14,	25,	11,	22,	2,	6,	10,	18,	26,	54,	26,	18,	10,	6,	5},
			{15,	25,	11,	23,	2,	6,	10,	18,	26,	55,	26,	18,	10,	6,	5},
			{16,	45,	11,	0,	4,	7,	8,	16,	24,	32,	24,	16,	7,	6,	5},
			{17,	45,	11,	1,	4,	7,	8,	16,	24,	33,	24,	16,	7,	6,	5},
			{18,	45,	11,	2,	4,	7,	8,	16,	24,	34,	24,	16,	7,	6,	5},
			{19,	45,	11,	3,	4,	7,	8,	16,	24,	35,	24,	16,	7,	6,	5},
			{20,	45,	11,	4,	4,	7,	8,	16,	24,	36,	24,	16,	7,	6,	5},
			{21,	45,	11,	5,	4,	7,	8,	16,	24,	37,	24,	16,	7,	6,	5},
			{22,	45,	11,	6,	4,	7,	8,	16,	24,	38,	24,	16,	7,	6,	5},
			{23,	45,	11,	7,	4,	7,	8,	16,	24,	39,	24,	16,	7,	6,	5},
			{24,	45,	11,	8,	4,	7,	8,	16,	25,	40,	25,	16,	7,	6,	5},
			{25,	45,	11,	9,	4,	7,	8,	16,	25,	41,	25,	16,	7,	6,	5},
			{26,	45,	11,	10,	4,	7,	8,	16,	25,	42,	25,	16,	7,	6,	5},
			{27,	45,	11,	11,	4,	7,	8,	16,	25,	43,	25,	16,	7,	6,	5},
			{28,	45,	11,	12,	4,	7,	8,	16,	25,	44,	25,	16,	7,	6,	5},
			{29,	45,	11,	13,	4,	7,	8,	16,	25,	45,	25,	16,	7,	6,	5},
			{30,	45,	11,	14,	4,	7,	8,	16,	25,	46,	25,	16,	7,	6,	5},
			{31,	45,	11,	15,	4,	7,	8,	16,	25,	47,	25,	16,	7,	6,	5},
			{32,	45,	11,	0,	4,	7,	8,	17,	24,	32,	24,	17,	7,	6,	5},
			{33,	45,	11,	1,	4,	7,	8,	17,	24,	33,	24,	17,	7,	6,	5},
			{34,	45,	11,	2,	4,	7,	8,	17,	24,	34,	24,	17,	7,	6,	5},
			{35,	45,	11,	3,	4,	7,	8,	17,	24,	35,	24,	17,	7,	6,	5},
			{36,	45,	11,	4,	4,	7,	8,	17,	24,	36,	24,	17,	7,	6,	5},
			{37,	45,	11,	5,	4,	7,	8,	17,	24,	37,	24,	17,	7,	6,	5},
			{38,	45,	11,	6,	4,	7,	8,	17,	24,	38,	24,	17,	7,	6,	5},
			{39,	45,	11,	7,	4,	7,	8,	17,	24,	39,	24,	17,	7,	6,	5},
			{40,	45,	11,	8,	4,	7,	8,	17,	25,	40,	25,	17,	7,	6,	5},
			{41,	45,	11,	9,	4,	7,	8,	17,	25,	41,	25,	17,	7,	6,	5},
			{42,	45,	11,	10,	4,	7,	8,	17,	25,	42,	25,	17,	7,	6,	5},
			{43,	45,	11,	11,	4,	7,	8,	17,	25,	43,	25,	17,	7,	6,	5},
			{44,	45,	11,	12,	4,	7,	8,	17,	25,	44,	25,	17,	7,	6,	5},
			{45,	45,	11,	13,	4,	7,	8,	17,	25,	45,	25,	17,	7,	6,	5},
			{46,	45,	11,	14,	4,	7,	8,	17,	25,	46,	25,	17,	7,	6,	5},
			{47,	45,	11,	15,	4,	7,	8,	17,	25,	47,	25,	17,	7,	6,	5},
			{48,	52,	11,	0,	5,	6,	7,	16,	24,	32,	24,	16,	7,	6,	2},
			{49,	52,	11,	1,	5,	6,	7,	16,	24,	33,	24,	16,	7,	6,	2},
			{50,	52,	11,	2,	5,	6,	7,	16,	24,	34,	24,	16,	7,	6,	2},
			{51,	52,	11,	3,	5,	6,	7,	16,	24,	35,	24,	16,	7,	6,	2},
			{52,	52,	11,	4,	5,	6,	7,	16,	24,	36,	24,	16,	7,	6,	2},
			{53,	52,	11,	5,	5,	6,	7,	16,	24,	37,	24,	16,	7,	6,	2},
			{54,	52,	11,	6,	5,	6,	7,	16,	24,	38,	24,	16,	7,	6,	2},
			{55,	52,	11,	7,	5,	6,	7,	16,	24,	39,	24,	16,	7,	6,	2},
			{56,	52,	11,	8,	5,	6,	7,	16,	25,	40,	25,	16,	7,	6,	2},
			{57,	52,	11,	9,	5,	6,	7,	16,	25,	41,	25,	16,	7,	6,	2},
			{58,	52,	11,	10,	5,	6,	7,	16,	25,	42,	25,	16,	7,	6,	2},
			{59,	52,	11,	11,	5,	6,	7,	16,	25,	43,	25,	16,	7,	6,	2},
			{60,	52,	11,	12,	5,	6,	7,	16,	25,	44,	25,	16,	7,	6,	2},
			{61,	52,	11,	13,	5,	6,	7,	16,	25,	45,	25,	16,	7,	6,	2},
			{62,	52,	11,	14,	5,	6,	7,	16,	25,	46,	25,	16,	7,	6,	2},
			{63,	52,	11,	15,	5,	6,	7,	16,	25,	47,	25,	16,	7,	6,	2},
			{64,	52,	11,	0,	5,	6,	7,	17,	24,	32,	24,	17,	7,	6,	2},
			{65,	52,	11,	1,	5,	6,	7,	17,	24,	33,	24,	17,	7,	6,	2},
			{66,	52,	11,	2,	5,	6,	7,	17,	24,	34,	24,	17,	7,	6,	2},
			{67,	52,	11,	3,	5,	6,	7,	17,	24,	35,	24,	17,	7,	6,	2},
			{68,	52,	11,	4,	5,	6,	7,	17,	24,	36,	24,	17,	7,	6,	2},
			{69,	52,	11,	5,	5,	6,	7,	17,	24,	37,	24,	17,	7,	6,	2},
			{70,	52,	11,	6,	5,	6,	7,	17,	24,	38,	24,	17,	7,	6,	2},
			{71,	52,	11,	7,	5,	6,	7,	17,	24,	39,	24,	17,	7,	6,	2},
			{72,	52,	11,	8,	5,	6,	7,	17,	25,	40,	25,	17,	7,	6,	2},
			{73,	52,	11,	9,	5,	6,	7,	17,	25,	41,	25,	17,	7,	6,	2},
			{74,	52,	11,	10,	5,	6,	7,	17,	25,	42,	25,	17,	7,	6,	2},
			{75,	52,	11,	11,	5,	6,	7,	17,	25,	43,	25,	17,	7,	6,	2},
			{76,	52,	11,	12,	5,	6,	7,	17,	25,	44,	25,	17,	7,	6,	2},
			{77,	52,	11,	13,	5,	6,	7,	17,	25,	45,	25,	17,	7,	6,	2},
			{78,	52,	11,	14,	5,	6,	7,	17,	25,	46,	25,	17,	7,	6,	2},
			{79,	52,	11,	15,	5,	6,	7,	17,	25,	47,	25,	17,	7,	6,	2},
			{80,	52,	11,	32,	5,	6,	7,	20,	28,	64,	28,	20,	7,	6,	2},
			{81,	52,	11,	33,	5,	6,	7,	20,	28,	65,	28,	20,	7,	6,	2},
			{82,	52,	11,	34,	5,	6,	7,	20,	28,	66,	28,	20,	7,	6,	2},
			{83,	52,	11,	35,	5,	6,	7,	20,	28,	67,	28,	20,	7,	6,	2},
			{84,	52,	11,	36,	5,	6,	7,	20,	28,	68,	28,	20,	7,	6,	2},
			{85,	52,	11,	37,	5,	6,	7,	20,	28,	69,	28,	20,	7,	6,	2},
			{86,	52,	11,	38,	5,	6,	7,	20,	28,	70,	28,	20,	7,	6,	2},
			{87,	52,	11,	39,	5,	6,	7,	20,	28,	71,	28,	20,	7,	6,	2},
			{88,	52,	11,	40,	5,	6,	7,	20,	29,	72,	29,	20,	7,	6,	2},
			{89,	52,	11,	41,	5,	6,	7,	20,	29,	73,	29,	20,	7,	6,	2},
			{90,	52,	11,	42,	5,	6,	7,	20,	29,	74,	29,	20,	7,	6,	2},
			{91,	52,	11,	43,	5,	6,	7,	20,	29,	75,	29,	20,	7,	6,	2},
			{92,	52,	11,	44,	5,	6,	7,	20,	29,	76,	29,	20,	7,	6,	2},
			{93,	52,	11,	45,	5,	6,	7,	20,	29,	77,	29,	20,	7,	6,	2},
			{94,	52,	11,	46,	5,	6,	7,	20,	29,	78,	29,	20,	7,	6,	2},
			{95,	52,	11,	47,	5,	6,	7,	20,	29,	79,	29,	20,	7,	6,	2},
			{96,	52,	11,	32,	5,	6,	7,	21,	28,	64,	28,	21,	7,	6,	2},
			{97,	52,	11,	33,	5,	6,	7,	21,	28,	65,	28,	21,	7,	6,	2},
			{98,	52,	11,	34,	5,	6,	7,	21,	28,	66,	28,	21,	7,	6,	2},
			{99,	52,	11,	35,	5,	6,	7,	21,	28,	67,	28,	21,	7,	6,	2},
			{100,	52,	11,	36,	5,	6,	7,	21,	28,	68,	28,	21,	7,	6,	2},
			{101,	52,	11,	37,	5,	6,	7,	21,	28,	69,	28,	21,	7,	6,	2},
			{102,	52,	11,	38,	5,	6,	7,	21,	28,	70,	28,	21,	7,	6,	2},
			{103,	52,	11,	39,	5,	6,	7,	21,	28,	71,	28,	21,	7,	6,	2},
			{104,	52,	11,	40,	5,	6,	7,	21,	29,	72,	29,	21,	7,	6,	2},
			{105,	52,	11,	41,	5,	6,	7,	21,	29,	73,	29,	21,	7,	6,	2},
			{106,	52,	11,	42,	5,	6,	7,	21,	29,	74,	29,	21,	7,	6,	2},
			{107,	52,	11,	43,	5,	6,	7,	21,	29,	75,	29,	21,	7,	6,	2},
			{108,	52,	11,	44,	5,	6,	7,	21,	29,	76,	29,	21,	7,	6,	2},
			{109,	52,	11,	45,	5,	6,	7,	21,	29,	77,	29,	21,	7,	6,	2},
			{110,	52,	11,	46,	5,	6,	7,	21,	29,	78,	29,	21,	7,	6,	2},
			{111,	52,	11,	47,	5,	6,	7,	21,	29,	79,	29,	21,	7,	6,	2},
			{112,	52,	11,	16,	5,	6,	10,	18,	26,	48,	26,	18,	10,	6,	2},
			{113,	52,	11,	17,	5,	6,	10,	18,	26,	49,	26,	18,	10,	6,	2},
			{114,	52,	11,	18,	5,	6,	10,	18,	26,	50,	26,	18,	10,	6,	2},
			{115,	52,	11,	19,	5,	6,	10,	18,	26,	51,	26,	18,	10,	6,	2},
			{116,	52,	11,	20,	5,	6,	10,	18,	26,	52,	26,	18,	10,	6,	2},
			{117,	52,	11,	21,	5,	6,	10,	18,	26,	53,	26,	18,	10,	6,	2},
			{118,	52,	11,	22,	5,	6,	10,	18,	26,	54,	26,	18,	10,	6,	2},
			{119,	52,	11,	23,	5,	6,	10,	18,	26,	55,	26,	18,	10,	6,	2},
			{120,	52,	11,	24,	5,	6,	10,	18,	27,	56,	27,	18,	10,	6,	2},
			{121,	52,	11,	25,	5,	6,	10,	18,	27,	57,	27,	18,	10,	6,	2},
			{122,	52,	11,	26,	5,	6,	10,	18,	27,	58,	27,	18,	10,	6,	2},
			{123,	52,	11,	27,	5,	6,	10,	18,	27,	59,	27,	18,	10,	6,	2},
			{124,	52,	11,	28,	5,	6,	10,	18,	27,	60,	27,	18,	10,	6,	2},
			{125,	52,	11,	29,	5,	6,	10,	18,	27,	61,	27,	18,	10,	6,	2},
			{126,	52,	11,	30,	5,	6,	10,	18,	27,	62,	27,	18,	10,	6,	2},
			{127,	52,	11,	31,	5,	6,	10,	18,	27,	63,	27,	18,	10,	6,	2},
			{128,	52,	11,	16,	5,	6,	10,	19,	26,	48,	26,	19,	10,	6,	2},
			{129,	52,	11,	17,	5,	6,	10,	19,	26,	49,	26,	19,	10,	6,	2},
			{130,	52,	11,	18,	5,	6,	10,	19,	26,	50,	26,	19,	10,	6,	2},
			{131,	52,	11,	19,	5,	6,	10,	19,	26,	51,	26,	19,	10,	6,	2},
			{132,	52,	11,	20,	5,	6,	10,	19,	26,	52,	26,	19,	10,	6,	2},
			{133,	52,	11,	21,	5,	6,	10,	19,	26,	53,	26,	19,	10,	6,	2},
			{134,	52,	11,	22,	5,	6,	10,	19,	26,	54,	26,	19,	10,	6,	2},
			{135,	52,	11,	23,	5,	6,	10,	19,	26,	55,	26,	19,	10,	6,	2},
			{136,	52,	11,	24,	5,	6,	10,	19,	27,	56,	27,	19,	10,	6,	2},
			{137,	52,	11,	25,	5,	6,	10,	19,	27,	57,	27,	19,	10,	6,	2},
			{138,	52,	11,	26,	5,	6,	10,	19,	27,	58,	27,	19,	10,	6,	2},
			{139,	52,	11,	27,	5,	6,	10,	19,	27,	59,	27,	19,	10,	6,	2},
			{140,	52,	11,	28,	5,	6,	10,	19,	27,	60,	27,	19,	10,	6,	2},
			{141,	52,	11,	29,	5,	6,	10,	19,	27,	61,	27,	19,	10,	6,	2},
			{142,	52,	11,	30,	5,	6,	10,	19,	27,	62,	27,	19,	10,	6,	2},
			{143,	52,	11,	31,	5,	6,	10,	19,	27,	63,	27,	19,	10,	6,	2},
			{144,	52,	11,	48,	5,	6,	10,	22,	30,	80,	30,	22,	10,	6,	2},
			{145,	52,	11,	49,	5,	6,	10,	22,	30,	81,	30,	22,	10,	6,	2},
			{146,	52,	11,	50,	5,	6,	10,	22,	30,	82,	30,	22,	10,	6,	2},
			{147,	52,	11,	51,	5,	6,	10,	22,	30,	83,	30,	22,	10,	6,	2},
			{148,	52,	11,	52,	5,	6,	10,	22,	30,	84,	30,	22,	10,	6,	2},
			{149,	52,	11,	53,	5,	6,	10,	22,	30,	85,	30,	22,	10,	6,	2},
			{150,	52,	11,	54,	5,	6,	10,	22,	30,	86,	30,	22,	10,	6,	2},
			{151,	52,	11,	55,	5,	6,	10,	22,	30,	87,	30,	22,	10,	6,	2},
			{152,	52,	11,	56,	5,	6,	10,	22,	31,	88,	31,	22,	10,	6,	2},
			{153,	52,	11,	57,	5,	6,	10,	22,	31,	89,	31,	22,	10,	6,	2},
			{154,	52,	11,	58,	5,	6,	10,	22,	31,	90,	31,	22,	10,	6,	2},
			{155,	52,	11,	59,	5,	6,	10,	22,	31,	91,	31,	22,	10,	6,	2},
			{156,	52,	11,	60,	5,	6,	10,	22,	31,	92,	31,	22,	10,	6,	2},
			{157,	52,	11,	61,	5,	6,	10,	22,	31,	93,	31,	22,	10,	6,	2},
			{158,	52,	11,	62,	5,	6,	10,	22,	31,	94,	31,	22,	10,	6,	2},
			{159,	52,	11,	63,	5,	6,	10,	22,	31,	95,	31,	22,	10,	6,	2},
			{160,	52,	11,	48,	5,	6,	10,	23,	30,	80,	30,	23,	10,	6,	2},
			{161,	52,	11,	49,	5,	6,	10,	23,	30,	81,	30,	23,	10,	6,	2},
			{162,	52,	11,	50,	5,	6,	10,	23,	30,	82,	30,	23,	10,	6,	2},
			{163,	52,	11,	51,	5,	6,	10,	23,	30,	83,	30,	23,	10,	6,	2},
			{164,	52,	11,	52,	5,	6,	10,	23,	30,	84,	30,	23,	10,	6,	2},
			{165,	52,	11,	53,	5,	6,	10,	23,	30,	85,	30,	23,	10,	6,	2},
			{166,	52,	11,	54,	5,	6,	10,	23,	30,	86,	30,	23,	10,	6,	2},
			{167,	52,	11,	55,	5,	6,	10,	23,	30,	87,	30,	23,	10,	6,	2},
			{168,	52,	11,	56,	5,	6,	10,	23,	31,	88,	31,	23,	10,	6,	2},
			{169,	52,	11,	57,	5,	6,	10,	23,	32,	89,	31,	23,	10,	6,	2},
			{170,	52,	11,	58,	5,	6,	10,	23,	33,	90,	31,	23,	10,	6,	2},
			{171,	52,	11,	59,	5,	6,	10,	23,	34,	91,	31,	23,	10,	6,	2},
			{172,	52,	11,	60,	5,	6,	10,	23,	35,	92,	31,	23,	10,	6,	2},
			{173,	52,	11,	61,	5,	6,	10,	23,	36,	93,	31,	23,	10,	6,	2},
			{174,	52,	11,	62,	5,	6,	10,	23,	37,	94,	31,	23,	10,	6,	2},
			{175,	52,	11,	63,	5,	6,	10,	23,	38,	95,	31,	23,	10,	6,	2},
			{176,	34,	11,	16,	3,	10,	18,	26,	16,	26,	18,	9,	8,	7,	4},
			{177,	34,	11,	17,	3,	10,	18,	26,	17,	26,	18,	9,	8,	7,	4},
			{178,	34,	11,	18,	3,	10,	18,	26,	18,	26,	18,	9,	8,	7,	4},
			{179,	34,	11,	19,	3,	10,	18,	26,	19,	26,	18,	9,	8,	7,	4},
			{180,	34,	11,	20,	3,	10,	18,	26,	20,	26,	18,	9,	8,	7,	4},
			{181,	34,	11,	21,	3,	10,	18,	26,	21,	26,	18,	9,	8,	7,	4},
			{182,	34,	11,	22,	3,	10,	18,	26,	22,	26,	18,	9,	8,	7,	4},
			{183,	34,	11,	23,	3,	10,	18,	26,	23,	26,	18,	9,	8,	7,	4},
			{184,	34,	11,	24,	3,	10,	18,	27,	24,	27,	18,	9,	8,	7,	4},
			{185,	34,	11,	25,	3,	10,	18,	27,	25,	27,	18,	9,	8,	7,	4},
			{186,	34,	11,	26,	3,	10,	18,	27,	26,	27,	18,	9,	8,	7,	4},
			{187,	34,	11,	27,	3,	10,	18,	27,	27,	27,	18,	9,	8,	7,	4},
			{188,	34,	11,	28,	3,	10,	18,	27,	28,	27,	18,	9,	8,	7,	4},
			{189,	34,	11,	29,	3,	10,	18,	27,	29,	27,	18,	9,	8,	7,	4},
			{190,	34,	11,	30,	3,	10,	18,	27,	30,	27,	18,	9,	8,	7,	4},
			{191,	34,	11,	31,	3,	10,	18,	27,	31,	27,	18,	9,	8,	7,	4},
			{192,	34,	11,	16,	3,	10,	19,	26,	16,	26,	19,	9,	8,	7,	4},
			{193,	34,	11,	17,	3,	10,	19,	26,	17,	26,	19,	9,	8,	7,	4},
			{194,	34,	11,	18,	3,	10,	19,	26,	18,	26,	19,	9,	8,	7,	4},
			{195,	34,	11,	19,	3,	10,	19,	26,	19,	26,	19,	9,	8,	7,	4},
			{196,	34,	11,	20,	3,	10,	19,	26,	20,	26,	19,	9,	8,	7,	4},
			{197,	34,	11,	21,	3,	10,	19,	26,	21,	26,	19,	9,	8,	7,	4},
			{198,	34,	11,	22,	3,	10,	19,	26,	22,	26,	19,	9,	8,	7,	4},
			{199,	34,	11,	23,	3,	10,	19,	26,	23,	26,	19,	9,	8,	7,	4},
			{200,	34,	11,	24,	3,	10,	19,	27,	24,	27,	19,	9,	8,	7,	4},
			{201,	34,	11,	25,	3,	10,	19,	27,	25,	27,	19,	9,	8,	7,	4},
			{202,	34,	11,	26,	3,	10,	19,	27,	26,	27,	19,	9,	8,	7,	4},
			{203,	34,	11,	27,	3,	10,	19,	27,	27,	27,	19,	9,	8,	7,	4},
			{204,	34,	11,	28,	3,	10,	19,	27,	28,	27,	19,	9,	8,	7,	4},
			{205,	34,	11,	29,	3,	10,	19,	27,	29,	27,	19,	9,	8,	7,	4},
			{206,	34,	11,	30,	3,	10,	19,	27,	30,	27,	19,	9,	8,	7,	4},
			{207,	34,	11,	31,	3,	10,	19,	27,	31,	27,	19,	9,	8,	7,	4},
			{208,	43,	11,	16,	4,	7,	8,	9,	18,	26,	16,	26,	18,	10,	3},
			{209,	43,	11,	17,	4,	7,	8,	9,	18,	26,	17,	26,	18,	10,	3},
			{210,	43,	11,	18,	4,	7,	8,	9,	18,	26,	18,	26,	18,	10,	3},
			{211,	43,	11,	19,	4,	7,	8,	9,	18,	26,	19,	26,	18,	10,	3},
			{212,	43,	11,	20,	4,	7,	8,	9,	18,	26,	20,	26,	18,	10,	3},
			{213,	43,	11,	21,	4,	7,	8,	9,	18,	26,	21,	26,	18,	10,	3},
			{214,	43,	11,	22,	4,	7,	8,	9,	18,	26,	22,	26,	18,	10,	3},
			{215,	43,	11,	23,	4,	7,	8,	9,	18,	26,	23,	26,	18,	10,	3},
			{216,	43,	11,	24,	4,	7,	8,	9,	18,	27,	24,	27,	18,	10,	3},
			{217,	43,	11,	25,	4,	7,	8,	9,	18,	27,	25,	27,	18,	10,	3},
			{218,	43,	11,	26,	4,	7,	8,	9,	18,	27,	26,	27,	18,	10,	3},
			{219,	43,	11,	27,	4,	7,	8,	9,	18,	27,	27,	27,	18,	10,	3},
			{220,	43,	11,	28,	4,	7,	8,	9,	18,	27,	28,	27,	18,	10,	3},
			{221,	43,	11,	29,	4,	7,	8,	9,	18,	27,	29,	27,	18,	10,	3},
			{222,	43,	11,	30,	4,	7,	8,	9,	18,	27,	30,	27,	18,	10,	3},
			{223,	43,	11,	31,	4,	7,	8,	9,	18,	27,	31,	27,	18,	10,	3},
			{224,	43,	11,	16,	4,	7,	8,	9,	19,	26,	16,	26,	19,	10,	3},
			{225,	43,	11,	17,	4,	7,	8,	9,	19,	26,	17,	26,	19,	10,	3},
			{226,	43,	11,	18,	4,	7,	8,	9,	19,	26,	18,	26,	19,	10,	3},
			{227,	43,	11,	19,	4,	7,	8,	9,	19,	26,	19,	26,	19,	10,	3},
			{228,	43,	11,	20,	4,	7,	8,	9,	19,	26,	20,	26,	19,	10,	3},
			{229,	43,	11,	21,	4,	7,	8,	9,	19,	26,	21,	26,	19,	10,	3},
			{230,	43,	11,	22,	4,	7,	8,	9,	19,	26,	22,	26,	19,	10,	3},
			{231,	43,	11,	23,	4,	7,	8,	9,	19,	26,	23,	26,	19,	10,	3},
			{232,	43,	11,	24,	4,	7,	8,	9,	19,	27,	24,	27,	19,	10,	3},
			{233,	43,	11,	25,	4,	7,	8,	9,	19,	27,	25,	27,	19,	10,	3},
			{234,	43,	11,	26,	4,	7,	8,	9,	19,	27,	26,	27,	19,	10,	3},
			{235,	43,	11,	27,	4,	7,	8,	9,	19,	27,	27,	27,	19,	10,	3},
			{236,	43,	11,	28,	4,	7,	8,	9,	19,	27,	28,	27,	19,	10,	3},
			{237,	43,	11,	29,	4,	7,	8,	9,	19,	27,	29,	27,	19,	10,	3},
			{238,	43,	11,	30,	4,	7,	8,	9,	19,	27,	30,	27,	19,	10,	3},
			{239,	43,	11,	31,	4,	7,	8,	9,	19,	27,	31,	27,	19,	10,	3},
			{240,	04,	11,	16,	0,	10,	18,	26,	48,	26,	18,	9,	8,	7,	4},
			{241,	04,	11,	17,	0,	10,	18,	26,	49,	26,	18,	9,	8,	7,	4},
			{242,	04,	11,	18,	0,	10,	18,	26,	50,	26,	18,	9,	8,	7,	4},
			{243,	04,	11,	19,	0,	10,	18,	26,	51,	26,	18,	9,	8,	7,	4},
			{244,	04,	11,	20,	0,	10,	18,	26,	52,	26,	18,	9,	8,	7,	4},
			{245,	04,	11,	21,	0,	10,	18,	26,	53,	26,	18,	9,	8,	7,	4},
			{246,	04,	11,	22,	0,	10,	18,	26,	54,	26,	18,	9,	8,	7,	4},
			{247,	04,	11,	23,	0,	10,	18,	26,	55,	26,	18,	9,	8,	7,	4},
			{248,	04,	11,	24,	0,	10,	18,	27,	56,	27,	18,	9,	8,	7,	4},
			{249,	04,	11,	25,	0,	10,	18,	27,	57,	27,	18,	9,	8,	7,	4},
			{250,	04,	11,	26,	0,	10,	18,	27,	58,	27,	18,	9,	8,	7,	4},
			{251,	04,	11,	27,	0,	10,	18,	27,	59,	27,	18,	9,	8,	7,	4},
			{252,	04,	11,	28,	0,	10,	18,	27,	60,	27,	18,	9,	8,	7,	4},
			{253,	04,	11,	29,	0,	10,	18,	27,	61,	27,	18,	9,	8,	7,	4},
			{254,	04,	11,	30,	0,	10,	18,	27,	62,	27,	18,	9,	8,	7,	4},
			{255,	04,	11,	31,	0,	10,	18,	27,	63,	27,	18,	9,	8,	7,	4},
			{256,	04,	11,	16,	0,	10,	19,	26,	48,	26,	19,	9,	8,	7,	4},
			{257,	04,	11,	17,	0,	10,	19,	26,	49,	26,	19,	9,	8,	7,	4},
			{258,	04,	11,	18,	0,	10,	19,	26,	50,	26,	19,	9,	8,	7,	4},
			{259,	04,	11,	19,	0,	10,	19,	26,	51,	26,	19,	9,	8,	7,	4},
			{260,	04,	11,	20,	0,	10,	19,	26,	52,	26,	19,	9,	8,	7,	4},
			{261,	04,	11,	21,	0,	10,	19,	26,	53,	26,	19,	9,	8,	7,	4},
			{262,	04,	11,	22,	0,	10,	19,	26,	54,	26,	19,	9,	8,	7,	4},
			{263,	04,	11,	23,	0,	10,	19,	26,	55,	26,	19,	9,	8,	7,	4},
			{264,	04,	11,	24,	0,	10,	19,	27,	56,	27,	19,	9,	8,	7,	4},
			{265,	04,	11,	25,	0,	10,	19,	27,	57,	27,	19,	9,	8,	7,	4},
			{266,	04,	11,	26,	0,	10,	19,	27,	58,	27,	19,	9,	8,	7,	4},
			{267,	04,	11,	27,	0,	10,	19,	27,	59,	27,	19,	9,	8,	7,	4},
			{268,	04,	11,	28,	0,	10,	19,	27,	60,	27,	19,	9,	8,	7,	4},
			{269,	04,	11,	29,	0,	10,	19,	27,	61,	27,	19,	9,	8,	7,	4},
			{270,	04,	11,	30,	0,	10,	19,	27,	62,	27,	19,	9,	8,	7,	4},
			{271,	04,	11,	31,	0,	10,	19,	27,	63,	27,	19,	9,	8,	7,	4},
			{272,	14,	11,	16,	1,	10,	18,	26,	48,	26,	18,	9,	8,	7,	4},
			{273,	14,	11,	17,	1,	10,	18,	26,	49,	26,	18,	9,	8,	7,	4},
			{274,	14,	11,	18,	1,	10,	18,	26,	50,	26,	18,	9,	8,	7,	4},
			{275,	14,	11,	19,	1,	10,	18,	26,	51,	26,	18,	9,	8,	7,	4},
			{276,	14,	11,	20,	1,	10,	18,	26,	52,	26,	18,	9,	8,	7,	4},
			{277,	14,	11,	21,	1,	10,	18,	26,	53,	26,	18,	9,	8,	7,	4},
			{278,	14,	11,	22,	1,	10,	18,	26,	54,	26,	18,	9,	8,	7,	4},
			{279,	14,	11,	23,	1,	10,	18,	26,	55,	26,	18,	9,	8,	7,	4},
			{280,	14,	11,	24,	1,	10,	18,	27,	56,	27,	18,	9,	8,	7,	4},
			{281,	14,	11,	25,	1,	10,	18,	27,	57,	27,	18,	9,	8,	7,	4},
			{282,	14,	11,	26,	1,	10,	18,	27,	58,	27,	18,	9,	8,	7,	4},
			{283,	14,	11,	27,	1,	10,	18,	27,	59,	27,	18,	9,	8,	7,	4},
			{284,	14,	11,	28,	1,	10,	18,	27,	60,	27,	18,	9,	8,	7,	4},
			{285,	14,	11,	29,	1,	10,	18,	27,	61,	27,	18,	9,	8,	7,	4},
			{286,	14,	11,	30,	1,	10,	18,	27,	62,	27,	18,	9,	8,	7,	4},
			{287,	14,	11,	31,	1,	10,	18,	27,	63,	27,	18,	9,	8,	7,	4},
			{288,	14,	11,	16,	1,	10,	19,	26,	48,	26,	19,	9,	8,	7,	4},
			{289,	14,	11,	17,	1,	10,	19,	26,	49,	26,	19,	9,	8,	7,	4},
			{290,	14,	11,	18,	1,	10,	19,	26,	50,	26,	19,	9,	8,	7,	4},
			{291,	14,	11,	19,	1,	10,	19,	26,	51,	26,	19,	9,	8,	7,	4},
			{292,	14,	11,	20,	1,	10,	19,	26,	52,	26,	19,	9,	8,	7,	4},
			{293,	14,	11,	21,	1,	10,	19,	26,	53,	26,	19,	9,	8,	7,	4},
			{294,	14,	11,	22,	1,	10,	19,	26,	54,	26,	19,	9,	8,	7,	4},
			{295,	14,	11,	23,	1,	10,	19,	26,	55,	26,	19,	9,	8,	7,	4},
			{296,	14,	11,	24,	1,	10,	19,	27,	56,	27,	19,	9,	8,	7,	4},
			{297,	14,	11,	25,	1,	10,	19,	27,	57,	27,	19,	9,	8,	7,	4},
			{298,	14,	11,	26,	1,	10,	19,	27,	58,	27,	19,	9,	8,	7,	4},
			{299,	14,	11,	27,	1,	10,	19,	27,	59,	27,	19,	9,	8,	7,	4},
			{300,	14,	11,	28,	1,	10,	19,	27,	60,	27,	19,	9,	8,	7,	4},
			{301,	14,	11,	29,	1,	10,	19,	27,	61,	27,	19,	9,	8,	7,	4},
			{302,	14,	11,	30,	1,	10,	19,	27,	62,	27,	19,	9,	8,	7,	4},
			{303,	14,	11,	31,	1,	10,	19,	27,	63,	27,	19,	9,	8,	7,	4},
			{304,	40,	11,	16,	4,	7,	8,	9,	18,	26,	48,	26,	18,	10,	0},
			{305,	40,	11,	17,	4,	7,	8,	9,	18,	26,	49,	26,	18,	10,	0},
			{306,	40,	11,	18,	4,	7,	8,	9,	18,	26,	50,	26,	18,	10,	0},
			{307,	40,	11,	19,	4,	7,	8,	9,	18,	26,	51,	26,	18,	10,	0},
			{308,	40,	11,	20,	4,	7,	8,	9,	18,	26,	52,	26,	18,	10,	0},
			{309,	40,	11,	21,	4,	7,	8,	9,	18,	26,	53,	26,	18,	10,	0},
			{310,	40,	11,	22,	4,	7,	8,	9,	18,	26,	54,	26,	18,	10,	0},
			{311,	40,	11,	23,	4,	7,	8,	9,	18,	26,	55,	26,	18,	10,	0},
			{312,	40,	11,	24,	4,	7,	8,	9,	18,	27,	56,	27,	18,	10,	0},
			{313,	40,	11,	25,	4,	7,	8,	9,	18,	27,	57,	27,	18,	10,	0},
			{314,	40,	11,	26,	4,	7,	8,	9,	18,	27,	58,	27,	18,	10,	0},
			{315,	40,	11,	27,	4,	7,	8,	9,	18,	27,	59,	27,	18,	10,	0},
			{316,	40,	11,	28,	4,	7,	8,	9,	18,	27,	60,	27,	18,	10,	0},
			{317,	40,	11,	29,	4,	7,	8,	9,	18,	27,	61,	27,	18,	10,	0},
			{318,	40,	11,	30,	4,	7,	8,	9,	18,	27,	62,	27,	18,	10,	0},
			{319,	40,	11,	31,	4,	7,	8,	9,	18,	27,	63,	27,	18,	10,	0},
			{320,	40,	11,	16,	4,	7,	8,	9,	19,	26,	48,	26,	19,	10,	0},
			{321,	40,	11,	17,	4,	7,	8,	9,	19,	26,	49,	26,	19,	10,	0},
			{322,	40,	11,	18,	4,	7,	8,	9,	19,	26,	50,	26,	19,	10,	0},
			{323,	40,	11,	19,	4,	7,	8,	9,	19,	26,	51,	26,	19,	10,	0},
			{324,	40,	11,	20,	4,	7,	8,	9,	19,	26,	52,	26,	19,	10,	0},
			{325,	40,	11,	21,	4,	7,	8,	9,	19,	26,	53,	26,	19,	10,	0},
			{326,	40,	11,	22,	4,	7,	8,	9,	19,	26,	54,	26,	19,	10,	0},
			{327,	40,	11,	23,	4,	7,	8,	9,	19,	26,	55,	26,	19,	10,	0},
			{328,	40,	11,	24,	4,	7,	8,	9,	19,	27,	56,	27,	19,	10,	0},
			{329,	40,	11,	25,	4,	7,	8,	9,	19,	27,	57,	27,	19,	10,	0},
			{330,	40,	11,	26,	4,	7,	8,	9,	19,	27,	58,	27,	19,	10,	0},
			{331,	40,	11,	27,	4,	7,	8,	9,	19,	27,	59,	27,	19,	10,	0},
			{332,	40,	11,	28,	4,	7,	8,	9,	19,	27,	60,	27,	19,	10,	0},
			{333,	40,	11,	29,	4,	7,	8,	9,	19,	27,	61,	27,	19,	10,	0},
			{334,	40,	11,	30,	4,	7,	8,	9,	19,	27,	62,	27,	19,	10,	0},
			{335,	40,	11,	31,	4,	7,	8,	9,	19,	27,	63,	27,	19,	10,	0},
			{336,	41,	11,	16,	4,	7,	8,	9,	18,	26,	48,	26,	18,	10,	1},
			{337,	41,	11,	17,	4,	7,	8,	9,	18,	26,	49,	26,	18,	10,	1},
			{338,	41,	11,	18,	4,	7,	8,	9,	18,	26,	50,	26,	18,	10,	1},
			{339,	41,	11,	19,	4,	7,	8,	9,	18,	26,	51,	26,	18,	10,	1},
			{340,	41,	11,	20,	4,	7,	8,	9,	18,	26,	52,	26,	18,	10,	1},
			{341,	41,	11,	21,	4,	7,	8,	9,	18,	26,	53,	26,	18,	10,	1},
			{342,	41,	11,	22,	4,	7,	8,	9,	18,	26,	54,	26,	18,	10,	1},
			{343,	41,	11,	23,	4,	7,	8,	9,	18,	26,	55,	26,	18,	10,	1},
			{344,	41,	11,	24,	4,	7,	8,	9,	18,	27,	56,	27,	18,	10,	1},
			{345,	41,	11,	25,	4,	7,	8,	9,	18,	27,	57,	27,	18,	10,	1},
			{346,	41,	11,	26,	4,	7,	8,	9,	18,	27,	58,	27,	18,	10,	1},
			{347,	41,	11,	27,	4,	7,	8,	9,	18,	27,	59,	27,	18,	10,	1},
			{348,	41,	11,	28,	4,	7,	8,	9,	18,	27,	60,	27,	18,	10,	1},
			{349,	41,	11,	29,	4,	7,	8,	9,	18,	27,	61,	27,	18,	10,	1},
			{350,	41,	11,	30,	4,	7,	8,	9,	18,	27,	62,	27,	18,	10,	1},
			{351,	41,	11,	31,	4,	7,	8,	9,	18,	27,	63,	27,	18,	10,	1},
			{352,	41,	11,	16,	4,	7,	8,	9,	19,	26,	48,	26,	19,	10,	1},
			{353,	41,	11,	17,	4,	7,	8,	9,	19,	26,	49,	26,	19,	10,	1},
			{354,	41,	11,	18,	4,	7,	8,	9,	19,	26,	50,	26,	19,	10,	1},
			{355,	41,	11,	19,	4,	7,	8,	9,	19,	26,	51,	26,	19,	10,	1},
			{356,	41,	11,	20,	4,	7,	8,	9,	19,	26,	52,	26,	19,	10,	1},
			{357,	41,	11,	21,	4,	7,	8,	9,	19,	26,	53,	26,	19,	10,	1},
			{358,	41,	11,	22,	4,	7,	8,	9,	19,	26,	54,	26,	19,	10,	1},
			{359,	41,	11,	23,	4,	7,	8,	9,	19,	26,	55,	26,	19,	10,	1},
			{360,	41,	11,	24,	4,	7,	8,	9,	19,	27,	56,	27,	19,	10,	1},
			{361,	41,	11,	25,	4,	7,	8,	9,	19,	27,	57,	27,	19,	10,	1},
			{362,	41,	11,	26,	4,	7,	8,	9,	19,	27,	58,	27,	19,	10,	1},
			{363,	41,	11,	27,	4,	7,	8,	9,	19,	27,	59,	27,	19,	10,	1},
			{364,	41,	11,	28,	4,	7,	8,	9,	19,	27,	60,	27,	19,	10,	1},
			{365,	41,	11,	29,	4,	7,	8,	9,	19,	27,	61,	27,	19,	10,	1},
			{366,	41,	11,	30,	4,	7,	8,	9,	19,	27,	62,	27,	19,	10,	1},
			{367,	41,	11,	31,	4,	7,	8,	9,	19,	27,	63,	27,	19,	10,	1},
};
	
	return P11;
};

public static int[][] Path13()
{
	//These are the paths that have 13 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8,9,10,12}
	int[][] P13 = {
			{0,	25,	13,	0,	2,	6,	7,	8,	16,	24,	32,	24,	16,	8,	7,	6,	5},
			{1,	25,	13,	1,	2,	6,	7,	8,	16,	24,	33,	24,	16,	8,	7,	6,	5},
			{2,	25,	13,	2,	2,	6,	7,	8,	16,	24,	34,	24,	16,	8,	7,	6,	5},
			{3,	25,	13,	3,	2,	6,	7,	8,	16,	24,	35,	24,	16,	8,	7,	6,	5},
			{4,	25,	13,	4,	2,	6,	7,	8,	16,	24,	36,	24,	16,	8,	7,	6,	5},
			{5,	25,	13,	5,	2,	6,	7,	8,	16,	24,	37,	24,	16,	8,	7,	6,	5},
			{6,	25,	13,	6,	2,	6,	7,	8,	16,	24,	38,	24,	16,	8,	7,	6,	5},
			{7,	25,	13,	7,	2,	6,	7,	8,	16,	24,	39,	24,	16,	8,	7,	6,	5},
			{8,	25,	13,	8,	2,	6,	7,	8,	16,	25,	40,	25,	16,	8,	7,	6,	5},
			{9,	25,	13,	9,	2,	6,	7,	8,	16,	25,	41,	25,	16,	8,	7,	6,	5},
			{10,	25,	13,	10,	2,	6,	7,	8,	16,	25,	42,	25,	16,	8,	7,	6,	5},
			{11,	25,	13,	11,	2,	6,	7,	8,	16,	25,	43,	25,	16,	8,	7,	6,	5},
			{12,	25,	13,	12,	2,	6,	7,	8,	16,	25,	44,	25,	16,	8,	7,	6,	5},
			{13,	25,	13,	13,	2,	6,	7,	8,	16,	25,	45,	25,	16,	8,	7,	6,	5},
			{14,	25,	13,	14,	2,	6,	7,	8,	16,	25,	46,	25,	16,	8,	7,	6,	5},
			{15,	25,	13,	15,	2,	6,	7,	8,	16,	25,	47,	25,	16,	8,	7,	6,	5},
			{16,	25,	13,	0,	2,	6,	7,	8,	17,	24,	32,	24,	17,	8,	7,	6,	5},
			{17,	25,	13,	1,	2,	6,	7,	8,	17,	24,	33,	24,	17,	8,	7,	6,	5},
			{18,	25,	13,	2,	2,	6,	7,	8,	17,	24,	34,	24,	17,	8,	7,	6,	5},
			{19,	25,	13,	3,	2,	6,	7,	8,	17,	24,	35,	24,	17,	8,	7,	6,	5},
			{20,	25,	13,	4,	2,	6,	7,	8,	17,	24,	36,	24,	17,	8,	7,	6,	5},
			{21,	25,	13,	5,	2,	6,	7,	8,	17,	24,	37,	24,	17,	8,	7,	6,	5},
			{22,	25,	13,	6,	2,	6,	7,	8,	17,	24,	38,	24,	17,	8,	7,	6,	5},
			{23,	25,	13,	7,	2,	6,	7,	8,	17,	24,	39,	24,	17,	8,	7,	6,	5},
			{24,	25,	13,	8,	2,	6,	7,	8,	17,	25,	40,	25,	17,	8,	7,	6,	5},
			{25,	25,	13,	9,	2,	6,	7,	8,	17,	25,	41,	25,	17,	8,	7,	6,	5},
			{26,	25,	13,	10,	2,	6,	7,	8,	17,	25,	42,	25,	17,	8,	7,	6,	5},
			{27,	25,	13,	11,	2,	6,	7,	8,	17,	25,	43,	25,	17,	8,	7,	6,	5},
			{28,	25,	13,	12,	2,	6,	7,	8,	17,	25,	44,	25,	17,	8,	7,	6,	5},
			{29,	25,	13,	13,	2,	6,	7,	8,	17,	25,	45,	25,	17,	8,	7,	6,	5},
			{30,	25,	13,	14,	2,	6,	7,	8,	17,	25,	46,	25,	17,	8,	7,	6,	5},
			{31,	25,	13,	15,	2,	6,	7,	8,	17,	25,	47,	25,	17,	8,	7,	6,	5},
			{32,	52,	13,	0,	5,	6,	7,	8,	16,	24,	32,	24,	16,	8,	7,	6,	2},
			{33,	52,	13,	1,	5,	6,	7,	8,	16,	24,	33,	24,	16,	8,	7,	6,	2},
			{34,	52,	13,	2,	5,	6,	7,	8,	16,	24,	34,	24,	16,	8,	7,	6,	2},
			{35,	52,	13,	3,	5,	6,	7,	8,	16,	24,	35,	24,	16,	8,	7,	6,	2},
			{36,	52,	13,	4,	5,	6,	7,	8,	16,	24,	36,	24,	16,	8,	7,	6,	2},
			{37,	52,	13,	5,	5,	6,	7,	8,	16,	24,	37,	24,	16,	8,	7,	6,	2},
			{38,	52,	13,	6,	5,	6,	7,	8,	16,	24,	38,	24,	16,	8,	7,	6,	2},
			{39,	52,	13,	7,	5,	6,	7,	8,	16,	24,	39,	24,	16,	8,	7,	6,	2},
			{40,	52,	13,	8,	5,	6,	7,	8,	16,	25,	40,	25,	16,	8,	7,	6,	2},
			{41,	52,	13,	9,	5,	6,	7,	8,	16,	25,	41,	25,	16,	8,	7,	6,	2},
			{42,	52,	13,	10,	5,	6,	7,	8,	16,	25,	42,	25,	16,	8,	7,	6,	2},
			{43,	52,	13,	11,	5,	6,	7,	8,	16,	25,	43,	25,	16,	8,	7,	6,	2},
			{44,	52,	13,	12,	5,	6,	7,	8,	16,	25,	44,	25,	16,	8,	7,	6,	2},
			{45,	52,	13,	13,	5,	6,	7,	8,	16,	25,	45,	25,	16,	8,	7,	6,	2},
			{46,	52,	13,	14,	5,	6,	7,	8,	16,	25,	46,	25,	16,	8,	7,	6,	2},
			{47,	52,	13,	15,	5,	6,	7,	8,	16,	25,	47,	25,	16,	8,	7,	6,	2},
			{48,	52,	13,	0,	5,	6,	7,	8,	17,	24,	32,	24,	17,	8,	7,	6,	2},
			{49,	52,	13,	1,	5,	6,	7,	8,	17,	24,	33,	24,	17,	8,	7,	6,	2},
			{50,	52,	13,	2,	5,	6,	7,	8,	17,	24,	34,	24,	17,	8,	7,	6,	2},
			{51,	52,	13,	3,	5,	6,	7,	8,	17,	24,	35,	24,	17,	8,	7,	6,	2},
			{52,	52,	13,	4,	5,	6,	7,	8,	17,	24,	36,	24,	17,	8,	7,	6,	2},
			{53,	52,	13,	5,	5,	6,	7,	8,	17,	24,	37,	24,	17,	8,	7,	6,	2},
			{54,	52,	13,	6,	5,	6,	7,	8,	17,	24,	38,	24,	17,	8,	7,	6,	2},
			{55,	52,	13,	7,	5,	6,	7,	8,	17,	24,	39,	24,	17,	8,	7,	6,	2},
			{56,	52,	13,	8,	5,	6,	7,	8,	17,	25,	40,	25,	17,	8,	7,	6,	2},
			{57,	52,	13,	9,	5,	6,	7,	8,	17,	25,	41,	25,	17,	8,	7,	6,	2},
			{58,	52,	13,	10,	5,	6,	7,	8,	17,	25,	42,	25,	17,	8,	7,	6,	2},
			{59,	52,	13,	11,	5,	6,	7,	8,	17,	25,	43,	25,	17,	8,	7,	6,	2},
			{60,	52,	13,	12,	5,	6,	7,	8,	17,	25,	44,	25,	17,	8,	7,	6,	2},
			{61,	52,	13,	13,	5,	6,	7,	8,	17,	25,	45,	25,	17,	8,	7,	6,	2},
			{62,	52,	13,	14,	5,	6,	7,	8,	17,	25,	46,	25,	17,	8,	7,	6,	2},
			{63,	52,	13,	15,	5,	6,	7,	8,	17,	25,	47,	25,	17,	8,	7,	6,	2}

	
	};
	
	return P13;
};

public static int[][] Path15()
{

	//These are the paths that have 15 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8,9,10,12,13,14}
	int[][] P15 = {

			{0,	24,	15,	16,	2,	6,	7,	8,	9,	18,	26,	48,	26,	18,	10,	9,	8,	7,	4},
			{1,	24,	15,	17,	2,	6,	7,	8,	9,	18,	26,	49,	26,	18,	10,	9,	8,	7,	4},
			{2,	24,	15,	18,	2,	6,	7,	8,	9,	18,	26,	50,	26,	18,	10,	9,	8,	7,	4},
			{3,	24,	15,	19,	2,	6,	7,	8,	9,	18,	26,	51,	26,	18,	10,	9,	8,	7,	4},
			{4,	24,	15,	20,	2,	6,	7,	8,	9,	18,	26,	52,	26,	18,	10,	9,	8,	7,	4},
			{5,	24,	15,	21,	2,	6,	7,	8,	9,	18,	26,	53,	26,	18,	10,	9,	8,	7,	4},
			{6,	24,	15,	22,	2,	6,	7,	8,	9,	18,	26,	54,	26,	18,	10,	9,	8,	7,	4},
			{7,	24,	15,	23,	2,	6,	7,	8,	9,	18,	26,	55,	26,	18,	10,	9,	8,	7,	4},
			{8,	24,	15,	24,	2,	6,	7,	8,	9,	18,	27,	56,	27,	18,	10,	9,	8,	7,	4},
			{9,	24,	15,	25,	2,	6,	7,	8,	9,	18,	27,	57,	27,	18,	10,	9,	8,	7,	4},
			{10,	24,	15,	26,	2,	6,	7,	8,	9,	18,	27,	58,	27,	18,	10,	9,	8,	7,	4},
			{11,	24,	15,	27,	2,	6,	7,	8,	9,	18,	27,	59,	27,	18,	10,	9,	8,	7,	4},
			{12,	24,	15,	28,	2,	6,	7,	8,	9,	18,	27,	60,	27,	18,	10,	9,	8,	7,	4},
			{13,	24,	15,	29,	2,	6,	7,	8,	9,	18,	27,	61,	27,	18,	10,	9,	8,	7,	4},
			{14,	24,	15,	30,	2,	6,	7,	8,	9,	18,	27,	62,	27,	18,	10,	9,	8,	7,	4},
			{15,	24,	15,	31,	2,	6,	7,	8,	9,	18,	27,	63,	27,	18,	10,	9,	8,	7,	4},
			{16,	24,	15,	16,	2,	6,	7,	8,	9,	19,	26,	48,	26,	19,	10,	9,	8,	7,	4},
			{17,	24,	15,	17,	2,	6,	7,	8,	9,	19,	26,	49,	26,	19,	10,	9,	8,	7,	4},
			{18,	24,	15,	18,	2,	6,	7,	8,	9,	19,	26,	50,	26,	19,	10,	9,	8,	7,	4},
			{19,	24,	15,	19,	2,	6,	7,	8,	9,	19,	26,	51,	26,	19,	10,	9,	8,	7,	4},
			{20,	24,	15,	20,	2,	6,	7,	8,	9,	19,	26,	52,	26,	19,	10,	9,	8,	7,	4},
			{21,	24,	15,	21,	2,	6,	7,	8,	9,	19,	26,	53,	26,	19,	10,	9,	8,	7,	4},
			{22,	24,	15,	22,	2,	6,	7,	8,	9,	19,	26,	54,	26,	19,	10,	9,	8,	7,	4},
			{23,	24,	15,	23,	2,	6,	7,	8,	9,	19,	26,	55,	26,	19,	10,	9,	8,	7,	4},
			{24,	24,	15,	24,	2,	6,	7,	8,	9,	19,	27,	56,	27,	19,	10,	9,	8,	7,	4},
			{25,	24,	15,	25,	2,	6,	7,	8,	9,	19,	27,	57,	27,	19,	10,	9,	8,	7,	4},
			{26,	24,	15,	26,	2,	6,	7,	8,	9,	19,	27,	58,	27,	19,	10,	9,	8,	7,	4},
			{27,	24,	15,	27,	2,	6,	7,	8,	9,	19,	27,	59,	27,	19,	10,	9,	8,	7,	4},
			{28,	24,	15,	28,	2,	6,	7,	8,	9,	19,	27,	60,	27,	19,	10,	9,	8,	7,	4},
			{29,	24,	15,	29,	2,	6,	7,	8,	9,	19,	27,	61,	27,	19,	10,	9,	8,	7,	4},
			{30,	24,	15,	30,	2,	6,	7,	8,	9,	19,	27,	62,	27,	19,	10,	9,	8,	7,	4},
			{31,	24,	15,	31,	2,	6,	7,	8,	9,	19,	27,	63,	27,	19,	10,	9,	8,	7,	4},
			{32,	42,	15,	16,	4,	7,	8,	9,	10,	18,	26,	48,	26,	18,	9,	8,	7,	6,	2},
			{33,	42,	15,	17,	4,	7,	8,	9,	10,	18,	26,	49,	26,	18,	9,	8,	7,	6,	2},
			{34,	42,	15,	18,	4,	7,	8,	9,	10,	18,	26,	50,	26,	18,	9,	8,	7,	6,	2},
			{35,	42,	15,	19,	4,	7,	8,	9,	10,	18,	26,	51,	26,	18,	9,	8,	7,	6,	2},
			{36,	42,	15,	20,	4,	7,	8,	9,	10,	18,	26,	52,	26,	18,	9,	8,	7,	6,	2},
			{37,	42,	15,	21,	4,	7,	8,	9,	10,	18,	26,	53,	26,	18,	9,	8,	7,	6,	2},
			{38,	42,	15,	22,	4,	7,	8,	9,	10,	18,	26,	54,	26,	18,	9,	8,	7,	6,	2},
			{39,	42,	15,	23,	4,	7,	8,	9,	10,	18,	26,	55,	26,	18,	9,	8,	7,	6,	2},
			{40,	42,	15,	24,	4,	7,	8,	9,	10,	18,	27,	56,	27,	18,	9,	8,	7,	6,	2},
			{41,	42,	15,	25,	4,	7,	8,	9,	10,	18,	27,	57,	27,	18,	9,	8,	7,	6,	2},
			{42,	42,	15,	26,	4,	7,	8,	9,	10,	18,	27,	58,	27,	18,	9,	8,	7,	6,	2},
			{43,	42,	15,	27,	4,	7,	8,	9,	10,	18,	27,	59,	27,	18,	9,	8,	7,	6,	2},
			{44,	42,	15,	28,	4,	7,	8,	9,	10,	18,	27,	60,	27,	18,	9,	8,	7,	6,	2},
			{45,	42,	15,	29,	4,	7,	8,	9,	10,	18,	27,	61,	27,	18,	9,	8,	7,	6,	2},
			{46,	42,	15,	30,	4,	7,	8,	9,	10,	18,	27,	62,	27,	18,	9,	8,	7,	6,	2},
			{47,	42,	15,	31,	4,	7,	8,	9,	10,	18,	27,	63,	27,	18,	9,	8,	7,	6,	2},
			{48,	42,	15,	16,	4,	7,	8,	9,	10,	19,	26,	48,	26,	19,	9,	8,	7,	6,	2},
			{49,	42,	15,	17,	4,	7,	8,	9,	10,	19,	26,	49,	26,	19,	9,	8,	7,	6,	2},
			{50,	42,	15,	18,	4,	7,	8,	9,	10,	19,	26,	50,	26,	19,	9,	8,	7,	6,	2},
			{51,	42,	15,	19,	4,	7,	8,	9,	10,	19,	26,	51,	26,	19,	9,	8,	7,	6,	2},
			{52,	42,	15,	20,	4,	7,	8,	9,	10,	19,	26,	52,	26,	19,	9,	8,	7,	6,	2},
			{53,	42,	15,	21,	4,	7,	8,	9,	10,	19,	26,	53,	26,	19,	9,	8,	7,	6,	2},
			{54,	42,	15,	22,	4,	7,	8,	9,	10,	19,	26,	54,	26,	19,	9,	8,	7,	6,	2},
			{55,	42,	15,	23,	4,	7,	8,	9,	10,	19,	26,	55,	26,	19,	9,	8,	7,	6,	2},
			{56,	42,	15,	24,	4,	7,	8,	9,	10,	19,	27,	56,	27,	19,	9,	8,	7,	6,	2},
			{57,	42,	15,	25,	4,	7,	8,	9,	10,	19,	27,	57,	27,	19,	9,	8,	7,	6,	2},
			{58,	42,	15,	26,	4,	7,	8,	9,	10,	19,	27,	58,	27,	19,	9,	8,	7,	6,	2},
			{59,	42,	15,	27,	4,	7,	8,	9,	10,	19,	27,	59,	27,	19,	9,	8,	7,	6,	2},
			{60,	42,	15,	28,	4,	7,	8,	9,	10,	19,	27,	60,	27,	19,	9,	8,	7,	6,	2},
			{61,	42,	15,	29,	4,	7,	8,	9,	10,	19,	27,	61,	27,	19,	9,	8,	7,	6,	2},
			{62,	42,	15,	30,	4,	7,	8,	9,	10,	19,	27,	62,	27,	19,	9,	8,	7,	6,	2},
			{63,	42,	15,	31,	4,	7,	8,	9,	10,	19,	27,	63,	27,	19,	9,	8,	7,	6,	2},
			{64,	25,	15,	16,	2,	6,	7,	8,	9,	18,	26,	48,	26,	18,	9,	8,	7,	6,	5},
			{65,	25,	15,	17,	2,	6,	7,	8,	9,	18,	26,	49,	26,	18,	9,	8,	7,	6,	5},
			{66,	25,	15,	18,	2,	6,	7,	8,	9,	18,	26,	50,	26,	18,	9,	8,	7,	6,	5},
			{67,	25,	15,	19,	2,	6,	7,	8,	9,	18,	26,	51,	26,	18,	9,	8,	7,	6,	5},
			{68,	25,	15,	20,	2,	6,	7,	8,	9,	18,	26,	52,	26,	18,	9,	8,	7,	6,	5},
			{69,	25,	15,	21,	2,	6,	7,	8,	9,	18,	26,	53,	26,	18,	9,	8,	7,	6,	5},
			{70,	25,	15,	22,	2,	6,	7,	8,	9,	18,	26,	54,	26,	18,	9,	8,	7,	6,	5},
			{71,	25,	15,	23,	2,	6,	7,	8,	9,	18,	26,	55,	26,	18,	9,	8,	7,	6,	5},
			{72,	25,	15,	24,	2,	6,	7,	8,	9,	18,	27,	56,	27,	18,	9,	8,	7,	6,	5},
			{73,	25,	15,	25,	2,	6,	7,	8,	9,	18,	27,	57,	27,	18,	9,	8,	7,	6,	5},
			{74,	25,	15,	26,	2,	6,	7,	8,	9,	18,	27,	58,	27,	18,	9,	8,	7,	6,	5},
			{75,	25,	15,	27,	2,	6,	7,	8,	9,	18,	27,	59,	27,	18,	9,	8,	7,	6,	5},
			{76,	25,	15,	28,	2,	6,	7,	8,	9,	18,	27,	60,	27,	18,	9,	8,	7,	6,	5},
			{77,	25,	15,	29,	2,	6,	7,	8,	9,	18,	27,	61,	27,	18,	9,	8,	7,	6,	5},
			{78,	25,	15,	30,	2,	6,	7,	8,	9,	18,	27,	62,	27,	18,	9,	8,	7,	6,	5},
			{79,	25,	15,	31,	2,	6,	7,	8,	9,	18,	27,	63,	27,	18,	9,	8,	7,	6,	5},
			{80,	25,	15,	16,	2,	6,	7,	8,	9,	19,	26,	48,	26,	19,	9,	8,	7,	6,	5},
			{81,	25,	15,	17,	2,	6,	7,	8,	9,	19,	26,	49,	26,	19,	9,	8,	7,	6,	5},
			{82,	25,	15,	18,	2,	6,	7,	8,	9,	19,	26,	50,	26,	19,	9,	8,	7,	6,	5},
			{83,	25,	15,	19,	2,	6,	7,	8,	9,	19,	26,	51,	26,	19,	9,	8,	7,	6,	5},
			{84,	25,	15,	20,	2,	6,	7,	8,	9,	19,	26,	52,	26,	19,	9,	8,	7,	6,	5},
			{85,	25,	15,	21,	2,	6,	7,	8,	9,	19,	26,	53,	26,	19,	9,	8,	7,	6,	5},
			{86,	25,	15,	22,	2,	6,	7,	8,	9,	19,	26,	54,	26,	19,	9,	8,	7,	6,	5},
			{87,	25,	15,	23,	2,	6,	7,	8,	9,	19,	26,	55,	26,	19,	9,	8,	7,	6,	5},
			{88,	25,	15,	24,	2,	6,	7,	8,	9,	19,	27,	56,	27,	19,	9,	8,	7,	6,	5},
			{89,	25,	15,	25,	2,	6,	7,	8,	9,	19,	27,	57,	27,	19,	9,	8,	7,	6,	5},
			{90,	25,	15,	26,	2,	6,	7,	8,	9,	19,	27,	58,	27,	19,	9,	8,	7,	6,	5},
			{91,	25,	15,	27,	2,	6,	7,	8,	9,	19,	27,	59,	27,	19,	9,	8,	7,	6,	5},
			{92,	25,	15,	28,	2,	6,	7,	8,	9,	19,	27,	60,	27,	19,	9,	8,	7,	6,	5},
			{93,	25,	15,	29,	2,	6,	7,	8,	9,	19,	27,	61,	27,	19,	9,	8,	7,	6,	5},
			{94,	25,	15,	30,	2,	6,	7,	8,	9,	19,	27,	62,	27,	19,	9,	8,	7,	6,	5},
			{95,	25,	15,	31,	2,	6,	7,	8,	9,	19,	27,	63,	27,	19,	9,	8,	7,	6,	5},
			{96,	54,	15,	16,	5,	6,	7,	8,	9,	18,	26,	48,	26,	18,	10,	9,	8,	7,	4},
			{97,	54,	15,	17,	5,	6,	7,	8,	9,	18,	26,	49,	26,	18,	10,	9,	8,	7,	4},
			{98,	54,	15,	18,	5,	6,	7,	8,	9,	18,	26,	50,	26,	18,	10,	9,	8,	7,	4},
			{99,	54,	15,	19,	5,	6,	7,	8,	9,	18,	26,	51,	26,	18,	10,	9,	8,	7,	4},
			{100,	54,	15,	20,	5,	6,	7,	8,	9,	18,	26,	52,	26,	18,	10,	9,	8,	7,	4},
			{101,	54,	15,	21,	5,	6,	7,	8,	9,	18,	26,	53,	26,	18,	10,	9,	8,	7,	4},
			{102,	54,	15,	22,	5,	6,	7,	8,	9,	18,	26,	54,	26,	18,	10,	9,	8,	7,	4},
			{103,	54,	15,	23,	5,	6,	7,	8,	9,	18,	26,	55,	26,	18,	10,	9,	8,	7,	4},
			{104,	54,	15,	24,	5,	6,	7,	8,	9,	18,	27,	56,	27,	18,	10,	9,	8,	7,	4},
			{105,	54,	15,	25,	5,	6,	7,	8,	9,	18,	27,	57,	27,	18,	10,	9,	8,	7,	4},
			{106,	54,	15,	26,	5,	6,	7,	8,	9,	18,	27,	58,	27,	18,	10,	9,	8,	7,	4},
			{107,	54,	15,	27,	5,	6,	7,	8,	9,	18,	27,	59,	27,	18,	10,	9,	8,	7,	4},
			{108,	54,	15,	28,	5,	6,	7,	8,	9,	18,	27,	60,	27,	18,	10,	9,	8,	7,	4},
			{109,	54,	15,	29,	5,	6,	7,	8,	9,	18,	27,	61,	27,	18,	10,	9,	8,	7,	4},
			{110,	54,	15,	30,	5,	6,	7,	8,	9,	18,	27,	62,	27,	18,	10,	9,	8,	7,	4},
			{111,	54,	15,	31,	5,	6,	7,	8,	9,	18,	27,	63,	27,	18,	10,	9,	8,	7,	4},
			{112,	54,	15,	16,	5,	6,	7,	8,	9,	19,	26,	48,	26,	19,	10,	9,	8,	7,	4},
			{113,	54,	15,	17,	5,	6,	7,	8,	9,	19,	26,	49,	26,	19,	10,	9,	8,	7,	4},
			{114,	54,	15,	18,	5,	6,	7,	8,	9,	19,	26,	50,	26,	19,	10,	9,	8,	7,	4},
			{115,	54,	15,	19,	5,	6,	7,	8,	9,	19,	26,	51,	26,	19,	10,	9,	8,	7,	4},
			{116,	54,	15,	20,	5,	6,	7,	8,	9,	19,	26,	52,	26,	19,	10,	9,	8,	7,	4},
			{117,	54,	15,	21,	5,	6,	7,	8,	9,	19,	26,	53,	26,	19,	10,	9,	8,	7,	4},
			{118,	54,	15,	22,	5,	6,	7,	8,	9,	19,	26,	54,	26,	19,	10,	9,	8,	7,	4},
			{119,	54,	15,	23,	5,	6,	7,	8,	9,	19,	26,	55,	26,	19,	10,	9,	8,	7,	4},
			{120,	54,	15,	24,	5,	6,	7,	8,	9,	19,	27,	56,	27,	19,	10,	9,	8,	7,	4},
			{121,	54,	15,	25,	5,	6,	7,	8,	9,	19,	27,	57,	27,	19,	10,	9,	8,	7,	4},
			{122,	54,	15,	26,	5,	6,	7,	8,	9,	19,	27,	58,	27,	19,	10,	9,	8,	7,	4},
			{123,	54,	15,	27,	5,	6,	7,	8,	9,	19,	27,	59,	27,	19,	10,	9,	8,	7,	4},
			{124,	54,	15,	28,	5,	6,	7,	8,	9,	19,	27,	60,	27,	19,	10,	9,	8,	7,	4},
			{125,	54,	15,	29,	5,	6,	7,	8,	9,	19,	27,	61,	27,	19,	10,	9,	8,	7,	4},
			{126,	54,	15,	30,	5,	6,	7,	8,	9,	19,	27,	62,	27,	19,	10,	9,	8,	7,	4},
			{127,	54,	15,	31,	5,	6,	7,	8,	9,	19,	27,	63,	27,	19,	10,	9,	8,	7,	4}

	
	};
	
	return P15;
};

public static int[][] Path17()
{
	//These are the paths that have 17 nodes end-to-end {path#,source&destination,server#,0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16}
	int[][] P17 = {

			{0,	25,	17,	16,	2,	6,	7,	8,	9,	10,	18,	26,	48,	26,	18,	10,	9,	8,	7,	6,	5},
			{1,	25,	17,	17,	2,	6,	7,	8,	9,	10,	18,	26,	49,	26,	18,	10,	9,	8,	7,	6,	5},
			{2,	25,	17,	18,	2,	6,	7,	8,	9,	10,	18,	26,	50,	26,	18,	10,	9,	8,	7,	6,	5},
			{3,	25,	17,	19,	2,	6,	7,	8,	9,	10,	18,	26,	51,	26,	18,	10,	9,	8,	7,	6,	5},
			{4,	25,	17,	20,	2,	6,	7,	8,	9,	10,	18,	26,	52,	26,	18,	10,	9,	8,	7,	6,	5},
			{5,	25,	17,	21,	2,	6,	7,	8,	9,	10,	18,	26,	53,	26,	18,	10,	9,	8,	7,	6,	5},
			{6,	25,	17,	22,	2,	6,	7,	8,	9,	10,	18,	26,	54,	26,	18,	10,	9,	8,	7,	6,	5},
			{7,	25,	17,	23,	2,	6,	7,	8,	9,	10,	18,	26,	55,	26,	18,	10,	9,	8,	7,	6,	5},
			{8,	25,	17,	24,	2,	6,	7,	8,	9,	10,	18,	27,	56,	27,	18,	10,	9,	8,	7,	6,	5},
			{9,	25,	17,	25,	2,	6,	7,	8,	9,	10,	18,	27,	57,	27,	18,	10,	9,	8,	7,	6,	5},
			{10,	25,	17,	26,	2,	6,	7,	8,	9,	10,	18,	27,	58,	27,	18,	10,	9,	8,	7,	6,	5},
			{11,	25,	17,	27,	2,	6,	7,	8,	9,	10,	18,	27,	59,	27,	18,	10,	9,	8,	7,	6,	5},
			{12,	25,	17,	28,	2,	6,	7,	8,	9,	10,	18,	27,	60,	27,	18,	10,	9,	8,	7,	6,	5},
			{13,	25,	17,	29,	2,	6,	7,	8,	9,	10,	18,	27,	61,	27,	18,	10,	9,	8,	7,	6,	5},
			{14,	25,	17,	30,	2,	6,	7,	8,	9,	10,	18,	27,	62,	27,	18,	10,	9,	8,	7,	6,	5},
			{15,	25,	17,	31,	2,	6,	7,	8,	9,	10,	18,	27,	63,	27,	18,	10,	9,	8,	7,	6,	5},
			{16,	25,	17,	16,	2,	6,	7,	8,	9,	10,	19,	26,	48,	26,	19,	10,	9,	8,	7,	6,	5},
			{17,	25,	17,	17,	2,	6,	7,	8,	9,	10,	19,	26,	49,	26,	19,	10,	9,	8,	7,	6,	5},
			{18,	25,	17,	18,	2,	6,	7,	8,	9,	10,	19,	26,	50,	26,	19,	10,	9,	8,	7,	6,	5},
			{19,	25,	17,	19,	2,	6,	7,	8,	9,	10,	19,	26,	51,	26,	19,	10,	9,	8,	7,	6,	5},
			{20,	25,	17,	20,	2,	6,	7,	8,	9,	10,	19,	26,	52,	26,	19,	10,	9,	8,	7,	6,	5},
			{21,	25,	17,	21,	2,	6,	7,	8,	9,	10,	19,	26,	53,	26,	19,	10,	9,	8,	7,	6,	5},
			{22,	25,	17,	22,	2,	6,	7,	8,	9,	10,	19,	26,	54,	26,	19,	10,	9,	8,	7,	6,	5},
			{23,	25,	17,	23,	2,	6,	7,	8,	9,	10,	19,	26,	55,	26,	19,	10,	9,	8,	7,	6,	5},
			{24,	25,	17,	24,	2,	6,	7,	8,	9,	10,	19,	27,	56,	27,	19,	10,	9,	8,	7,	6,	5},
			{25,	25,	17,	25,	2,	6,	7,	8,	9,	10,	19,	27,	57,	27,	19,	10,	9,	8,	7,	6,	5},
			{26,	25,	17,	26,	2,	6,	7,	8,	9,	10,	19,	27,	58,	27,	19,	10,	9,	8,	7,	6,	5},
			{27,	25,	17,	27,	2,	6,	7,	8,	9,	10,	19,	27,	59,	27,	19,	10,	9,	8,	7,	6,	5},
			{28,	25,	17,	28,	2,	6,	7,	8,	9,	10,	19,	27,	60,	27,	19,	10,	9,	8,	7,	6,	5},
			{29,	25,	17,	29,	2,	6,	7,	8,	9,	10,	19,	27,	61,	27,	19,	10,	9,	8,	7,	6,	5},
			{30,	25,	17,	30,	2,	6,	7,	8,	9,	10,	19,	27,	62,	27,	19,	10,	9,	8,	7,	6,	5},
			{31,	25,	17,	31,	2,	6,	7,	8,	9,	10,	19,	27,	63,	27,	19,	10,	9,	8,	7,	6,	5},
			{32,	25,	17,	48,	2,	6,	7,	8,	9,	10,	22,	30,	80,	30,	22,	10,	9,	8,	7,	6,	5},
			{33,	25,	17,	49,	2,	6,	7,	8,	9,	10,	22,	30,	81,	30,	22,	10,	9,	8,	7,	6,	5},
			{34,	25,	17,	50,	2,	6,	7,	8,	9,	10,	22,	30,	82,	30,	22,	10,	9,	8,	7,	6,	5},
			{35,	25,	17,	51,	2,	6,	7,	8,	9,	10,	22,	30,	83,	30,	22,	10,	9,	8,	7,	6,	5},
			{36,	25,	17,	52,	2,	6,	7,	8,	9,	10,	22,	30,	84,	30,	22,	10,	9,	8,	7,	6,	5},
			{37,	25,	17,	53,	2,	6,	7,	8,	9,	10,	22,	30,	85,	30,	22,	10,	9,	8,	7,	6,	5},
			{38,	25,	17,	54,	2,	6,	7,	8,	9,	10,	22,	30,	86,	30,	22,	10,	9,	8,	7,	6,	5},
			{39,	25,	17,	55,	2,	6,	7,	8,	9,	10,	22,	30,	87,	30,	22,	10,	9,	8,	7,	6,	5},
			{40,	25,	17,	56,	2,	6,	7,	8,	9,	10,	22,	31,	88,	31,	22,	10,	9,	8,	7,	6,	5},
			{41,	25,	17,	57,	2,	6,	7,	8,	9,	10,	22,	31,	89,	31,	22,	10,	9,	8,	7,	6,	5},
			{42,	25,	17,	58,	2,	6,	7,	8,	9,	10,	22,	31,	90,	31,	22,	10,	9,	8,	7,	6,	5},
			{43,	25,	17,	59,	2,	6,	7,	8,	9,	10,	22,	31,	91,	31,	22,	10,	9,	8,	7,	6,	5},
			{44,	25,	17,	60,	2,	6,	7,	8,	9,	10,	22,	31,	92,	31,	22,	10,	9,	8,	7,	6,	5},
			{45,	25,	17,	61,	2,	6,	7,	8,	9,	10,	22,	31,	93,	31,	22,	10,	9,	8,	7,	6,	5},
			{46,	25,	17,	62,	2,	6,	7,	8,	9,	10,	22,	31,	94,	31,	22,	10,	9,	8,	7,	6,	5},
			{47,	25,	17,	63,	2,	6,	7,	8,	9,	10,	22,	31,	95,	31,	22,	10,	9,	8,	7,	6,	5},
			{48,	25,	17,	48,	2,	6,	7,	8,	9,	10,	23,	30,	80,	30,	23,	10,	9,	8,	7,	6,	5},
			{49,	25,	17,	49,	2,	6,	7,	8,	9,	10,	23,	30,	81,	30,	23,	10,	9,	8,	7,	6,	5},
			{50,	25,	17,	50,	2,	6,	7,	8,	9,	10,	23,	30,	82,	30,	23,	10,	9,	8,	7,	6,	5},
			{51,	25,	17,	51,	2,	6,	7,	8,	9,	10,	23,	30,	83,	30,	23,	10,	9,	8,	7,	6,	5},
			{52,	25,	17,	52,	2,	6,	7,	8,	9,	10,	23,	30,	84,	30,	23,	10,	9,	8,	7,	6,	5},
			{53,	25,	17,	53,	2,	6,	7,	8,	9,	10,	23,	30,	85,	30,	23,	10,	9,	8,	7,	6,	5},
			{54,	25,	17,	54,	2,	6,	7,	8,	9,	10,	23,	30,	86,	30,	23,	10,	9,	8,	7,	6,	5},
			{55,	25,	17,	55,	2,	6,	7,	8,	9,	10,	23,	30,	87,	30,	23,	10,	9,	8,	7,	6,	5},
			{56,	25,	17,	56,	2,	6,	7,	8,	9,	10,	23,	31,	88,	31,	23,	10,	9,	8,	7,	6,	5},
			{57,	25,	17,	57,	2,	6,	7,	8,	9,	10,	23,	31,	89,	31,	23,	10,	9,	8,	7,	6,	5},
			{58,	25,	17,	58,	2,	6,	7,	8,	9,	10,	23,	31,	90,	31,	23,	10,	9,	8,	7,	6,	5},
			{59,	25,	17,	59,	2,	6,	7,	8,	9,	10,	23,	31,	91,	31,	23,	10,	9,	8,	7,	6,	5},
			{60,	25,	17,	60,	2,	6,	7,	8,	9,	10,	23,	31,	92,	31,	23,	10,	9,	8,	7,	6,	5},
			{61,	25,	17,	61,	2,	6,	7,	8,	9,	10,	23,	31,	93,	31,	23,	10,	9,	8,	7,	6,	5},
			{62,	25,	17,	62,	2,	6,	7,	8,	9,	10,	23,	31,	94,	31,	23,	10,	9,	8,	7,	6,	5},
			{63,	25,	17,	63,	2,	6,	7,	8,	9,	10,	23,	31,	95,	31,	23,	10,	9,	8,	7,	6,	5}

	};
	
	return P17;
};

public static double[][] Scores()
{
	// this is the servers capacity matrix
	double[][] Servers_Cores = {
			{0,	1},
			{1,	1},
			{2,	1},
			{3,	1},
			{4,	1},
			{5,	1},
			{6,	1},
			{7,	1},
			{8,	1},
			{9,	1},
			{10,	1},
			{11,	1},
			{12,	1},
			{13,	1},
			{14,	1},
			{15,	1},
			{16,	1},
			{17,	1},
			{18,	1},
			{19,	1},
			{20,	1},
			{21,	1},
			{22,	1},
			{23,	1},
			{24,	1},
			{25,	1},
			{26,	1},
			{27,	1},
			{28,	1},
			{29,	1},
			{30,	1},
			{31,	1},
			{32,	1},
			{33,	1},
			{34,	1},
			{35,	1},
			{36,	1},
			{37,	1},
			{38,	1},
			{39,	1},
			{40,	1},
			{41,	1},
			{42,	1},
			{43,	1},
			{44,	1},
			{45,	1},
			{46,	1},
			{47,	1},
			{48,	1},
			{49,	1},
			{50,	1},
			{51,	1},
			{52,	1},
			{53,	1},
			{54,	1},
			{55,	1},
			{56,	1},
			{57,	1},
			{58,	1},
			{59,	1},
			{60,	1},
			{61,	1},
			{62,	1},
			{63,	1},
};
	
	return Servers_Cores;
	
};

public static double[][] Sfunction1()
{
	// These are the SFCs that has 1 VNF, format: {SCF#, type# , source , destination, BW , Delay , VNF1 cores}
	double[][] SFC1 = {
			
			{0,	1,	01,	100,	1,	4,	0.00012},
			{1,	1,	02,	150,	1,	4,	0.00012},
			{2,	1,	03,	200,	1,	4,	0.00012},
			{3,	1,	04,	250,	1,	4,	0.00012},
			{4,	1,	05,	300,	1,	4,	0.00012},
			{5,	1,	10,	100,	1,	4,	0.00012},
			{6,	1,	12,	150,	1,	4,	0.00012},
			{7,	1,	13,	200,	1,	4,	0.00012},
			{8,	1,	14,	250,	1,	4,	0.00012},
			{9,	1,	15,	300,	1,	4,	0.00012},
			{10,	1,	20,	100,	1,	4,	0.00012},
			{11,	1,	21,	150,	1,	4,	0.00012},
			{12,	1,	23,	200,	1,	4,	0.00012},
			{13,	1,	24,	250,	1,	4,	0.00012},
			{14,	1,	25,	300,	1,	4,	0.00012},
			{15,	1,	30,	100,	1,	4,	0.00012},
			{16,	1,	31,	150,	1,	4,	0.00012},
			{17,	1,	32,	200,	1,	4,	0.00012},
			{18,	1,	34,	100,	1,	4,	0.00012},
			{19,	1,	35,	150,	1,	4,	0.00012},
			{20,	1,	40,	200,	1,	4,	0.00012},
			{21,	1,	41,	250,	1,	4,	0.00012},
			{22,	1,	42,	300,	1,	4,	0.00012},
			{23,	1,	43,	100,	1,	4,	0.00012},
			{24,	1,	45,	150,	1,	4,	0.00012},
			{25,	1,	50,	200,	1,	4,	0.00012},
			{26,	1,	51,	250,	1,	4,	0.00012},
			{27,	1,	52,	300,	1,	4,	0.00012},
			{28,	1,	53,	100,	1,	4,	0.00012},
			{29,	1,	54,	150,	1,	4,	0.00012},
			{30,	1,	01,	200,	1,	4,	0.00012},
			{31,	1,	02,	250,	1,	4,	0.00012},
			{32,	1,	03,	300,	1,	4,	0.00012},
			{33,	1,	04,	100,	1,	4,	0.00012},
			{34,	1,	05,	150,	1,	4,	0.00012},
			{35,	1,	10,	200,	1,	4,	0.00012},
			{36,	1,	12,	100,	1,	4,	0.00012},
			{37,	1,	13,	150,	1,	4,	0.00012},
			{38,	1,	14,	200,	1,	4,	0.00012},
			{39,	1,	15,	250,	1,	4,	0.00012},
			{40,	1,	20,	300,	1,	4,	0.00012},
			{41,	1,	21,	100,	1,	4,	0.00012},
			{42,	1,	23,	150,	1,	4,	0.00012},
			{43,	1,	24,	200,	1,	4,	0.00012},
			{44,	1,	25,	250,	1,	4,	0.00012},
			{45,	1,	30,	300,	1,	4,	0.00012},
			{46,	1,	31,	100,	1,	4,	0.00012},
			{47,	1,	32,	150,	1,	4,	0.00012},
			{48,	1,	34,	200,	1,	4,	0.00012},
			{49,	1,	35,	250,	1,	4,	0.00012},
			{50,	1,	40,	300,	1,	4,	0.00012},
			{51,	1,	41,	100,	1,	4,	0.00012},
			{52,	1,	42,	150,	1,	4,	0.00012},
			{53,	1,	43,	200,	1,	4,	0.00012},
			{54,	1,	45,	100,	1,	4,	0.00012},
			{55,	1,	50,	150,	1,	4,	0.00012},
			{56,	1,	51,	200,	1,	4,	0.00012},
			{57,	1,	52,	250,	1,	4,	0.00012},
			{58,	1,	53,	300,	1,	4,	0.00012},
			{59,	1,	54,	100,	1,	4,	0.00012},
			{60,	1,	01,	150,	1,	4,	0.00012},
			{61,	1,	02,	200,	1,	4,	0.00012},
			{62,	1,	03,	250,	1,	4,	0.00012},
			{63,	1,	04,	300,	1,	4,	0.00012},
			{64,	1,	05,	100,	1,	4,	0.00012},
			{65,	1,	10,	150,	1,	4,	0.00012},
			{66,	1,	12,	200,	1,	4,	0.00012},
			{67,	1,	13,	250,	1,	4,	0.00012},
			{68,	1,	14,	300,	1,	4,	0.00012},
			{69,	1,	15,	100,	1,	4,	0.00012},
			{70,	1,	20,	150,	1,	4,	0.00012},
			{71,	1,	21,	200,	1,	4,	0.00012},
			{72,	1,	23,	100,	1,	4,	0.00012},
			{73,	1,	24,	150,	1,	4,	0.00012},
			{74,	1,	25,	200,	1,	4,	0.00012},
			{75,	1,	30,	250,	1,	4,	0.00012},
			{76,	1,	31,	300,	1,	4,	0.00012},
			{77,	1,	32,	100,	1,	4,	0.00012},
			{78,	1,	34,	150,	1,	4,	0.00012},
			{79,	1,	35,	200,	1,	4,	0.00012},
			{80,	1,	40,	250,	1,	4,	0.00012},
			{81,	1,	41,	300,	1,	4,	0.00012},
			{82,	1,	42,	100,	1,	4,	0.00012},
			{83,	1,	43,	150,	1,	4,	0.00012},
			{84,	1,	45,	200,	1,	4,	0.00012},
			{85,	1,	50,	250,	1,	4,	0.00012},
			{86,	1,	51,	300,	1,	4,	0.00012},
			{87,	1,	52,	100,	1,	4,	0.00012},
			{88,	1,	53,	150,	1,	4,	0.00012},
			{89,	1,	54,	200,	1,	4,	0.00012},
			{90,	1,	01,	100,	1,	4,	0.00012},
			{91,	1,	02,	150,	1,	4,	0.00012},
			{92,	1,	03,	200,	1,	4,	0.00012},
			{93,	1,	04,	250,	1,	4,	0.00012},
			{94,	1,	05,	300,	1,	4,	0.00012},
			{95,	1,	10,	100,	1,	4,	0.00012},
			{96,	1,	12,	150,	1,	4,	0.00012},
			{97,	1,	13,	200,	1,	4,	0.00012},
			{98,	1,	14,	250,	1,	4,	0.00012},
			{99,	1,	15,	300,	1,	4,	0.00012},
			{100,	1,	20,	100,	1,	4,	0.00012},
			{101,	1,	21,	150,	1,	4,	0.00012},
			{102,	1,	23,	200,	1,	4,	0.00012},
			{103,	1,	24,	250,	1,	4,	0.00012},
			{104,	1,	25,	300,	1,	4,	0.00012},
			{105,	1,	30,	100,	1,	4,	0.00012},
			{106,	1,	31,	150,	1,	4,	0.00012},
			{107,	1,	32,	200,	1,	4,	0.00012},
			{108,	1,	34,	100,	1,	4,	0.00012},
			{109,	1,	35,	150,	1,	4,	0.00012},
			{110,	1,	40,	200,	1,	4,	0.00012},
			{111,	1,	41,	250,	1,	4,	0.00012},
			{112,	1,	42,	300,	1,	4,	0.00012},
			{113,	1,	43,	100,	1,	4,	0.00012},
			{114,	1,	45,	150,	1,	4,	0.00012},
			{115,	1,	50,	200,	1,	4,	0.00012},
			{116,	1,	51,	250,	1,	4,	0.00012},
			{117,	1,	52,	300,	1,	4,	0.00012},
			{118,	1,	53,	100,	1,	4,	0.00012},
			{119,	1,	54,	150,	1,	4,	0.00012},
			{120,	1,	01,	200,	1,	4,	0.00012},
			{121,	1,	02,	250,	1,	4,	0.00012},
			{122,	1,	03,	300,	1,	4,	0.00012},
			{123,	1,	04,	100,	1,	4,	0.00012},
			{124,	1,	05,	150,	1,	4,	0.00012},
			{125,	1,	10,	200,	1,	4,	0.00012},
			{126,	1,	12,	100,	1,	4,	0.00012},
			{127,	1,	13,	150,	1,	4,	0.00012},
			{128,	1,	14,	200,	1,	4,	0.00012},
			{129,	1,	15,	250,	1,	4,	0.00012},
			{130,	1,	20,	300,	1,	4,	0.00012},
			{131,	1,	21,	100,	1,	4,	0.00012},
			{132,	1,	23,	150,	1,	4,	0.00012},
			{133,	1,	24,	200,	1,	4,	0.00012},
			{134,	1,	25,	250,	1,	4,	0.00012},
			{135,	1,	30,	300,	1,	4,	0.00012},
			{136,	1,	31,	100,	1,	4,	0.00012},
			{137,	1,	32,	150,	1,	4,	0.00012},
			{138,	1,	34,	200,	1,	4,	0.00012},
			{139,	1,	35,	250,	1,	4,	0.00012},
			{140,	1,	40,	300,	1,	4,	0.00012},
			{141,	1,	41,	100,	1,	4,	0.00012},
			{142,	1,	42,	150,	1,	4,	0.00012},
			{143,	1,	43,	200,	1,	4,	0.00012},
			{144,	1,	45,	100,	1,	4,	0.00012},
			{145,	1,	50,	150,	1,	4,	0.00012},
			{146,	1,	51,	200,	1,	4,	0.00012},
			{147,	1,	52,	250,	1,	4,	0.00012},
			{148,	1,	53,	300,	1,	4,	0.00012},
			{149,	1,	54,	100,	1,	4,	0.00012},
			{150,	1,	01,	150,	1,	4,	0.00012},
			{151,	1,	02,	200,	1,	4,	0.00012},
			{152,	1,	03,	250,	1,	4,	0.00012},
			{153,	1,	04,	300,	1,	4,	0.00012},
			{154,	1,	05,	100,	1,	4,	0.00012},
			{155,	1,	10,	150,	1,	4,	0.00012},
			{156,	1,	12,	200,	1,	4,	0.00012},
			{157,	1,	13,	250,	1,	4,	0.00012},
			{158,	1,	14,	300,	1,	4,	0.00012},
			{159,	1,	15,	100,	1,	4,	0.00012},
			{160,	1,	20,	150,	1,	4,	0.00012},
			{161,	1,	21,	200,	1,	4,	0.00012},
			{162,	1,	23,	100,	1,	4,	0.00012},
			{163,	1,	24,	150,	1,	4,	0.00012},
			{164,	1,	25,	200,	1,	4,	0.00012},
			{165,	1,	30,	250,	1,	4,	0.00012},
			{166,	1,	31,	300,	1,	4,	0.00012},
			{167,	1,	32,	100,	1,	4,	0.00012},
			{168,	1,	34,	150,	1,	4,	0.00012},
			{169,	1,	35,	200,	1,	4,	0.00012},
			{170,	1,	40,	250,	1,	4,	0.00012},
			{171,	1,	41,	300,	1,	4,	0.00012},
			{172,	1,	42,	100,	1,	4,	0.00012},
			{173,	1,	43,	150,	1,	4,	0.00012},
			{174,	1,	45,	200,	1,	4,	0.00012},
			{175,	1,	50,	250,	1,	4,	0.00012},
			{176,	1,	51,	300,	1,	4,	0.00012},
			{177,	1,	52,	100,	1,	4,	0.00012},
			{178,	1,	53,	150,	1,	4,	0.00012},
			{179,	1,	54,	200,	1,	4,	0.00012},
			{180,	1,	01,	100,	1,	4,	0.00012},
			{181,	1,	02,	150,	1,	4,	0.00012},
			{182,	1,	03,	200,	1,	4,	0.00012},
			{183,	1,	04,	250,	1,	4,	0.00012},
			{184,	1,	05,	300,	1,	4,	0.00012},
			{185,	1,	10,	100,	1,	4,	0.00012},
			{186,	1,	12,	150,	1,	4,	0.00012},
			{187,	1,	13,	200,	1,	4,	0.00012},
			{188,	1,	14,	250,	1,	4,	0.00012},
			{189,	1,	15,	300,	1,	4,	0.00012},
			{190,	1,	20,	100,	1,	4,	0.00012},
			{191,	1,	21,	150,	1,	4,	0.00012},
			{192,	1,	23,	200,	1,	4,	0.00012},
			{193,	1,	24,	250,	1,	4,	0.00012},
			{194,	1,	25,	300,	1,	4,	0.00012},
			{195,	1,	30,	100,	1,	4,	0.00012},
			{196,	1,	31,	150,	1,	4,	0.00012},
			{197,	1,	32,	200,	1,	4,	0.00012},
			{198,	1,	34,	100,	1,	4,	0.00012},
			{199,	1,	35,	150,	1,	4,	0.00012},
			{200,	1,	40,	200,	1,	4,	0.00012},
			{201,	1,	41,	250,	1,	4,	0.00012},
			{202,	1,	42,	300,	1,	4,	0.00012},
			{203,	1,	43,	100,	1,	4,	0.00012},
			{204,	1,	45,	150,	1,	4,	0.00012},
			{205,	1,	50,	200,	1,	4,	0.00012},
			{206,	1,	51,	250,	1,	4,	0.00012},
			{207,	1,	52,	300,	1,	4,	0.00012},
			{208,	1,	53,	100,	1,	4,	0.00012},
			{209,	1,	54,	150,	1,	4,	0.00012},
			{210,	1,	01,	200,	1,	4,	0.00012},
			{211,	1,	02,	250,	1,	4,	0.00012},
			{212,	1,	03,	300,	1,	4,	0.00012},
			{213,	1,	04,	100,	1,	4,	0.00012},
			{214,	1,	05,	150,	1,	4,	0.00012},
			{215,	1,	10,	200,	1,	4,	0.00012},
			{216,	1,	12,	100,	1,	4,	0.00012},
			{217,	1,	13,	150,	1,	4,	0.00012},
			{218,	1,	14,	200,	1,	4,	0.00012},
			{219,	1,	15,	250,	1,	4,	0.00012},
			{220,	1,	20,	300,	1,	4,	0.00012},
			{221,	1,	21,	100,	1,	4,	0.00012},
			{222,	1,	23,	150,	1,	4,	0.00012},
			{223,	1,	24,	200,	1,	4,	0.00012},
			{224,	1,	25,	250,	1,	4,	0.00012},
			{225,	1,	30,	300,	1,	4,	0.00012},
			{226,	1,	31,	100,	1,	4,	0.00012},
			{227,	1,	32,	150,	1,	4,	0.00012},
			{228,	1,	34,	200,	1,	4,	0.00012},
			{229,	1,	35,	250,	1,	4,	0.00012},
			{230,	1,	40,	300,	1,	4,	0.00012},
			{231,	1,	41,	100,	1,	4,	0.00012},
			{232,	1,	42,	150,	1,	4,	0.00012},
			{233,	1,	43,	200,	1,	4,	0.00012},
			{234,	1,	45,	100,	1,	4,	0.00012},
			{235,	1,	50,	150,	1,	4,	0.00012},
			{236,	1,	51,	200,	1,	4,	0.00012},
			{237,	1,	52,	250,	1,	4,	0.00012},
			{238,	1,	53,	300,	1,	4,	0.00012},
			{239,	1,	54,	100,	1,	4,	0.00012},
			{240,	1,	01,	150,	1,	4,	0.00012},
			{241,	1,	02,	200,	1,	4,	0.00012},
			{242,	1,	03,	250,	1,	4,	0.00012},
			{243,	1,	04,	300,	1,	4,	0.00012},
			{244,	1,	05,	100,	1,	4,	0.00012},
			{245,	1,	10,	150,	1,	4,	0.00012},
			{246,	1,	12,	200,	1,	4,	0.00012},
			{247,	1,	13,	250,	1,	4,	0.00012},
			{248,	1,	14,	300,	1,	4,	0.00012},
			{249,	1,	15,	100,	1,	4,	0.00012},
			{250,	1,	20,	150,	1,	4,	0.00012},
			{251,	1,	21,	200,	1,	4,	0.00012},
			{252,	1,	23,	100,	1,	4,	0.00012},
			{253,	1,	24,	150,	1,	4,	0.00012},
			{254,	1,	25,	200,	1,	4,	0.00012},
			{255,	1,	30,	250,	1,	4,	0.00012},
			{256,	1,	31,	300,	1,	4,	0.00012},
			{257,	1,	32,	100,	1,	4,	0.00012},
			{258,	1,	34,	150,	1,	4,	0.00012},
			{259,	1,	35,	200,	1,	4,	0.00012},
			{260,	1,	40,	250,	1,	4,	0.00012},
			{261,	1,	41,	300,	1,	4,	0.00012},
			{262,	1,	42,	100,	1,	4,	0.00012},
			{263,	1,	43,	150,	1,	4,	0.00012},
			{264,	1,	45,	200,	1,	4,	0.00012},
			{265,	1,	50,	250,	1,	4,	0.00012},
			{266,	1,	51,	300,	1,	4,	0.00012},
			{267,	1,	52,	100,	1,	4,	0.00012},
			{268,	1,	53,	150,	1,	4,	0.00012},
			{269,	1,	54,	200,	1,	4,	0.00012},
			{270,	1,	01,	100,	1,	4,	0.00012},
			{271,	1,	02,	150,	1,	4,	0.00012},
			{272,	1,	03,	200,	1,	4,	0.00012},
			{273,	1,	04,	250,	1,	4,	0.00012},
			{274,	1,	05,	300,	1,	4,	0.00012},
			{275,	1,	10,	100,	1,	4,	0.00012},
			{276,	1,	12,	150,	1,	4,	0.00012},
			{277,	1,	13,	200,	1,	4,	0.00012},
			{278,	1,	14,	250,	1,	4,	0.00012},
			{279,	1,	15,	300,	1,	4,	0.00012},
			{280,	1,	20,	100,	1,	4,	0.00012},
			{281,	1,	21,	150,	1,	4,	0.00012},
			{282,	1,	23,	200,	1,	4,	0.00012},
			{283,	1,	24,	250,	1,	4,	0.00012},
			{284,	1,	25,	300,	1,	4,	0.00012},
			{285,	1,	30,	100,	1,	4,	0.00012},
			{286,	1,	31,	150,	1,	4,	0.00012},
			{287,	1,	32,	200,	1,	4,	0.00012},
			{288,	1,	34,	100,	1,	4,	0.00012},
			{289,	1,	35,	150,	1,	4,	0.00012},
			{290,	1,	40,	200,	1,	4,	0.00012},
			{291,	1,	41,	250,	1,	4,	0.00012},
			{292,	1,	42,	300,	1,	4,	0.00012},
			{293,	1,	43,	100,	1,	4,	0.00012},
			{294,	1,	45,	150,	1,	4,	0.00012},
			{295,	1,	50,	200,	1,	4,	0.00012},
			{296,	1,	51,	250,	1,	4,	0.00012},
			{297,	1,	52,	300,	1,	4,	0.00012},
			{298,	1,	53,	100,	1,	4,	0.00012},
			{299,	1,	54,	150,	1,	4,	0.00012},
			{300,	1,	01,	200,	1,	4,	0.00012},
			{301,	1,	02,	250,	1,	4,	0.00012},
			{302,	1,	03,	300,	1,	4,	0.00012},
			{303,	1,	04,	100,	1,	4,	0.00012},
			{304,	1,	05,	150,	1,	4,	0.00012},
			{305,	1,	10,	200,	1,	4,	0.00012},
			{306,	1,	12,	100,	1,	4,	0.00012},
			{307,	1,	13,	150,	1,	4,	0.00012},
			{308,	1,	14,	200,	1,	4,	0.00012},
			{309,	1,	15,	250,	1,	4,	0.00012},
			{310,	1,	20,	300,	1,	4,	0.00012},
			{311,	1,	21,	100,	1,	4,	0.00012},
			{312,	1,	23,	150,	1,	4,	0.00012},
			{313,	1,	24,	200,	1,	4,	0.00012},
			{314,	1,	25,	250,	1,	4,	0.00012},
			{315,	1,	30,	300,	1,	4,	0.00012},
			{316,	1,	31,	100,	1,	4,	0.00012},
			{317,	1,	32,	150,	1,	4,	0.00012},
			{318,	1,	34,	200,	1,	4,	0.00012},
			{319,	1,	35,	250,	1,	4,	0.00012},
			{320,	1,	40,	300,	1,	4,	0.00012},
			{321,	1,	41,	100,	1,	4,	0.00012},
			{322,	1,	42,	150,	1,	4,	0.00012},
			{323,	1,	43,	200,	1,	4,	0.00012},
			{324,	1,	45,	100,	1,	4,	0.00012},
			{325,	1,	50,	150,	1,	4,	0.00012},
			{326,	1,	51,	200,	1,	4,	0.00012},
			{327,	1,	52,	250,	1,	4,	0.00012},
			{328,	1,	53,	300,	1,	4,	0.00012},
			{329,	1,	54,	100,	1,	4,	0.00012},
			{330,	1,	01,	150,	1,	4,	0.00012},
			{331,	1,	02,	200,	1,	4,	0.00012},
			{332,	1,	03,	250,	1,	4,	0.00012},
			{333,	1,	04,	300,	1,	4,	0.00012},
			{334,	1,	05,	100,	1,	4,	0.00012},
			{335,	1,	10,	150,	1,	4,	0.00012},
			{336,	1,	12,	200,	1,	4,	0.00012},
			{337,	1,	13,	250,	1,	4,	0.00012},
			{338,	1,	14,	300,	1,	4,	0.00012},
			{339,	1,	15,	100,	1,	4,	0.00012},
			{340,	1,	20,	150,	1,	4,	0.00012},
			{341,	1,	21,	200,	1,	4,	0.00012},
			{342,	1,	23,	100,	1,	4,	0.00012},
			{343,	1,	24,	150,	1,	4,	0.00012},
			{344,	1,	25,	200,	1,	4,	0.00012},
			{345,	1,	30,	250,	1,	4,	0.00012},
			{346,	1,	31,	300,	1,	4,	0.00012},
			{347,	1,	32,	100,	1,	4,	0.00012},
			{348,	1,	34,	150,	1,	4,	0.00012},
			{349,	1,	35,	200,	1,	4,	0.00012},
			{350,	1,	40,	250,	1,	4,	0.00012},
			{351,	1,	41,	300,	1,	4,	0.00012},
			{352,	1,	42,	100,	1,	4,	0.00012},
			{353,	1,	43,	150,	1,	4,	0.00012},
			{354,	1,	45,	200,	1,	4,	0.00012},
			{355,	1,	50,	250,	1,	4,	0.00012},
			{356,	1,	51,	300,	1,	4,	0.00012},
			{357,	1,	52,	100,	1,	4,	0.00012},
			{358,	1,	53,	150,	1,	4,	0.00012},
			{359,	1,	54,	200,	1,	4,	0.00012},
			{360,	1,	01,	100,	1,	4,	0.00012},
			{361,	1,	02,	150,	1,	4,	0.00012},
			{362,	1,	03,	200,	1,	4,	0.00012},
			{363,	1,	04,	250,	1,	4,	0.00012},
			{364,	1,	05,	300,	1,	4,	0.00012},
			{365,	1,	10,	100,	1,	4,	0.00012},
			{366,	1,	12,	150,	1,	4,	0.00012},
			{367,	1,	13,	200,	1,	4,	0.00012},
			{368,	1,	14,	250,	1,	4,	0.00012},
			{369,	1,	15,	300,	1,	4,	0.00012},
			{370,	1,	20,	100,	1,	4,	0.00012},
			{371,	1,	21,	150,	1,	4,	0.00012},
			{372,	1,	23,	200,	1,	4,	0.00012},
			{373,	1,	24,	250,	1,	4,	0.00012},
			{374,	1,	25,	300,	1,	4,	0.00012},
			{375,	1,	30,	100,	1,	4,	0.00012},
			{376,	1,	31,	150,	1,	4,	0.00012},
			{377,	1,	32,	200,	1,	4,	0.00012},
			{378,	1,	34,	100,	1,	4,	0.00012},
			{379,	1,	35,	150,	1,	4,	0.00012},
			{380,	1,	40,	200,	1,	4,	0.00012},
			{381,	1,	41,	250,	1,	4,	0.00012},
			{382,	1,	42,	300,	1,	4,	0.00012},
			{383,	1,	43,	100,	1,	4,	0.00012},
			{384,	1,	45,	150,	1,	4,	0.00012},
			{385,	1,	50,	200,	1,	4,	0.00012},
			{386,	1,	51,	250,	1,	4,	0.00012},
			{387,	1,	52,	300,	1,	4,	0.00012},
			{388,	1,	53,	100,	1,	4,	0.00012},
			{389,	1,	54,	150,	1,	4,	0.00012},
			{390,	1,	01,	200,	1,	4,	0.00012},
			{391,	1,	02,	250,	1,	4,	0.00012},
			{392,	1,	03,	300,	1,	4,	0.00012},
			{393,	1,	04,	100,	1,	4,	0.00012},
			{394,	1,	05,	150,	1,	4,	0.00012},
			{395,	1,	10,	200,	1,	4,	0.00012},
			{396,	1,	12,	100,	1,	4,	0.00012},
			{398,	1,	13,	150,	1,	4,	0.00012},
			{397,	1,	14,	200,	1,	4,	0.00012},
			{399,	1,	15,	250,	1,	4,	0.00012},
			{400,	1,	20,	300,	1,	4,	0.00012},
			{401,	1,	21,	100,	1,	4,	0.00012},
			{402,	1,	23,	150,	1,	4,	0.00012},
			{403,	1,	24,	200,	1,	4,	0.00012},
			{404,	1,	25,	250,	1,	4,	0.00012},
			{405,	1,	30,	300,	1,	4,	0.00012},
			{406,	1,	31,	100,	1,	4,	0.00012},
			{407,	1,	32,	150,	1,	4,	0.00012},
			{408,	1,	34,	200,	1,	4,	0.00012},
			{409,	1,	35,	250,	1,	4,	0.00012},
			{410,	1,	40,	300,	1,	4,	0.00012},
			{411,	1,	41,	100,	1,	4,	0.00012},
			{412,	1,	42,	150,	1,	4,	0.00012},
			{413,	1,	43,	200,	1,	4,	0.00012},
			{414,	1,	45,	100,	1,	4,	0.00012},
			{415,	1,	50,	150,	1,	4,	0.00012},
			{416,	1,	51,	200,	1,	4,	0.00012},
			{417,	1,	52,	250,	1,	4,	0.00012},
			{418,	1,	53,	300,	1,	4,	0.00012},
			{419,	1,	54,	100,	1,	4,	0.00012},
			{420,	1,	01,	150,	1,	4,	0.00012},
			{421,	1,	02,	200,	1,	4,	0.00012},
			{422,	1,	03,	250,	1,	4,	0.00012},
			{423,	1,	04,	300,	1,	4,	0.00012},
			{424,	1,	05,	100,	1,	4,	0.00012},
			{425,	1,	10,	150,	1,	4,	0.00012},
			{426,	1,	12,	200,	1,	4,	0.00012},
			{427,	1,	13,	250,	1,	4,	0.00012},
			{428,	1,	14,	300,	1,	4,	0.00012},
			{429,	1,	15,	100,	1,	4,	0.00012},
			{430,	1,	20,	150,	1,	4,	0.00012},
			{431,	1,	21,	200,	1,	4,	0.00012},
			{432,	1,	23,	100,	1,	4,	0.00012},
			{433,	1,	24,	150,	1,	4,	0.00012},
			{434,	1,	25,	200,	1,	4,	0.00012},
			{435,	1,	30,	250,	1,	4,	0.00012},
			{436,	1,	31,	300,	1,	4,	0.00012},
			{437,	1,	32,	100,	1,	4,	0.00012},
			{438,	1,	34,	150,	1,	4,	0.00012},
			{439,	1,	35,	200,	1,	4,	0.00012},
			{440,	1,	40,	250,	1,	4,	0.00012},
			{441,	1,	41,	300,	1,	4,	0.00012},
			{442,	1,	42,	100,	1,	4,	0.00012},
			{443,	1,	43,	150,	1,	4,	0.00012},
			{444,	1,	45,	200,	1,	4,	0.00012},
			{445,	1,	50,	250,	1,	4,	0.00012},
			{446,	1,	51,	300,	1,	4,	0.00012},
			{447,	1,	52,	100,	1,	4,	0.00012},
			{448,	1,	53,	150,	1,	4,	0.00012},
			{449,	1,	54,	200,	1,	4,	0.00012},
			{450,	1,	01,	100,	1,	4,	0.00012},
			{451,	1,	02,	150,	1,	4,	0.00012},
			{452,	1,	03,	200,	1,	4,	0.00012},
			{453,	1,	04,	250,	1,	4,	0.00012},
			{454,	1,	05,	300,	1,	4,	0.00012},
			{455,	1,	10,	100,	1,	4,	0.00012},
			{456,	1,	12,	150,	1,	4,	0.00012},
			{457,	1,	13,	200,	1,	4,	0.00012},
			{458,	1,	14,	250,	1,	4,	0.00012},
			{459,	1,	15,	300,	1,	4,	0.00012},
			{460,	1,	20,	100,	1,	4,	0.00012},
			{461,	1,	21,	150,	1,	4,	0.00012},
			{462,	1,	23,	200,	1,	4,	0.00012},
			{463,	1,	24,	250,	1,	4,	0.00012},
			{464,	1,	25,	300,	1,	4,	0.00012},
			{465,	1,	30,	100,	1,	4,	0.00012},
			{466,	1,	31,	150,	1,	4,	0.00012},
			{467,	1,	32,	200,	1,	4,	0.00012},
			{468,	1,	34,	100,	1,	4,	0.00012},
			{469,	1,	35,	150,	1,	4,	0.00012},
			{470,	1,	40,	200,	1,	4,	0.00012},
			{471,	1,	41,	250,	1,	4,	0.00012},
			{472,	1,	42,	300,	1,	4,	0.00012},
			{473,	1,	43,	100,	1,	4,	0.00012},
			{474,	1,	45,	150,	1,	4,	0.00012},
			{475,	1,	50,	200,	1,	4,	0.00012},
			{476,	1,	51,	250,	1,	4,	0.00012},
			{477,	1,	52,	300,	1,	4,	0.00012},
			{478,	1,	53,	100,	1,	4,	0.00012},
			{479,	1,	54,	150,	1,	4,	0.00012},
			{480,	1,	01,	200,	1,	4,	0.00012},
			{481,	1,	02,	250,	1,	4,	0.00012},
			{482,	1,	03,	300,	1,	4,	0.00012},
			{483,	1,	04,	100,	1,	4,	0.00012},
			{484,	1,	05,	150,	1,	4,	0.00012},
			{485,	1,	10,	200,	1,	4,	0.00012},
			{486,	1,	12,	100,	1,	4,	0.00012},
			{487,	1,	13,	150,	1,	4,	0.00012},
			{488,	1,	14,	200,	1,	4,	0.00012},
			{489,	1,	15,	250,	1,	4,	0.00012},
			{490,	1,	20,	300,	1,	4,	0.00012},
			{491,	1,	21,	100,	1,	4,	0.00012},
			{492,	1,	23,	150,	1,	4,	0.00012},
			{493,	1,	24,	200,	1,	4,	0.00012},
			{494,	1,	25,	250,	1,	4,	0.00012},
			{495,	1,	30,	300,	1,	4,	0.00012},
			{496,	1,	31,	100,	1,	4,	0.00012},
			{497,	1,	32,	150,	1,	4,	0.00012},
			{498,	1,	34,	200,	1,	4,	0.00012},
};
	return SFC1;
};

public static double[][] Sfunction2()
{
	//These are the SFCs that has 1 VNF, format: {SCF#, type# , source , destination, BW , Delay , VNF1 cores , VNF2 cores}
	double[][] SFC2 = {
			
			{0,	2,	01,	100,	1,	4,	8,	0.00028},
			{1,	2,	02,	150,	1,	4,	8,	0.00028},
			{2,	2,	03,	200,	1,	4,	8,	0.00028},
			{3,	2,	04,	250,	1,	4,	8,	0.00028},
			{4,	2,	05,	300,	1,	4,	8,	0.00028},
			{5,	2,	10,	100,	1,	4,	8,	0.00028},
			{6,	2,	12,	150,	1,	4,	8,	0.00028},
			{7,	2,	13,	200,	1,	4,	8,	0.00028},
			{8,	2,	14,	250,	1,	4,	8,	0.00028},
			{9,	2,	15,	300,	1,	4,	8,	0.00028},
			{10,	2,	20,	100,	1,	4,	8,	0.00028},
			{11,	2,	21,	150,	1,	4,	8,	0.00028},
			{12,	2,	23,	200,	1,	4,	8,	0.00028},
			{13,	2,	24,	250,	1,	4,	8,	0.00028},
			{14,	2,	25,	300,	1,	4,	8,	0.00028},
			{15,	2,	30,	100,	1,	4,	8,	0.00028},
			{16,	2,	31,	150,	1,	4,	8,	0.00028},
			{17,	2,	32,	200,	1,	4,	8,	0.00028},
			{18,	2,	34,	100,	1,	4,	8,	0.00028},
			{19,	2,	35,	150,	1,	4,	8,	0.00028},
			{20,	2,	40,	200,	1,	4,	8,	0.00028},
			{21,	2,	41,	250,	1,	4,	8,	0.00028},
			{22,	2,	42,	300,	1,	4,	8,	0.00028},
			{23,	2,	43,	100,	1,	4,	8,	0.00028},
			{24,	2,	45,	150,	1,	4,	8,	0.00028},
			{25,	2,	50,	200,	1,	4,	8,	0.00028},
			{26,	2,	51,	250,	1,	4,	8,	0.00028},
			{27,	2,	52,	300,	1,	4,	8,	0.00028},
			{28,	2,	53,	100,	1,	4,	8,	0.00028},
			{29,	2,	54,	150,	1,	4,	8,	0.00028},
			{30,	2,	01,	200,	1,	4,	8,	0.00028},
			{31,	2,	02,	250,	1,	4,	8,	0.00028},
			{32,	2,	03,	300,	1,	4,	8,	0.00028},
			{33,	2,	04,	100,	1,	4,	8,	0.00028},
			{34,	2,	05,	150,	1,	4,	8,	0.00028},
			{35,	2,	10,	200,	1,	4,	8,	0.00028},
			{36,	2,	12,	100,	1,	4,	8,	0.00028},
			{37,	2,	13,	150,	1,	4,	8,	0.00028},
			{38,	2,	14,	200,	1,	4,	8,	0.00028},
			{39,	2,	15,	250,	1,	4,	8,	0.00028},
			{40,	2,	20,	300,	1,	4,	8,	0.00028},
			{41,	2,	21,	100,	1,	4,	8,	0.00028},
			{42,	2,	23,	150,	1,	4,	8,	0.00028},
			{43,	2,	24,	200,	1,	4,	8,	0.00028},
			{44,	2,	25,	250,	1,	4,	8,	0.00028},
			{45,	2,	30,	300,	1,	4,	8,	0.00028},
			{46,	2,	31,	100,	1,	4,	8,	0.00028},
			{47,	2,	32,	150,	1,	4,	8,	0.00028},
			{48,	2,	34,	200,	1,	4,	8,	0.00028},
			{49,	2,	35,	250,	1,	4,	8,	0.00028},
			{50,	2,	40,	300,	1,	4,	8,	0.00028},
			{51,	2,	41,	100,	1,	4,	8,	0.00028},
			{52,	2,	42,	150,	1,	4,	8,	0.00028},
			{53,	2,	43,	200,	1,	4,	8,	0.00028},
			{54,	2,	45,	100,	1,	4,	8,	0.00028},
			{55,	2,	50,	150,	1,	4,	8,	0.00028},
			{56,	2,	51,	200,	1,	4,	8,	0.00028},
			{57,	2,	52,	250,	1,	4,	8,	0.00028},
			{58,	2,	53,	300,	1,	4,	8,	0.00028},
			{59,	2,	54,	100,	1,	4,	8,	0.00028},
			{60,	2,	01,	150,	1,	4,	8,	0.00028},
			{61,	2,	02,	200,	1,	4,	8,	0.00028},
			{62,	2,	03,	250,	1,	4,	8,	0.00028},
			{63,	2,	04,	300,	1,	4,	8,	0.00028},
			{64,	2,	05,	100,	1,	4,	8,	0.00028},
			{65,	2,	10,	150,	1,	4,	8,	0.00028},
			{66,	2,	12,	200,	1,	4,	8,	0.00028},
			{67,	2,	13,	250,	1,	4,	8,	0.00028},
			{68,	2,	14,	300,	1,	4,	8,	0.00028},
			{69,	2,	15,	100,	1,	4,	8,	0.00028},
			{70,	2,	20,	150,	1,	4,	8,	0.00028},
			{71,	2,	21,	200,	1,	4,	8,	0.00028},
			{72,	2,	23,	100,	1,	4,	8,	0.00028},
			{73,	2,	24,	150,	1,	4,	8,	0.00028},
			{74,	2,	25,	200,	1,	4,	8,	0.00028},
			{75,	2,	30,	250,	1,	4,	8,	0.00028},
			{76,	2,	31,	300,	1,	4,	8,	0.00028},
			{77,	2,	32,	100,	1,	4,	8,	0.00028},
			{78,	2,	34,	150,	1,	4,	8,	0.00028},
			{79,	2,	35,	200,	1,	4,	8,	0.00028},
			{80,	2,	40,	250,	1,	4,	8,	0.00028},
			{81,	2,	41,	300,	1,	4,	8,	0.00028},
			{82,	2,	42,	100,	1,	4,	8,	0.00028},
			{83,	2,	43,	150,	1,	4,	8,	0.00028},
			{84,	2,	45,	200,	1,	4,	8,	0.00028},
			{85,	2,	50,	250,	1,	4,	8,	0.00028},
			{86,	2,	51,	300,	1,	4,	8,	0.00028},
			{87,	2,	52,	100,	1,	4,	8,	0.00028},
			{88,	2,	53,	150,	1,	4,	8,	0.00028},
			{89,	2,	54,	200,	1,	4,	8,	0.00028},
			{90,	2,	01,	100,	1,	4,	8,	0.00028},
			{91,	2,	02,	150,	1,	4,	8,	0.00028},
			{92,	2,	03,	200,	1,	4,	8,	0.00028},
			{93,	2,	04,	250,	1,	4,	8,	0.00028},
			{94,	2,	05,	300,	1,	4,	8,	0.00028},
			{95,	2,	10,	100,	1,	4,	8,	0.00028},
			{96,	2,	12,	150,	1,	4,	8,	0.00028},
			{97,	2,	13,	200,	1,	4,	8,	0.00028},
			{98,	2,	14,	250,	1,	4,	8,	0.00028},
			{99,	2,	15,	300,	1,	4,	8,	0.00028},
			{100,	2,	20,	100,	1,	4,	8,	0.00028},
			{101,	2,	21,	150,	1,	4,	8,	0.00028},
			{102,	2,	23,	200,	1,	4,	8,	0.00028},
			{103,	2,	24,	250,	1,	4,	8,	0.00028},
			{104,	2,	25,	300,	1,	4,	8,	0.00028},
			{105,	2,	30,	100,	1,	4,	8,	0.00028},
			{106,	2,	31,	150,	1,	4,	8,	0.00028},
			{107,	2,	32,	200,	1,	4,	8,	0.00028},
			{108,	2,	34,	100,	1,	4,	8,	0.00028},
			{109,	2,	35,	150,	1,	4,	8,	0.00028},
			{110,	2,	40,	200,	1,	4,	8,	0.00028},
			{111,	2,	41,	250,	1,	4,	8,	0.00028},
			{112,	2,	42,	300,	1,	4,	8,	0.00028},
			{113,	2,	43,	100,	1,	4,	8,	0.00028},
			{114,	2,	45,	150,	1,	4,	8,	0.00028},
			{115,	2,	50,	200,	1,	4,	8,	0.00028},
			{116,	2,	51,	250,	1,	4,	8,	0.00028},
			{117,	2,	52,	300,	1,	4,	8,	0.00028},
			{118,	2,	53,	100,	1,	4,	8,	0.00028},
			{119,	2,	54,	150,	1,	4,	8,	0.00028},
			{120,	2,	01,	200,	1,	4,	8,	0.00028},
			{121,	2,	02,	250,	1,	4,	8,	0.00028},
			{122,	2,	03,	300,	1,	4,	8,	0.00028},
			{123,	2,	04,	100,	1,	4,	8,	0.00028},
			{124,	2,	05,	150,	1,	4,	8,	0.00028},
			{125,	2,	10,	200,	1,	4,	8,	0.00028},
			{126,	2,	12,	100,	1,	4,	8,	0.00028},
			{127,	2,	13,	150,	1,	4,	8,	0.00028},
			{128,	2,	14,	200,	1,	4,	8,	0.00028},
			{129,	2,	15,	250,	1,	4,	8,	0.00028},
			{130,	2,	20,	300,	1,	4,	8,	0.00028},
			{131,	2,	21,	100,	1,	4,	8,	0.00028},
			{132,	2,	23,	150,	1,	4,	8,	0.00028},
			{133,	2,	24,	200,	1,	4,	8,	0.00028},
			{134,	2,	25,	250,	1,	4,	8,	0.00028},
			{135,	2,	30,	300,	1,	4,	8,	0.00028},
			{136,	2,	31,	100,	1,	4,	8,	0.00028},
			{137,	2,	32,	150,	1,	4,	8,	0.00028},
			{138,	2,	34,	200,	1,	4,	8,	0.00028},
			{139,	2,	35,	250,	1,	4,	8,	0.00028},
			{140,	2,	40,	300,	1,	4,	8,	0.00028},
			{141,	2,	41,	100,	1,	4,	8,	0.00028},
			{142,	2,	42,	150,	1,	4,	8,	0.00028},
			{143,	2,	43,	200,	1,	4,	8,	0.00028},
			{144,	2,	45,	100,	1,	4,	8,	0.00028},
			{145,	2,	50,	150,	1,	4,	8,	0.00028},
			{146,	2,	51,	200,	1,	4,	8,	0.00028},
			{147,	2,	52,	250,	1,	4,	8,	0.00028},
			{148,	2,	53,	300,	1,	4,	8,	0.00028},
			{149,	2,	54,	100,	1,	4,	8,	0.00028},
			{150,	2,	01,	150,	1,	4,	8,	0.00028},
			{151,	2,	02,	200,	1,	4,	8,	0.00028},
			{152,	2,	03,	250,	1,	4,	8,	0.00028},
			{153,	2,	04,	300,	1,	4,	8,	0.00028},
			{154,	2,	05,	100,	1,	4,	8,	0.00028},
			{155,	2,	10,	150,	1,	4,	8,	0.00028},
			{156,	2,	12,	200,	1,	4,	8,	0.00028},
			{157,	2,	13,	250,	1,	4,	8,	0.00028},
			{158,	2,	14,	300,	1,	4,	8,	0.00028},
			{159,	2,	15,	100,	1,	4,	8,	0.00028},
			{160,	2,	20,	150,	1,	4,	8,	0.00028},
			{161,	2,	21,	200,	1,	4,	8,	0.00028},
			{162,	2,	23,	100,	1,	4,	8,	0.00028},
			{163,	2,	24,	150,	1,	4,	8,	0.00028},
			{164,	2,	25,	200,	1,	4,	8,	0.00028},
			{165,	2,	30,	250,	1,	4,	8,	0.00028},
			{166,	2,	31,	300,	1,	4,	8,	0.00028},
			{167,	2,	32,	100,	1,	4,	8,	0.00028},
			{168,	2,	34,	150,	1,	4,	8,	0.00028},
			{169,	2,	35,	200,	1,	4,	8,	0.00028},
			{170,	2,	40,	250,	1,	4,	8,	0.00028},
			{171,	2,	41,	300,	1,	4,	8,	0.00028},
			{172,	2,	42,	100,	1,	4,	8,	0.00028},
			{173,	2,	43,	150,	1,	4,	8,	0.00028},
			{174,	2,	45,	200,	1,	4,	8,	0.00028},
			{175,	2,	50,	250,	1,	4,	8,	0.00028},
			{176,	2,	51,	300,	1,	4,	8,	0.00028},
			{177,	2,	52,	100,	1,	4,	8,	0.00028},
			{178,	2,	53,	150,	1,	4,	8,	0.00028},
			{179,	2,	54,	200,	1,	4,	8,	0.00028},
			{180,	2,	01,	100,	1,	4,	8,	0.00028},
			{181,	2,	02,	150,	1,	4,	8,	0.00028},
			{182,	2,	03,	200,	1,	4,	8,	0.00028},
			{183,	2,	04,	250,	1,	4,	8,	0.00028},
			{184,	2,	05,	300,	1,	4,	8,	0.00028},
			{185,	2,	10,	100,	1,	4,	8,	0.00028},
			{186,	2,	12,	150,	1,	4,	8,	0.00028},
			{187,	2,	13,	200,	1,	4,	8,	0.00028},
			{188,	2,	14,	250,	1,	4,	8,	0.00028},
			{189,	2,	15,	300,	1,	4,	8,	0.00028},
			{190,	2,	20,	100,	1,	4,	8,	0.00028},
			{191,	2,	21,	150,	1,	4,	8,	0.00028},
			{192,	2,	23,	200,	1,	4,	8,	0.00028},
			{193,	2,	24,	250,	1,	4,	8,	0.00028},
			{194,	2,	25,	300,	1,	4,	8,	0.00028},
			{195,	2,	30,	100,	1,	4,	8,	0.00028},
			{196,	2,	31,	150,	1,	4,	8,	0.00028},
			{197,	2,	32,	200,	1,	4,	8,	0.00028},
			{198,	2,	34,	100,	1,	4,	8,	0.00028},
			{199,	2,	35,	150,	1,	4,	8,	0.00028},
			{200,	2,	40,	200,	1,	4,	8,	0.00028},
			{201,	2,	41,	250,	1,	4,	8,	0.00028},
			{202,	2,	42,	300,	1,	4,	8,	0.00028},
			{203,	2,	43,	100,	1,	4,	8,	0.00028},
			{204,	2,	45,	150,	1,	4,	8,	0.00028},
			{205,	2,	50,	200,	1,	4,	8,	0.00028},
			{206,	2,	51,	250,	1,	4,	8,	0.00028},
			{207,	2,	52,	300,	1,	4,	8,	0.00028},
			{208,	2,	53,	100,	1,	4,	8,	0.00028},
			{209,	2,	54,	150,	1,	4,	8,	0.00028},
			{210,	2,	01,	200,	1,	4,	8,	0.00028},
			{211,	2,	02,	250,	1,	4,	8,	0.00028},
			{212,	2,	03,	300,	1,	4,	8,	0.00028},
			{213,	2,	04,	100,	1,	4,	8,	0.00028},
			{214,	2,	05,	150,	1,	4,	8,	0.00028},
			{215,	2,	10,	200,	1,	4,	8,	0.00028},
			{216,	2,	12,	100,	1,	4,	8,	0.00028},
			{217,	2,	13,	150,	1,	4,	8,	0.00028},
			{218,	2,	14,	200,	1,	4,	8,	0.00028},
			{219,	2,	15,	250,	1,	4,	8,	0.00028},
			{220,	2,	20,	300,	1,	4,	8,	0.00028},
			{221,	2,	21,	100,	1,	4,	8,	0.00028},
			{222,	2,	23,	150,	1,	4,	8,	0.00028},
			{223,	2,	24,	200,	1,	4,	8,	0.00028},
			{224,	2,	25,	250,	1,	4,	8,	0.00028},
			{225,	2,	30,	300,	1,	4,	8,	0.00028},
			{226,	2,	31,	100,	1,	4,	8,	0.00028},
			{227,	2,	32,	150,	1,	4,	8,	0.00028},
			{228,	2,	34,	200,	1,	4,	8,	0.00028},
			{229,	2,	35,	250,	1,	4,	8,	0.00028},
			{230,	2,	40,	300,	1,	4,	8,	0.00028},
			{231,	2,	41,	100,	1,	4,	8,	0.00028},
			{232,	2,	42,	150,	1,	4,	8,	0.00028},
			{233,	2,	43,	200,	1,	4,	8,	0.00028},
			{234,	2,	45,	100,	1,	4,	8,	0.00028},
			{235,	2,	50,	150,	1,	4,	8,	0.00028},
			{236,	2,	51,	200,	1,	4,	8,	0.00028},
			{237,	2,	52,	250,	1,	4,	8,	0.00028},
			{238,	2,	53,	300,	1,	4,	8,	0.00028},
			{239,	2,	54,	100,	1,	4,	8,	0.00028},
			{240,	2,	01,	150,	1,	4,	8,	0.00028},
			{241,	2,	02,	200,	1,	4,	8,	0.00028},
			{242,	2,	03,	250,	1,	4,	8,	0.00028},
			{243,	2,	04,	300,	1,	4,	8,	0.00028},
			{244,	2,	05,	100,	1,	4,	8,	0.00028},
			{245,	2,	10,	150,	1,	4,	8,	0.00028},
			{246,	2,	12,	200,	1,	4,	8,	0.00028},
			{247,	2,	13,	250,	1,	4,	8,	0.00028},
			{248,	2,	14,	300,	1,	4,	8,	0.00028},
			{249,	2,	15,	100,	1,	4,	8,	0.00028},
			{250,	2,	20,	150,	1,	4,	8,	0.00028},
			{251,	2,	21,	200,	1,	4,	8,	0.00028},
			{252,	2,	23,	100,	1,	4,	8,	0.00028},
			{253,	2,	24,	150,	1,	4,	8,	0.00028},
			{254,	2,	25,	200,	1,	4,	8,	0.00028},
			{255,	2,	30,	250,	1,	4,	8,	0.00028},
			{256,	2,	31,	300,	1,	4,	8,	0.00028},
			{257,	2,	32,	100,	1,	4,	8,	0.00028},
			{258,	2,	34,	150,	1,	4,	8,	0.00028},
			{259,	2,	35,	200,	1,	4,	8,	0.00028},
			{260,	2,	40,	250,	1,	4,	8,	0.00028},
			{261,	2,	41,	300,	1,	4,	8,	0.00028},
			{262,	2,	42,	100,	1,	4,	8,	0.00028},
			{263,	2,	43,	150,	1,	4,	8,	0.00028},
			{264,	2,	45,	200,	1,	4,	8,	0.00028},
			{265,	2,	50,	250,	1,	4,	8,	0.00028},
			{266,	2,	51,	300,	1,	4,	8,	0.00028},
			{267,	2,	52,	100,	1,	4,	8,	0.00028},
			{268,	2,	53,	150,	1,	4,	8,	0.00028},
			{269,	2,	54,	200,	1,	4,	8,	0.00028},
			{270,	2,	01,	100,	1,	4,	8,	0.00028},
			{271,	2,	02,	150,	1,	4,	8,	0.00028},
			{272,	2,	03,	200,	1,	4,	8,	0.00028},
			{273,	2,	04,	250,	1,	4,	8,	0.00028},
			{274,	2,	05,	300,	1,	4,	8,	0.00028},
			{275,	2,	10,	100,	1,	4,	8,	0.00028},
			{276,	2,	12,	150,	1,	4,	8,	0.00028},
			{277,	2,	13,	200,	1,	4,	8,	0.00028},
			{278,	2,	14,	250,	1,	4,	8,	0.00028},
			{279,	2,	15,	300,	1,	4,	8,	0.00028},
			{280,	2,	20,	100,	1,	4,	8,	0.00028},
			{281,	2,	21,	150,	1,	4,	8,	0.00028},
			{282,	2,	23,	200,	1,	4,	8,	0.00028},
			{283,	2,	24,	250,	1,	4,	8,	0.00028},
			{284,	2,	25,	300,	1,	4,	8,	0.00028},
			{285,	2,	30,	100,	1,	4,	8,	0.00028},
			{286,	2,	31,	150,	1,	4,	8,	0.00028},
			{287,	2,	32,	200,	1,	4,	8,	0.00028},
			{288,	2,	34,	100,	1,	4,	8,	0.00028},
			{289,	2,	35,	150,	1,	4,	8,	0.00028},
			{290,	2,	40,	200,	1,	4,	8,	0.00028},
			{291,	2,	41,	250,	1,	4,	8,	0.00028},
			{292,	2,	42,	300,	1,	4,	8,	0.00028},
			{293,	2,	43,	100,	1,	4,	8,	0.00028},
			{294,	2,	45,	150,	1,	4,	8,	0.00028},
			{295,	2,	50,	200,	1,	4,	8,	0.00028},
			{296,	2,	51,	250,	1,	4,	8,	0.00028},
			{297,	2,	52,	300,	1,	4,	8,	0.00028},
			{298,	2,	53,	100,	1,	4,	8,	0.00028},
			{299,	2,	54,	150,	1,	4,	8,	0.00028},
			{300,	2,	01,	200,	1,	4,	8,	0.00028},
			{301,	2,	02,	250,	1,	4,	8,	0.00028},
			{302,	2,	03,	300,	1,	4,	8,	0.00028},
			{303,	2,	04,	100,	1,	4,	8,	0.00028},
			{304,	2,	05,	150,	1,	4,	8,	0.00028},
			{305,	2,	10,	200,	1,	4,	8,	0.00028},
			{306,	2,	12,	100,	1,	4,	8,	0.00028},
			{307,	2,	13,	150,	1,	4,	8,	0.00028},
			{308,	2,	14,	200,	1,	4,	8,	0.00028},
			{309,	2,	15,	250,	1,	4,	8,	0.00028},
			{310,	2,	20,	300,	1,	4,	8,	0.00028},
			{311,	2,	21,	100,	1,	4,	8,	0.00028},
			{312,	2,	23,	150,	1,	4,	8,	0.00028},
			{313,	2,	24,	200,	1,	4,	8,	0.00028},
			{314,	2,	25,	250,	1,	4,	8,	0.00028},
			{315,	2,	30,	300,	1,	4,	8,	0.00028},
			{316,	2,	31,	100,	1,	4,	8,	0.00028},
			{317,	2,	32,	150,	1,	4,	8,	0.00028},
			{318,	2,	34,	200,	1,	4,	8,	0.00028},
			{319,	2,	35,	250,	1,	4,	8,	0.00028},
			{320,	2,	40,	300,	1,	4,	8,	0.00028},
			{321,	2,	41,	100,	1,	4,	8,	0.00028},
			{322,	2,	42,	150,	1,	4,	8,	0.00028},
			{323,	2,	43,	200,	1,	4,	8,	0.00028},
			{324,	2,	45,	100,	1,	4,	8,	0.00028},
			{325,	2,	50,	150,	1,	4,	8,	0.00028},
			{326,	2,	51,	200,	1,	4,	8,	0.00028},
			{327,	2,	52,	250,	1,	4,	8,	0.00028},
			{328,	2,	53,	300,	1,	4,	8,	0.00028},
			{329,	2,	54,	100,	1,	4,	8,	0.00028},
			{330,	2,	01,	150,	1,	4,	8,	0.00028},
			{331,	2,	02,	200,	1,	4,	8,	0.00028},
			{332,	2,	03,	250,	1,	4,	8,	0.00028},
			{333,	2,	04,	300,	1,	4,	8,	0.00028},
			{334,	2,	05,	100,	1,	4,	8,	0.00028},
			{335,	2,	10,	150,	1,	4,	8,	0.00028},
			{336,	2,	12,	200,	1,	4,	8,	0.00028},
			{337,	2,	13,	250,	1,	4,	8,	0.00028},
			{338,	2,	14,	300,	1,	4,	8,	0.00028},
			{339,	2,	15,	100,	1,	4,	8,	0.00028},
			{340,	2,	20,	150,	1,	4,	8,	0.00028},
			{341,	2,	21,	200,	1,	4,	8,	0.00028},
			{342,	2,	23,	100,	1,	4,	8,	0.00028},
			{343,	2,	24,	150,	1,	4,	8,	0.00028},
			{344,	2,	25,	200,	1,	4,	8,	0.00028},
			{345,	2,	30,	250,	1,	4,	8,	0.00028},
			{346,	2,	31,	300,	1,	4,	8,	0.00028},
			{347,	2,	32,	100,	1,	4,	8,	0.00028},
			{348,	2,	34,	150,	1,	4,	8,	0.00028},
			{349,	2,	35,	200,	1,	4,	8,	0.00028},
			{350,	2,	40,	250,	1,	4,	8,	0.00028},
			{351,	2,	41,	300,	1,	4,	8,	0.00028},
			{352,	2,	42,	100,	1,	4,	8,	0.00028},
			{353,	2,	43,	150,	1,	4,	8,	0.00028},
			{354,	2,	45,	200,	1,	4,	8,	0.00028},
			{355,	2,	50,	250,	1,	4,	8,	0.00028},
			{356,	2,	51,	300,	1,	4,	8,	0.00028},
			{357,	2,	52,	100,	1,	4,	8,	0.00028},
			{358,	2,	53,	150,	1,	4,	8,	0.00028},
			{359,	2,	54,	200,	1,	4,	8,	0.00028},
			{360,	2,	01,	100,	1,	4,	8,	0.00028},
			{361,	2,	02,	150,	1,	4,	8,	0.00028},
			{362,	2,	03,	200,	1,	4,	8,	0.00028},
			{363,	2,	04,	250,	1,	4,	8,	0.00028},
			{364,	2,	05,	300,	1,	4,	8,	0.00028},
			{365,	2,	10,	100,	1,	4,	8,	0.00028},
			{366,	2,	12,	150,	1,	4,	8,	0.00028},
			{367,	2,	13,	200,	1,	4,	8,	0.00028},
			{368,	2,	14,	250,	1,	4,	8,	0.00028},
			{369,	2,	15,	300,	1,	4,	8,	0.00028},
			{370,	2,	20,	100,	1,	4,	8,	0.00028},
			{371,	2,	21,	150,	1,	4,	8,	0.00028},
			{372,	2,	23,	200,	1,	4,	8,	0.00028},
			{373,	2,	24,	250,	1,	4,	8,	0.00028},
			{374,	2,	25,	300,	1,	4,	8,	0.00028},
			{375,	2,	30,	100,	1,	4,	8,	0.00028},
			{376,	2,	31,	150,	1,	4,	8,	0.00028},
			{377,	2,	32,	200,	1,	4,	8,	0.00028},
			{378,	2,	34,	100,	1,	4,	8,	0.00028},
			{379,	2,	35,	150,	1,	4,	8,	0.00028},
			{380,	2,	40,	200,	1,	4,	8,	0.00028},
			{381,	2,	41,	250,	1,	4,	8,	0.00028},
			{382,	2,	42,	300,	1,	4,	8,	0.00028},
			{383,	2,	43,	100,	1,	4,	8,	0.00028},
			{384,	2,	45,	150,	1,	4,	8,	0.00028},
			{385,	2,	50,	200,	1,	4,	8,	0.00028},
			{386,	2,	51,	250,	1,	4,	8,	0.00028},
			{387,	2,	52,	300,	1,	4,	8,	0.00028},
			{388,	2,	53,	100,	1,	4,	8,	0.00028},
			{389,	2,	54,	150,	1,	4,	8,	0.00028},
			{390,	2,	01,	200,	1,	4,	8,	0.00028},
			{391,	2,	02,	250,	1,	4,	8,	0.00028},
			{392,	2,	03,	300,	1,	4,	8,	0.00028},
			{393,	2,	04,	100,	1,	4,	8,	0.00028},
			{394,	2,	05,	150,	1,	4,	8,	0.00028},
			{395,	2,	10,	200,	1,	4,	8,	0.00028},
			{396,	2,	12,	100,	1,	4,	8,	0.00028},
			{398,	2,	13,	150,	1,	4,	8,	0.00028},
			{397,	2,	14,	200,	1,	4,	8,	0.00028},
			{399,	2,	15,	250,	1,	4,	8,	0.00028},
			{400,	2,	20,	300,	1,	4,	8,	0.00028},
			{401,	2,	21,	100,	1,	4,	8,	0.00028},
			{402,	2,	23,	150,	1,	4,	8,	0.00028},
			{403,	2,	24,	200,	1,	4,	8,	0.00028},
			{404,	2,	25,	250,	1,	4,	8,	0.00028},
			{405,	2,	30,	300,	1,	4,	8,	0.00028},
			{406,	2,	31,	100,	1,	4,	8,	0.00028},
			{407,	2,	32,	150,	1,	4,	8,	0.00028},
			{408,	2,	34,	200,	1,	4,	8,	0.00028},
			{409,	2,	35,	250,	1,	4,	8,	0.00028},
			{410,	2,	40,	300,	1,	4,	8,	0.00028},
			{411,	2,	41,	100,	1,	4,	8,	0.00028},
			{412,	2,	42,	150,	1,	4,	8,	0.00028},
			{413,	2,	43,	200,	1,	4,	8,	0.00028},
			{414,	2,	45,	100,	1,	4,	8,	0.00028},
			{415,	2,	50,	150,	1,	4,	8,	0.00028},
			{416,	2,	51,	200,	1,	4,	8,	0.00028},
			{417,	2,	52,	250,	1,	4,	8,	0.00028},
			{418,	2,	53,	300,	1,	4,	8,	0.00028},
			{419,	2,	54,	100,	1,	4,	8,	0.00028},
			{420,	2,	01,	150,	1,	4,	8,	0.00028},
			{421,	2,	02,	200,	1,	4,	8,	0.00028},
			{422,	2,	03,	250,	1,	4,	8,	0.00028},
			{423,	2,	04,	300,	1,	4,	8,	0.00028},
			{424,	2,	05,	100,	1,	4,	8,	0.00028},
			{425,	2,	10,	150,	1,	4,	8,	0.00028},
			{426,	2,	12,	200,	1,	4,	8,	0.00028},
			{427,	2,	13,	250,	1,	4,	8,	0.00028},
			{428,	2,	14,	300,	1,	4,	8,	0.00028},
			{429,	2,	15,	100,	1,	4,	8,	0.00028},
			{430,	2,	20,	150,	1,	4,	8,	0.00028},
			{431,	2,	21,	200,	1,	4,	8,	0.00028},
			{432,	2,	23,	100,	1,	4,	8,	0.00028},
			{433,	2,	24,	150,	1,	4,	8,	0.00028},
			{434,	2,	25,	200,	1,	4,	8,	0.00028},
			{435,	2,	30,	250,	1,	4,	8,	0.00028},
			{436,	2,	31,	300,	1,	4,	8,	0.00028},
			{437,	2,	32,	100,	1,	4,	8,	0.00028},
			{438,	2,	34,	150,	1,	4,	8,	0.00028},
			{439,	2,	35,	200,	1,	4,	8,	0.00028},
			{440,	2,	40,	250,	1,	4,	8,	0.00028},
			{441,	2,	41,	300,	1,	4,	8,	0.00028},
			{442,	2,	42,	100,	1,	4,	8,	0.00028},
			{443,	2,	43,	150,	1,	4,	8,	0.00028},
			{444,	2,	45,	200,	1,	4,	8,	0.00028},
			{445,	2,	50,	250,	1,	4,	8,	0.00028},
			{446,	2,	51,	300,	1,	4,	8,	0.00028},
			{447,	2,	52,	100,	1,	4,	8,	0.00028},
			{448,	2,	53,	150,	1,	4,	8,	0.00028},
			{449,	2,	54,	200,	1,	4,	8,	0.00028},
			{450,	2,	01,	100,	1,	4,	8,	0.00028},
			{451,	2,	02,	150,	1,	4,	8,	0.00028},
			{452,	2,	03,	200,	1,	4,	8,	0.00028},
			{453,	2,	04,	250,	1,	4,	8,	0.00028},
			{454,	2,	05,	300,	1,	4,	8,	0.00028},
			{455,	2,	10,	100,	1,	4,	8,	0.00028},
			{456,	2,	12,	150,	1,	4,	8,	0.00028},
			{457,	2,	13,	200,	1,	4,	8,	0.00028},
			{458,	2,	14,	250,	1,	4,	8,	0.00028},
			{459,	2,	15,	300,	1,	4,	8,	0.00028},
			{460,	2,	20,	100,	1,	4,	8,	0.00028},
			{461,	2,	21,	150,	1,	4,	8,	0.00028},
			{462,	2,	23,	200,	1,	4,	8,	0.00028},
			{463,	2,	24,	250,	1,	4,	8,	0.00028},
			{464,	2,	25,	300,	1,	4,	8,	0.00028},
			{465,	2,	30,	100,	1,	4,	8,	0.00028},
			{466,	2,	31,	150,	1,	4,	8,	0.00028},
			{467,	2,	32,	200,	1,	4,	8,	0.00028},
			{468,	2,	34,	100,	1,	4,	8,	0.00028},
			{469,	2,	35,	150,	1,	4,	8,	0.00028},
			{470,	2,	40,	200,	1,	4,	8,	0.00028},
			{471,	2,	41,	250,	1,	4,	8,	0.00028},
			{472,	2,	42,	300,	1,	4,	8,	0.00028},
			{473,	2,	43,	100,	1,	4,	8,	0.00028},
			{474,	2,	45,	150,	1,	4,	8,	0.00028},
			{475,	2,	50,	200,	1,	4,	8,	0.00028},
			{476,	2,	51,	250,	1,	4,	8,	0.00028},
			{477,	2,	52,	300,	1,	4,	8,	0.00028},
			{478,	2,	53,	100,	1,	4,	8,	0.00028},
			{479,	2,	54,	150,	1,	4,	8,	0.00028},
			{480,	2,	01,	200,	1,	4,	8,	0.00028},
			{481,	2,	02,	250,	1,	4,	8,	0.00028},
			{482,	2,	03,	300,	1,	4,	8,	0.00028},
			{483,	2,	04,	100,	1,	4,	8,	0.00028},
			{484,	2,	05,	150,	1,	4,	8,	0.00028},
			{485,	2,	10,	200,	1,	4,	8,	0.00028},
			{486,	2,	12,	100,	1,	4,	8,	0.00028},
			{487,	2,	13,	150,	1,	4,	8,	0.00028},
			{488,	2,	14,	200,	1,	4,	8,	0.00028},
			{489,	2,	15,	250,	1,	4,	8,	0.00028},
			{490,	2,	20,	300,	1,	4,	8,	0.00028},
			{491,	2,	21,	100,	1,	4,	8,	0.00028},
			{492,	2,	23,	150,	1,	4,	8,	0.00028},
			{493,	2,	24,	200,	1,	4,	8,	0.00028},
			{494,	2,	25,	250,	1,	4,	8,	0.00028},
			{495,	2,	30,	300,	1,	4,	8,	0.00028},
			{496,	2,	31,	100,	1,	4,	8,	0.00028},
			{497,	2,	32,	150,	1,	4,	8,	0.00028},
			{498,	2,	34,	200,	1,	4,	8,	0.00028},
};
return SFC2;	
};

public static double[][] Sfunction3()
{

	//These are the SFCs that has 1 VNF, format: {SCF#, type# , source , destination, BW , Delay , VNF1 cores , VNF2 cores , VNF3 cores}
	double[][] SFC3 = {
			
			
			{0,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{1,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{2,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{3,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{4,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{5,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{6,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{7,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{8,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{9,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{10,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{11,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{12,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{13,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{14,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{15,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{16,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{17,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{18,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{19,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{20,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{21,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{22,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{23,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{24,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{25,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{26,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{27,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{28,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{29,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{30,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{31,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{32,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{33,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{34,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{35,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{36,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{37,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{38,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{39,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{40,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{41,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{42,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{43,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{44,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{45,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{46,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{47,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{48,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
			{49,	3,	35,	250,	1,	4,	8,	4,	0.00036276},
			{50,	3,	40,	300,	1,	4,	8,	4,	0.00036276},
			{51,	3,	41,	100,	1,	4,	8,	4,	0.00036276},
			{52,	3,	42,	150,	1,	4,	8,	4,	0.00036276},
			{53,	3,	43,	200,	1,	4,	8,	4,	0.00036276},
			{54,	3,	45,	100,	1,	4,	8,	4,	0.00036276},
			{55,	3,	50,	150,	1,	4,	8,	4,	0.00036276},
			{56,	3,	51,	200,	1,	4,	8,	4,	0.00036276},
			{57,	3,	52,	250,	1,	4,	8,	4,	0.00036276},
			{58,	3,	53,	300,	1,	4,	8,	4,	0.00036276},
			{59,	3,	54,	100,	1,	4,	8,	4,	0.00036276},
			{60,	3,	01,	150,	1,	4,	8,	4,	0.00036276},
			{61,	3,	02,	200,	1,	4,	8,	4,	0.00036276},
			{62,	3,	03,	250,	1,	4,	8,	4,	0.00036276},
			{63,	3,	04,	300,	1,	4,	8,	4,	0.00036276},
			{64,	3,	05,	100,	1,	4,	8,	4,	0.00036276},
			{65,	3,	10,	150,	1,	4,	8,	4,	0.00036276},
			{66,	3,	12,	200,	1,	4,	8,	4,	0.00036276},
			{67,	3,	13,	250,	1,	4,	8,	4,	0.00036276},
			{68,	3,	14,	300,	1,	4,	8,	4,	0.00036276},
			{69,	3,	15,	100,	1,	4,	8,	4,	0.00036276},
			{70,	3,	20,	150,	1,	4,	8,	4,	0.00036276},
			{71,	3,	21,	200,	1,	4,	8,	4,	0.00036276},
			{72,	3,	23,	100,	1,	4,	8,	4,	0.00036276},
			{73,	3,	24,	150,	1,	4,	8,	4,	0.00036276},
			{74,	3,	25,	200,	1,	4,	8,	4,	0.00036276},
			{75,	3,	30,	250,	1,	4,	8,	4,	0.00036276},
			{76,	3,	31,	300,	1,	4,	8,	4,	0.00036276},
			{77,	3,	32,	100,	1,	4,	8,	4,	0.00036276},
			{78,	3,	34,	150,	1,	4,	8,	4,	0.00036276},
			{79,	3,	35,	200,	1,	4,	8,	4,	0.00036276},
			{80,	3,	40,	250,	1,	4,	8,	4,	0.00036276},
			{81,	3,	41,	300,	1,	4,	8,	4,	0.00036276},
			{82,	3,	42,	100,	1,	4,	8,	4,	0.00036276},
			{83,	3,	43,	150,	1,	4,	8,	4,	0.00036276},
			{84,	3,	45,	200,	1,	4,	8,	4,	0.00036276},
			{85,	3,	50,	250,	1,	4,	8,	4,	0.00036276},
			{86,	3,	51,	300,	1,	4,	8,	4,	0.00036276},
			{87,	3,	52,	100,	1,	4,	8,	4,	0.00036276},
			{88,	3,	53,	150,	1,	4,	8,	4,	0.00036276},
			{89,	3,	54,	200,	1,	4,	8,	4,	0.00036276},
			{90,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{91,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{92,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{93,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{94,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{95,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{96,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{97,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{98,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{99,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{100,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{101,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{102,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{103,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{104,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{105,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{106,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{107,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{108,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{109,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{110,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{111,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{112,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{113,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{114,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{115,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{116,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{117,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{118,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{119,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{120,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{121,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{122,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{123,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{124,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{125,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{126,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{127,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{128,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{129,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{130,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{131,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{132,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{133,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{134,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{135,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{136,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{137,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{138,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
			{139,	3,	35,	250,	1,	4,	8,	4,	0.00036276},
			{140,	3,	40,	300,	1,	4,	8,	4,	0.00036276},
			{141,	3,	41,	100,	1,	4,	8,	4,	0.00036276},
			{142,	3,	42,	150,	1,	4,	8,	4,	0.00036276},
			{143,	3,	43,	200,	1,	4,	8,	4,	0.00036276},
			{144,	3,	45,	100,	1,	4,	8,	4,	0.00036276},
			{145,	3,	50,	150,	1,	4,	8,	4,	0.00036276},
			{146,	3,	51,	200,	1,	4,	8,	4,	0.00036276},
			{147,	3,	52,	250,	1,	4,	8,	4,	0.00036276},
			{148,	3,	53,	300,	1,	4,	8,	4,	0.00036276},
			{149,	3,	54,	100,	1,	4,	8,	4,	0.00036276},
			{150,	3,	01,	150,	1,	4,	8,	4,	0.00036276},
			{151,	3,	02,	200,	1,	4,	8,	4,	0.00036276},
			{152,	3,	03,	250,	1,	4,	8,	4,	0.00036276},
			{153,	3,	04,	300,	1,	4,	8,	4,	0.00036276},
			{154,	3,	05,	100,	1,	4,	8,	4,	0.00036276},
			{155,	3,	10,	150,	1,	4,	8,	4,	0.00036276},
			{156,	3,	12,	200,	1,	4,	8,	4,	0.00036276},
			{157,	3,	13,	250,	1,	4,	8,	4,	0.00036276},
			{158,	3,	14,	300,	1,	4,	8,	4,	0.00036276},
			{159,	3,	15,	100,	1,	4,	8,	4,	0.00036276},
			{160,	3,	20,	150,	1,	4,	8,	4,	0.00036276},
			{161,	3,	21,	200,	1,	4,	8,	4,	0.00036276},
			{162,	3,	23,	100,	1,	4,	8,	4,	0.00036276},
			{163,	3,	24,	150,	1,	4,	8,	4,	0.00036276},
			{164,	3,	25,	200,	1,	4,	8,	4,	0.00036276},
			{165,	3,	30,	250,	1,	4,	8,	4,	0.00036276},
			{166,	3,	31,	300,	1,	4,	8,	4,	0.00036276},
			{167,	3,	32,	100,	1,	4,	8,	4,	0.00036276},
			{168,	3,	34,	150,	1,	4,	8,	4,	0.00036276},
			{169,	3,	35,	200,	1,	4,	8,	4,	0.00036276},
			{170,	3,	40,	250,	1,	4,	8,	4,	0.00036276},
			{171,	3,	41,	300,	1,	4,	8,	4,	0.00036276},
			{172,	3,	42,	100,	1,	4,	8,	4,	0.00036276},
			{173,	3,	43,	150,	1,	4,	8,	4,	0.00036276},
			{174,	3,	45,	200,	1,	4,	8,	4,	0.00036276},
			{175,	3,	50,	250,	1,	4,	8,	4,	0.00036276},
			{176,	3,	51,	300,	1,	4,	8,	4,	0.00036276},
			{177,	3,	52,	100,	1,	4,	8,	4,	0.00036276},
			{178,	3,	53,	150,	1,	4,	8,	4,	0.00036276},
			{179,	3,	54,	200,	1,	4,	8,	4,	0.00036276},
			{180,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{181,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{182,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{183,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{184,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{185,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{186,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{187,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{188,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{189,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{190,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{191,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{192,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{193,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{194,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{195,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{196,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{197,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{198,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{199,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{200,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{201,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{202,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{203,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{204,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{205,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{206,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{207,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{208,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{209,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{210,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{211,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{212,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{213,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{214,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{215,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{216,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{217,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{218,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{219,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{220,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{221,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{222,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{223,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{224,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{225,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{226,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{227,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{228,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
			{229,	3,	35,	250,	1,	4,	8,	4,	0.00036276},
			{230,	3,	40,	300,	1,	4,	8,	4,	0.00036276},
			{231,	3,	41,	100,	1,	4,	8,	4,	0.00036276},
			{232,	3,	42,	150,	1,	4,	8,	4,	0.00036276},
			{233,	3,	43,	200,	1,	4,	8,	4,	0.00036276},
			{234,	3,	45,	100,	1,	4,	8,	4,	0.00036276},
			{235,	3,	50,	150,	1,	4,	8,	4,	0.00036276},
			{236,	3,	51,	200,	1,	4,	8,	4,	0.00036276},
			{237,	3,	52,	250,	1,	4,	8,	4,	0.00036276},
			{238,	3,	53,	300,	1,	4,	8,	4,	0.00036276},
			{239,	3,	54,	100,	1,	4,	8,	4,	0.00036276},
			{240,	3,	01,	150,	1,	4,	8,	4,	0.00036276},
			{241,	3,	02,	200,	1,	4,	8,	4,	0.00036276},
			{242,	3,	03,	250,	1,	4,	8,	4,	0.00036276},
			{243,	3,	04,	300,	1,	4,	8,	4,	0.00036276},
			{244,	3,	05,	100,	1,	4,	8,	4,	0.00036276},
			{245,	3,	10,	150,	1,	4,	8,	4,	0.00036276},
			{246,	3,	12,	200,	1,	4,	8,	4,	0.00036276},
			{247,	3,	13,	250,	1,	4,	8,	4,	0.00036276},
			{248,	3,	14,	300,	1,	4,	8,	4,	0.00036276},
			{249,	3,	15,	100,	1,	4,	8,	4,	0.00036276},
			{250,	3,	20,	150,	1,	4,	8,	4,	0.00036276},
			{251,	3,	21,	200,	1,	4,	8,	4,	0.00036276},
			{252,	3,	23,	100,	1,	4,	8,	4,	0.00036276},
			{253,	3,	24,	150,	1,	4,	8,	4,	0.00036276},
			{254,	3,	25,	200,	1,	4,	8,	4,	0.00036276},
			{255,	3,	30,	250,	1,	4,	8,	4,	0.00036276},
			{256,	3,	31,	300,	1,	4,	8,	4,	0.00036276},
			{257,	3,	32,	100,	1,	4,	8,	4,	0.00036276},
			{258,	3,	34,	150,	1,	4,	8,	4,	0.00036276},
			{259,	3,	35,	200,	1,	4,	8,	4,	0.00036276},
			{260,	3,	40,	250,	1,	4,	8,	4,	0.00036276},
			{261,	3,	41,	300,	1,	4,	8,	4,	0.00036276},
			{262,	3,	42,	100,	1,	4,	8,	4,	0.00036276},
			{263,	3,	43,	150,	1,	4,	8,	4,	0.00036276},
			{264,	3,	45,	200,	1,	4,	8,	4,	0.00036276},
			{265,	3,	50,	250,	1,	4,	8,	4,	0.00036276},
			{266,	3,	51,	300,	1,	4,	8,	4,	0.00036276},
			{267,	3,	52,	100,	1,	4,	8,	4,	0.00036276},
			{268,	3,	53,	150,	1,	4,	8,	4,	0.00036276},
			{269,	3,	54,	200,	1,	4,	8,	4,	0.00036276},
			{270,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{271,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{272,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{273,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{274,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{275,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{276,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{277,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{278,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{279,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{280,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{281,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{282,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{283,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{284,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{285,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{286,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{287,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{288,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{289,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{290,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{291,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{292,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{293,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{294,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{295,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{296,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{297,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{298,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{299,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{300,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{301,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{302,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{303,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{304,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{305,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{306,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{307,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{308,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{309,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{310,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{311,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{312,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{313,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{314,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{315,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{316,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{317,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{318,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
			{319,	3,	35,	250,	1,	4,	8,	4,	0.00036276},
			{320,	3,	40,	300,	1,	4,	8,	4,	0.00036276},
			{321,	3,	41,	100,	1,	4,	8,	4,	0.00036276},
			{322,	3,	42,	150,	1,	4,	8,	4,	0.00036276},
			{323,	3,	43,	200,	1,	4,	8,	4,	0.00036276},
			{324,	3,	45,	100,	1,	4,	8,	4,	0.00036276},
			{325,	3,	50,	150,	1,	4,	8,	4,	0.00036276},
			{326,	3,	51,	200,	1,	4,	8,	4,	0.00036276},
			{327,	3,	52,	250,	1,	4,	8,	4,	0.00036276},
			{328,	3,	53,	300,	1,	4,	8,	4,	0.00036276},
			{329,	3,	54,	100,	1,	4,	8,	4,	0.00036276},
			{330,	3,	01,	150,	1,	4,	8,	4,	0.00036276},
			{331,	3,	02,	200,	1,	4,	8,	4,	0.00036276},
			{332,	3,	03,	250,	1,	4,	8,	4,	0.00036276},
			{333,	3,	04,	300,	1,	4,	8,	4,	0.00036276},
			{334,	3,	05,	100,	1,	4,	8,	4,	0.00036276},
			{335,	3,	10,	150,	1,	4,	8,	4,	0.00036276},
			{336,	3,	12,	200,	1,	4,	8,	4,	0.00036276},
			{337,	3,	13,	250,	1,	4,	8,	4,	0.00036276},
			{338,	3,	14,	300,	1,	4,	8,	4,	0.00036276},
			{339,	3,	15,	100,	1,	4,	8,	4,	0.00036276},
			{340,	3,	20,	150,	1,	4,	8,	4,	0.00036276},
			{341,	3,	21,	200,	1,	4,	8,	4,	0.00036276},
			{342,	3,	23,	100,	1,	4,	8,	4,	0.00036276},
			{343,	3,	24,	150,	1,	4,	8,	4,	0.00036276},
			{344,	3,	25,	200,	1,	4,	8,	4,	0.00036276},
			{345,	3,	30,	250,	1,	4,	8,	4,	0.00036276},
			{346,	3,	31,	300,	1,	4,	8,	4,	0.00036276},
			{347,	3,	32,	100,	1,	4,	8,	4,	0.00036276},
			{348,	3,	34,	150,	1,	4,	8,	4,	0.00036276},
			{349,	3,	35,	200,	1,	4,	8,	4,	0.00036276},
			{350,	3,	40,	250,	1,	4,	8,	4,	0.00036276},
			{351,	3,	41,	300,	1,	4,	8,	4,	0.00036276},
			{352,	3,	42,	100,	1,	4,	8,	4,	0.00036276},
			{353,	3,	43,	150,	1,	4,	8,	4,	0.00036276},
			{354,	3,	45,	200,	1,	4,	8,	4,	0.00036276},
			{355,	3,	50,	250,	1,	4,	8,	4,	0.00036276},
			{356,	3,	51,	300,	1,	4,	8,	4,	0.00036276},
			{357,	3,	52,	100,	1,	4,	8,	4,	0.00036276},
			{358,	3,	53,	150,	1,	4,	8,	4,	0.00036276},
			{359,	3,	54,	200,	1,	4,	8,	4,	0.00036276},
			{360,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{361,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{362,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{363,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{364,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{365,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{366,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{367,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{368,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{369,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{370,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{371,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{372,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{373,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{374,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{375,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{376,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{377,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{378,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{379,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{380,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{381,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{382,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{383,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{384,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{385,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{386,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{387,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{388,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{389,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{390,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{391,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{392,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{393,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{394,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{395,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{396,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{398,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{397,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{399,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{400,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{401,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{402,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{403,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{404,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{405,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{406,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{407,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{408,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
			{409,	3,	35,	250,	1,	4,	8,	4,	0.00036276},
			{410,	3,	40,	300,	1,	4,	8,	4,	0.00036276},
			{411,	3,	41,	100,	1,	4,	8,	4,	0.00036276},
			{412,	3,	42,	150,	1,	4,	8,	4,	0.00036276},
			{413,	3,	43,	200,	1,	4,	8,	4,	0.00036276},
			{414,	3,	45,	100,	1,	4,	8,	4,	0.00036276},
			{415,	3,	50,	150,	1,	4,	8,	4,	0.00036276},
			{416,	3,	51,	200,	1,	4,	8,	4,	0.00036276},
			{417,	3,	52,	250,	1,	4,	8,	4,	0.00036276},
			{418,	3,	53,	300,	1,	4,	8,	4,	0.00036276},
			{419,	3,	54,	100,	1,	4,	8,	4,	0.00036276},
			{420,	3,	01,	150,	1,	4,	8,	4,	0.00036276},
			{421,	3,	02,	200,	1,	4,	8,	4,	0.00036276},
			{422,	3,	03,	250,	1,	4,	8,	4,	0.00036276},
			{423,	3,	04,	300,	1,	4,	8,	4,	0.00036276},
			{424,	3,	05,	100,	1,	4,	8,	4,	0.00036276},
			{425,	3,	10,	150,	1,	4,	8,	4,	0.00036276},
			{426,	3,	12,	200,	1,	4,	8,	4,	0.00036276},
			{427,	3,	13,	250,	1,	4,	8,	4,	0.00036276},
			{428,	3,	14,	300,	1,	4,	8,	4,	0.00036276},
			{429,	3,	15,	100,	1,	4,	8,	4,	0.00036276},
			{430,	3,	20,	150,	1,	4,	8,	4,	0.00036276},
			{431,	3,	21,	200,	1,	4,	8,	4,	0.00036276},
			{432,	3,	23,	100,	1,	4,	8,	4,	0.00036276},
			{433,	3,	24,	150,	1,	4,	8,	4,	0.00036276},
			{434,	3,	25,	200,	1,	4,	8,	4,	0.00036276},
			{435,	3,	30,	250,	1,	4,	8,	4,	0.00036276},
			{436,	3,	31,	300,	1,	4,	8,	4,	0.00036276},
			{437,	3,	32,	100,	1,	4,	8,	4,	0.00036276},
			{438,	3,	34,	150,	1,	4,	8,	4,	0.00036276},
			{439,	3,	35,	200,	1,	4,	8,	4,	0.00036276},
			{440,	3,	40,	250,	1,	4,	8,	4,	0.00036276},
			{441,	3,	41,	300,	1,	4,	8,	4,	0.00036276},
			{442,	3,	42,	100,	1,	4,	8,	4,	0.00036276},
			{443,	3,	43,	150,	1,	4,	8,	4,	0.00036276},
			{444,	3,	45,	200,	1,	4,	8,	4,	0.00036276},
			{445,	3,	50,	250,	1,	4,	8,	4,	0.00036276},
			{446,	3,	51,	300,	1,	4,	8,	4,	0.00036276},
			{447,	3,	52,	100,	1,	4,	8,	4,	0.00036276},
			{448,	3,	53,	150,	1,	4,	8,	4,	0.00036276},
			{449,	3,	54,	200,	1,	4,	8,	4,	0.00036276},
			{450,	3,	01,	100,	1,	4,	8,	4,	0.00036276},
			{451,	3,	02,	150,	1,	4,	8,	4,	0.00036276},
			{452,	3,	03,	200,	1,	4,	8,	4,	0.00036276},
			{453,	3,	04,	250,	1,	4,	8,	4,	0.00036276},
			{454,	3,	05,	300,	1,	4,	8,	4,	0.00036276},
			{455,	3,	10,	100,	1,	4,	8,	4,	0.00036276},
			{456,	3,	12,	150,	1,	4,	8,	4,	0.00036276},
			{457,	3,	13,	200,	1,	4,	8,	4,	0.00036276},
			{458,	3,	14,	250,	1,	4,	8,	4,	0.00036276},
			{459,	3,	15,	300,	1,	4,	8,	4,	0.00036276},
			{460,	3,	20,	100,	1,	4,	8,	4,	0.00036276},
			{461,	3,	21,	150,	1,	4,	8,	4,	0.00036276},
			{462,	3,	23,	200,	1,	4,	8,	4,	0.00036276},
			{463,	3,	24,	250,	1,	4,	8,	4,	0.00036276},
			{464,	3,	25,	300,	1,	4,	8,	4,	0.00036276},
			{465,	3,	30,	100,	1,	4,	8,	4,	0.00036276},
			{466,	3,	31,	150,	1,	4,	8,	4,	0.00036276},
			{467,	3,	32,	200,	1,	4,	8,	4,	0.00036276},
			{468,	3,	34,	100,	1,	4,	8,	4,	0.00036276},
			{469,	3,	35,	150,	1,	4,	8,	4,	0.00036276},
			{470,	3,	40,	200,	1,	4,	8,	4,	0.00036276},
			{471,	3,	41,	250,	1,	4,	8,	4,	0.00036276},
			{472,	3,	42,	300,	1,	4,	8,	4,	0.00036276},
			{473,	3,	43,	100,	1,	4,	8,	4,	0.00036276},
			{474,	3,	45,	150,	1,	4,	8,	4,	0.00036276},
			{475,	3,	50,	200,	1,	4,	8,	4,	0.00036276},
			{476,	3,	51,	250,	1,	4,	8,	4,	0.00036276},
			{477,	3,	52,	300,	1,	4,	8,	4,	0.00036276},
			{478,	3,	53,	100,	1,	4,	8,	4,	0.00036276},
			{479,	3,	54,	150,	1,	4,	8,	4,	0.00036276},
			{480,	3,	01,	200,	1,	4,	8,	4,	0.00036276},
			{481,	3,	02,	250,	1,	4,	8,	4,	0.00036276},
			{482,	3,	03,	300,	1,	4,	8,	4,	0.00036276},
			{483,	3,	04,	100,	1,	4,	8,	4,	0.00036276},
			{484,	3,	05,	150,	1,	4,	8,	4,	0.00036276},
			{485,	3,	10,	200,	1,	4,	8,	4,	0.00036276},
			{486,	3,	12,	100,	1,	4,	8,	4,	0.00036276},
			{487,	3,	13,	150,	1,	4,	8,	4,	0.00036276},
			{488,	3,	14,	200,	1,	4,	8,	4,	0.00036276},
			{489,	3,	15,	250,	1,	4,	8,	4,	0.00036276},
			{490,	3,	20,	300,	1,	4,	8,	4,	0.00036276},
			{491,	3,	21,	100,	1,	4,	8,	4,	0.00036276},
			{492,	3,	23,	150,	1,	4,	8,	4,	0.00036276},
			{493,	3,	24,	200,	1,	4,	8,	4,	0.00036276},
			{494,	3,	25,	250,	1,	4,	8,	4,	0.00036276},
			{495,	3,	30,	300,	1,	4,	8,	4,	0.00036276},
			{496,	3,	31,	100,	1,	4,	8,	4,	0.00036276},
			{497,	3,	32,	150,	1,	4,	8,	4,	0.00036276},
			{498,	3,	34,	200,	1,	4,	8,	4,	0.00036276},
};
return SFC3;
};

public static int[][] Allpathsused1()
{
	// This matrix saves all the paths in the network, format: {Path numb, source-destination , path type , server numb , server utilization}.
	int[][] paths1 = {
			
			{0,	0,	25,	13,	0,	0},
			{1,	1,	25,	13,	1,	0},
			{2,	2,	25,	13,	2,	0},
			{3,	3,	25,	13,	3,	0},
			{4,	4,	25,	13,	4,	0},
			{5,	5,	25,	13,	5,	0},
			{6,	6,	25,	13,	6,	0},
			{7,	7,	25,	13,	7,	0},
			{8,	8,	25,	13,	8,	0},
			{9,	9,	25,	13,	9,	0},
			{10,	10,	25,	13,	10,	0},
			{11,	11,	25,	13,	11,	0},
			{12,	12,	25,	13,	12,	0},
			{13,	13,	25,	13,	13,	0},
			{14,	14,	25,	13,	14,	0},
			{15,	15,	25,	13,	15,	0},
			{16,	16,	25,	13,	0,	0},
			{17,	17,	25,	13,	1,	0},
			{18,	18,	25,	13,	2,	0},
			{19,	19,	25,	13,	3,	0},
			{20,	20,	25,	13,	4,	0},
			{21,	21,	25,	13,	5,	0},
			{22,	22,	25,	13,	6,	0},
			{23,	23,	25,	13,	7,	0},
			{24,	24,	25,	13,	8,	0},
			{25,	25,	25,	13,	9,	0},
			{26,	26,	25,	13,	10,	0},
			{27,	27,	25,	13,	11,	0},
			{28,	28,	25,	13,	12,	0},
			{29,	29,	25,	13,	13,	0},
			{30,	30,	25,	13,	14,	0},
			{31,	31,	25,	13,	15,	0},
			{32,	32,	52,	13,	0,	0},
			{33,	33,	52,	13,	1,	0},
			{34,	34,	52,	13,	2,	0},
			{35,	35,	52,	13,	3,	0},
			{36,	36,	52,	13,	4,	0},
			{37,	37,	52,	13,	5,	0},
			{38,	38,	52,	13,	6,	0},
			{39,	39,	52,	13,	7,	0},
			{40,	40,	52,	13,	8,	0},
			{41,	41,	52,	13,	9,	0},
			{42,	42,	52,	13,	10,	0},
			{43,	43,	52,	13,	11,	0},
			{44,	44,	52,	13,	12,	0},
			{45,	45,	52,	13,	13,	0},
			{46,	46,	52,	13,	14,	0},
			{47,	47,	52,	13,	15,	0},
			{48,	48,	52,	13,	0,	0},
			{49,	49,	52,	13,	1,	0},
			{50,	50,	52,	13,	2,	0},
			{51,	51,	52,	13,	3,	0},
			{52,	52,	52,	13,	4,	0},
			{53,	53,	52,	13,	5,	0},
			{54,	54,	52,	13,	6,	0},
			{55,	55,	52,	13,	7,	0},
			{56,	56,	52,	13,	8,	0},
			{57,	57,	52,	13,	9,	0},
			{58,	58,	52,	13,	10,	0},
			{59,	59,	52,	13,	11,	0},
			{60,	60,	52,	13,	12,	0},
			{61,	61,	52,	13,	13,	0},
			{62,	62,	52,	13,	14,	0},
			{63,	63,	52,	13,	15,	0},
			{64,	0,	24,	15,	16,	0},
			{65,	1,	24,	15,	17,	0},
			{66,	2,	24,	15,	18,	0},
			{67,	3,	24,	15,	19,	0},
			{68,	4,	24,	15,	20,	0},
			{69,	5,	24,	15,	21,	0},
			{70,	6,	24,	15,	22,	0},
			{71,	7,	24,	15,	23,	0},
			{72,	8,	24,	15,	24,	0},
			{73,	9,	24,	15,	25,	0},
			{74,	10,	24,	15,	26,	0},
			{75,	11,	24,	15,	27,	0},
			{76,	12,	24,	15,	28,	0},
			{77,	13,	24,	15,	29,	0},
			{78,	14,	24,	15,	30,	0},
			{79,	15,	24,	15,	31,	0},
			{80,	16,	24,	15,	16,	0},
			{81,	17,	24,	15,	17,	0},
			{82,	18,	24,	15,	18,	0},
			{83,	19,	24,	15,	19,	0},
			{84,	20,	24,	15,	20,	0},
			{85,	21,	24,	15,	21,	0},
			{86,	22,	24,	15,	22,	0},
			{87,	23,	24,	15,	23,	0},
			{88,	24,	24,	15,	24,	0},
			{89,	25,	24,	15,	25,	0},
			{90,	26,	24,	15,	26,	0},
			{91,	27,	24,	15,	27,	0},
			{92,	28,	24,	15,	28,	0},
			{93,	29,	24,	15,	29,	0},
			{94,	30,	24,	15,	30,	0},
			{95,	31,	24,	15,	31,	0},
			{96,	32,	42,	15,	16,	0},
			{97,	33,	42,	15,	17,	0},
			{98,	34,	42,	15,	18,	0},
			{99,	35,	42,	15,	19,	0},
			{100,	36,	42,	15,	20,	0},
			{101,	37,	42,	15,	21,	0},
			{102,	38,	42,	15,	22,	0},
			{103,	39,	42,	15,	23,	0},
			{104,	40,	42,	15,	24,	0},
			{105,	41,	42,	15,	25,	0},
			{106,	42,	42,	15,	26,	0},
			{107,	43,	42,	15,	27,	0},
			{108,	44,	42,	15,	28,	0},
			{109,	45,	42,	15,	29,	0},
			{110,	46,	42,	15,	30,	0},
			{111,	47,	42,	15,	31,	0},
			{112,	48,	42,	15,	16,	0},
			{113,	49,	42,	15,	17,	0},
			{114,	50,	42,	15,	18,	0},
			{115,	51,	42,	15,	19,	0},
			{116,	52,	42,	15,	20,	0},
			{117,	53,	42,	15,	21,	0},
			{118,	54,	42,	15,	22,	0},
			{119,	55,	42,	15,	23,	0},
			{120,	56,	42,	15,	24,	0},
			{121,	57,	42,	15,	25,	0},
			{122,	58,	42,	15,	26,	0},
			{123,	59,	42,	15,	27,	0},
			{124,	60,	42,	15,	28,	0},
			{125,	61,	42,	15,	29,	0},
			{126,	62,	42,	15,	30,	0},
			{127,	63,	42,	15,	31,	0},
			{128,	64,	25,	15,	16,	0},
			{129,	65,	25,	15,	17,	0},
			{130,	66,	25,	15,	18,	0},
			{131,	67,	25,	15,	19,	0},
			{132,	68,	25,	15,	20,	0},
			{133,	69,	25,	15,	21,	0},
			{134,	70,	25,	15,	22,	0},
			{135,	71,	25,	15,	23,	0},
			{136,	72,	25,	15,	24,	0},
			{137,	73,	25,	15,	25,	0},
			{138,	74,	25,	15,	26,	0},
			{139,	75,	25,	15,	27,	0},
			{140,	76,	25,	15,	28,	0},
			{141,	77,	25,	15,	29,	0},
			{142,	78,	25,	15,	30,	0},
			{143,	79,	25,	15,	31,	0},
			{144,	80,	25,	15,	16,	0},
			{145,	81,	25,	15,	17,	0},
			{146,	82,	25,	15,	18,	0},
			{147,	83,	25,	15,	19,	0},
			{148,	84,	25,	15,	20,	0},
			{149,	85,	25,	15,	21,	0},
			{150,	86,	25,	15,	22,	0},
			{151,	87,	25,	15,	23,	0},
			{152,	88,	25,	15,	24,	0},
			{153,	89,	25,	15,	25,	0},
			{154,	90,	25,	15,	26,	0},
			{155,	91,	25,	15,	27,	0},
			{156,	92,	25,	15,	28,	0},
			{157,	93,	25,	15,	29,	0},
			{158,	94,	25,	15,	30,	0},
			{159,	95,	25,	15,	31,	0},
			{160,	96,	54,	15,	16,	0},
			{161,	97,	54,	15,	17,	0},
			{162,	98,	54,	15,	18,	0},
			{163,	99,	54,	15,	19,	0},
			{164,	100,	54,	15,	20,	0},
			{165,	101,	54,	15,	21,	0},
			{166,	102,	54,	15,	22,	0},
			{167,	103,	54,	15,	23,	0},
			{168,	104,	54,	15,	24,	0},
			{169,	105,	54,	15,	25,	0},
			{170,	106,	54,	15,	26,	0},
			{171,	107,	54,	15,	27,	0},
			{172,	108,	54,	15,	28,	0},
			{173,	109,	54,	15,	29,	0},
			{174,	110,	54,	15,	30,	0},
			{175,	111,	54,	15,	31,	0},
			{176,	112,	54,	15,	16,	0},
			{177,	113,	54,	15,	17,	0},
			{178,	114,	54,	15,	18,	0},
			{179,	115,	54,	15,	19,	0},
			{180,	116,	54,	15,	20,	0},
			{181,	117,	54,	15,	21,	0},
			{182,	118,	54,	15,	22,	0},
			{183,	119,	54,	15,	23,	0},
			{184,	120,	54,	15,	24,	0},
			{185,	121,	54,	15,	25,	0},
			{186,	122,	54,	15,	26,	0},
			{187,	123,	54,	15,	27,	0},
			{188,	124,	54,	15,	28,	0},
			{189,	125,	54,	15,	29,	0},
			{190,	126,	54,	15,	30,	0},
			{191,	127,	54,	15,	31,	0},
			{192,	0,	25,	17,	16,	0},
			{193,	1,	25,	17,	17,	0},
			{194,	2,	25,	17,	18,	0},
			{195,	3,	25,	17,	19,	0},
			{196,	4,	25,	17,	20,	0},
			{197,	5,	25,	17,	21,	0},
			{198,	6,	25,	17,	22,	0},
			{199,	7,	25,	17,	23,	0},
			{200,	8,	25,	17,	24,	0},
			{201,	9,	25,	17,	25,	0},
			{202,	10,	25,	17,	26,	0},
			{203,	11,	25,	17,	27,	0},
			{204,	12,	25,	17,	28,	0},
			{205,	13,	25,	17,	29,	0},
			{206,	14,	25,	17,	30,	0},
			{207,	15,	25,	17,	31,	0},
			{208,	16,	25,	17,	16,	0},
			{209,	17,	25,	17,	17,	0},
			{210,	18,	25,	17,	18,	0},
			{211,	19,	25,	17,	19,	0},
			{212,	20,	25,	17,	20,	0},
			{213,	21,	25,	17,	21,	0},
			{214,	22,	25,	17,	22,	0},
			{215,	23,	25,	17,	23,	0},
			{216,	24,	25,	17,	24,	0},
			{217,	25,	25,	17,	25,	0},
			{218,	26,	25,	17,	26,	0},
			{219,	27,	25,	17,	27,	0},
			{220,	28,	25,	17,	28,	0},
			{221,	29,	25,	17,	29,	0},
			{222,	30,	25,	17,	30,	0},
			{223,	31,	25,	17,	31,	0},
			{224,	32,	25,	17,	48,	0},
			{225,	33,	25,	17,	49,	0},
			{226,	34,	25,	17,	50,	0},
			{227,	35,	25,	17,	51,	0},
			{228,	36,	25,	17,	52,	0},
			{229,	37,	25,	17,	53,	0},
			{230,	38,	25,	17,	54,	0},
			{231,	39,	25,	17,	55,	0},
			{232,	40,	25,	17,	56,	0},
			{233,	41,	25,	17,	57,	0},
			{234,	42,	25,	17,	58,	0},
			{235,	43,	25,	17,	59,	0},
			{236,	44,	25,	17,	60,	0},
			{237,	45,	25,	17,	61,	0},
			{238,	46,	25,	17,	62,	0},
			{239,	47,	25,	17,	63,	0},
			{240,	48,	25,	17,	48,	0},
			{241,	49,	25,	17,	49,	0},
			{242,	50,	25,	17,	50,	0},
			{243,	51,	25,	17,	51,	0},
			{244,	52,	25,	17,	52,	0},
			{245,	53,	25,	17,	53,	0},
			{246,	54,	25,	17,	54,	0},
			{247,	55,	25,	17,	55,	0},
			{248,	56,	25,	17,	56,	0},
			{249,	57,	25,	17,	57,	0},
			{250,	58,	25,	17,	58,	0},
			{251,	59,	25,	17,	59,	0},
			{252,	60,	25,	17,	60,	0},
			{253,	61,	25,	17,	61,	0},
			{254,	62,	25,	17,	62,	0},
			{255,	63,	25,	17,	63,	0},
			{256,	2000,	02,	10,	16,	0},
			{257,	2001,	02,	10,	17,	0},
			{258,	2002,	02,	10,	18,	0},
			{259,	2003,	02,	10,	19,	0},
			{260,	2004,	02,	10,	20,	0},
			{261,	2005,	02,	10,	21,	0},
			{262,	2006,	02,	10,	22,	0},
			{263,	2007,	02,	10,	23,	0},
			{264,	2008,	02,	10,	16,	0},
			{265,	2009,	02,	10,	17,	0},
			{266,	2010,	02,	10,	18,	0},
			{267,	2011,	02,	10,	19,	0},
			{268,	2012,	02,	10,	20,	0},
			{269,	2013,	02,	10,	21,	0},
			{270,	2014,	02,	10,	22,	0},
			{271,	2015,	02,	10,	23,	0},
			{272,	2016,	02,	10,	48,	0},
			{273,	2017,	02,	10,	49,	0},
			{274,	2018,	02,	10,	50,	0},
			{275,	2019,	02,	10,	51,	0},
			{276,	2020,	02,	10,	52,	0},
			{277,	2021,	02,	10,	53,	0},
			{278,	2022,	02,	10,	54,	0},
			{279,	2023,	02,	10,	55,	0},
			{280,	2024,	02,	10,	48,	0},
			{281,	2025,	02,	10,	49,	0},
			{282,	2026,	02,	10,	50,	0},
			{283,	2027,	02,	10,	51,	0},
			{284,	2028,	02,	10,	52,	0},
			{285,	2029,	02,	10,	53,	0},
			{286,	2030,	02,	10,	54,	0},
			{287,	2031,	02,	10,	55,	0},
			{288,	2032,	05,	10,	16,	0},
			{289,	2033,	05,	10,	17,	0},
			{290,	2034,	05,	10,	18,	0},
			{291,	2035,	05,	10,	19,	0},
			{292,	2036,	05,	10,	20,	0},
			{293,	2037,	05,	10,	21,	0},
			{294,	2038,	05,	10,	22,	0},
			{295,	2039,	05,	10,	23,	0},
			{296,	2040,	05,	10,	16,	0},
			{297,	2041,	05,	10,	17,	0},
			{298,	2042,	05,	10,	18,	0},
			{299,	2043,	05,	10,	19,	0},
			{300,	2044,	05,	10,	20,	0},
			{301,	2045,	05,	10,	21,	0},
			{302,	2046,	05,	10,	22,	0},
			{303,	2047,	05,	10,	23,	0},
			{304,	2048,	05,	10,	48,	0},
			{305,	2049,	05,	10,	49,	0},
			{306,	2050,	05,	10,	50,	0},
			{307,	2051,	05,	10,	51,	0},
			{308,	2052,	05,	10,	52,	0},
			{309,	2053,	05,	10,	53,	0},
			{310,	2054,	05,	10,	54,	0},
			{311,	2055,	05,	10,	55,	0},
			{312,	2056,	05,	10,	48,	0},
			{313,	2057,	05,	10,	49,	0},
			{314,	2058,	05,	10,	50,	0},
			{315,	2059,	05,	10,	51,	0},
			{316,	2060,	05,	10,	52,	0},
			{317,	2061,	05,	10,	53,	0},
			{318,	2062,	05,	10,	54,	0},
			{319,	2063,	05,	10,	55,	0},
			{320,	2064,	05,	10,	56,	0},
			{321,	2065,	05,	10,	57,	0},
			{322,	2066,	05,	10,	58,	0},
			{323,	2067,	05,	10,	59,	0},
			{324,	2068,	05,	10,	60,	0},
			{325,	2069,	05,	10,	61,	0},
			{326,	2070,	05,	10,	62,	0},
			{327,	2071,	05,	10,	63,	0},
			{328,	2072,	12,	10,	16,	0},
			{329,	2073,	12,	10,	17,	0},
			{330,	2074,	12,	10,	18,	0},
			{331,	2075,	12,	10,	19,	0},
			{332,	2076,	12,	10,	20,	0},
			{333,	2077,	12,	10,	21,	0},
			{334,	2078,	12,	10,	22,	0},
			{335,	2079,	12,	10,	23,	0},
			{336,	2080,	12,	10,	16,	0},
			{337,	2081,	12,	10,	17,	0},
			{338,	2082,	12,	10,	18,	0},
			{339,	2083,	12,	10,	19,	0},
			{340,	2084,	12,	10,	20,	0},
			{341,	2085,	12,	10,	21,	0},
			{342,	2086,	12,	10,	22,	0},
			{343,	2087,	12,	10,	23,	0},
			{344,	2088,	12,	10,	48,	0},
			{345,	2089,	12,	10,	49,	0},
			{346,	2090,	12,	10,	50,	0},
			{347,	2091,	12,	10,	51,	0},
			{348,	2092,	12,	10,	52,	0},
			{349,	2093,	12,	10,	53,	0},
			{350,	2094,	12,	10,	54,	0},
			{351,	2095,	12,	10,	55,	0},
			{352,	2096,	12,	10,	48,	0},
			{353,	2097,	12,	10,	49,	0},
			{354,	2098,	12,	10,	50,	0},
			{355,	2099,	12,	10,	51,	0},
			{356,	2100,	12,	10,	52,	0},
			{357,	2101,	12,	10,	53,	0},
			{358,	2102,	12,	10,	54,	0},
			{359,	2103,	12,	10,	55,	0},
			{360,	2104,	15,	10,	16,	0},
			{361,	2105,	15,	10,	17,	0},
			{362,	2106,	15,	10,	18,	0},
			{363,	2107,	15,	10,	19,	0},
			{364,	2108,	15,	10,	20,	0},
			{365,	2109,	15,	10,	21,	0},
			{366,	2110,	15,	10,	22,	0},
			{367,	2111,	15,	10,	23,	0},
			{368,	2112,	15,	10,	16,	0},
			{369,	2113,	15,	10,	17,	0},
			{370,	2114,	15,	10,	18,	0},
			{371,	2115,	15,	10,	19,	0},
			{372,	2116,	15,	10,	20,	0},
			{373,	2117,	15,	10,	21,	0},
			{374,	2118,	15,	10,	22,	0},
			{375,	2119,	15,	10,	23,	0},
			{376,	2120,	15,	10,	48,	0},
			{377,	2121,	15,	10,	49,	0},
			{378,	2122,	15,	10,	50,	0},
			{379,	2123,	15,	10,	51,	0},
			{380,	2124,	15,	10,	52,	0},
			{381,	2125,	15,	10,	53,	0},
			{382,	2126,	15,	10,	54,	0},
			{383,	2127,	15,	10,	55,	0},
			{384,	2128,	15,	10,	48,	0},
			{385,	2129,	15,	10,	49,	0},
			{386,	2130,	15,	10,	50,	0},
			{387,	2131,	15,	10,	51,	0},
			{388,	2132,	15,	10,	52,	0},
			{389,	2133,	15,	10,	53,	0},
			{390,	2134,	15,	10,	54,	0},
			{391,	2135,	15,	10,	55,	0},
			{392,	2136,	15,	10,	56,	0},
			{393,	2137,	15,	10,	57,	0},
			{394,	2138,	15,	10,	58,	0},
			{395,	2139,	15,	10,	59,	0},
			{396,	2140,	15,	10,	60,	0},
			{397,	2141,	15,	10,	61,	0},
			{398,	2142,	15,	10,	62,	0},
			{399,	2143,	15,	10,	63,	0},
			{400,	2144,	20,	10,	16,	0},
			{401,	2145,	20,	10,	17,	0},
			{402,	2146,	20,	10,	18,	0},
			{403,	2147,	20,	10,	19,	0},
			{404,	2148,	20,	10,	20,	0},
			{405,	2149,	20,	10,	21,	0},
			{406,	2150,	20,	10,	22,	0},
			{407,	2151,	20,	10,	23,	0},
			{408,	2152,	20,	10,	16,	0},
			{409,	2153,	20,	10,	17,	0},
			{410,	2154,	20,	10,	18,	0},
			{411,	2155,	20,	10,	19,	0},
			{412,	2156,	20,	10,	20,	0},
			{413,	2157,	20,	10,	21,	0},
			{414,	2158,	20,	10,	22,	0},
			{415,	2159,	20,	10,	23,	0},
			{416,	2160,	20,	10,	24,	0},
			{417,	2161,	20,	10,	25,	0},
			{418,	2162,	20,	10,	26,	0},
			{419,	2163,	20,	10,	27,	0},
			{420,	2164,	20,	10,	28,	0},
			{421,	2165,	20,	10,	29,	0},
			{422,	2166,	20,	10,	30,	0},
			{423,	2167,	20,	10,	31,	0},
			{424,	2168,	20,	10,	24,	0},
			{425,	2169,	20,	10,	25,	0},
			{426,	2170,	20,	10,	26,	0},
			{427,	2171,	20,	10,	27,	0},
			{428,	2172,	20,	10,	28,	0},
			{429,	2173,	20,	10,	29,	0},
			{430,	2174,	20,	10,	30,	0},
			{431,	2175,	20,	10,	31,	0},
			{432,	2176,	20,	10,	48,	0},
			{433,	2177,	20,	10,	49,	0},
			{434,	2178,	20,	10,	50,	0},
			{435,	2179,	20,	10,	51,	0},
			{436,	2180,	20,	10,	52,	0},
			{437,	2181,	20,	10,	53,	0},
			{438,	2182,	20,	10,	54,	0},
			{439,	2183,	20,	10,	55,	0},
			{440,	2184,	20,	10,	48,	0},
			{441,	2185,	20,	10,	49,	0},
			{442,	2186,	20,	10,	50,	0},
			{443,	2187,	20,	10,	51,	0},
			{444,	2188,	20,	10,	52,	0},
			{445,	2189,	20,	10,	53,	0},
			{446,	2190,	20,	10,	54,	0},
			{447,	2191,	20,	10,	55,	0},
			{448,	2192,	20,	10,	56,	0},
			{449,	2193,	20,	10,	57,	0},
			{450,	2194,	20,	10,	58,	0},
			{451,	2195,	20,	10,	59,	0},
			{452,	2196,	20,	10,	60,	0},
			{453,	2197,	20,	10,	61,	0},
			{454,	2198,	20,	10,	62,	0},
			{455,	2199,	20,	10,	63,	0},
			{456,	2200,	21,	10,	16,	0},
			{457,	2201,	21,	10,	17,	0},
			{458,	2202,	21,	10,	18,	0},
			{459,	2203,	21,	10,	19,	0},
			{460,	2204,	21,	10,	20,	0},
			{461,	2205,	21,	10,	21,	0},
			{462,	2206,	21,	10,	22,	0},
			{463,	2207,	21,	10,	23,	0},
			{464,	2208,	21,	10,	16,	0},
			{465,	2209,	21,	10,	17,	0},
			{466,	2210,	21,	10,	18,	0},
			{467,	2211,	21,	10,	19,	0},
			{468,	2212,	21,	10,	20,	0},
			{469,	2213,	21,	10,	21,	0},
			{470,	2214,	21,	10,	22,	0},
			{471,	2215,	21,	10,	23,	0},
			{472,	2216,	21,	10,	24,	0},
			{473,	2217,	21,	10,	25,	0},
			{474,	2218,	21,	10,	26,	0},
			{475,	2219,	21,	10,	27,	0},
			{476,	2220,	21,	10,	28,	0},
			{477,	2221,	21,	10,	29,	0},
			{478,	2222,	21,	10,	30,	0},
			{479,	2223,	21,	10,	31,	0},
			{480,	2224,	21,	10,	24,	0},
			{481,	2225,	21,	10,	25,	0},
			{482,	2226,	21,	10,	26,	0},
			{483,	2227,	21,	10,	27,	0},
			{484,	2228,	21,	10,	28,	0},
			{485,	2229,	21,	10,	29,	0},
			{486,	2230,	21,	10,	30,	0},
			{487,	2231,	21,	10,	31,	0},
			{488,	2232,	21,	10,	48,	0},
			{489,	2233,	21,	10,	49,	0},
			{490,	2234,	21,	10,	50,	0},
			{491,	2235,	21,	10,	51,	0},
			{492,	2236,	21,	10,	52,	0},
			{493,	2237,	21,	10,	53,	0},
			{494,	2238,	21,	10,	54,	0},
			{495,	2239,	21,	10,	55,	0},
			{496,	2240,	21,	10,	48,	0},
			{497,	2241,	21,	10,	49,	0},
			{498,	2242,	21,	10,	50,	0},
			{499,	2243,	21,	10,	51,	0},
			{500,	2244,	21,	10,	52,	0},
			{501,	2245,	21,	10,	53,	0},
			{502,	2246,	21,	10,	54,	0},
			{503,	2247,	21,	10,	55,	0},
			{504,	2248,	21,	10,	56,	0},
			{505,	2249,	21,	10,	57,	0},
			{506,	2250,	21,	10,	58,	0},
			{507,	2251,	21,	10,	59,	0},
			{508,	2252,	21,	10,	60,	0},
			{509,	2253,	21,	10,	61,	0},
			{510,	2254,	21,	10,	62,	0},
			{511,	2255,	21,	10,	63,	0},
			{512,	2256,	23,	10,	16,	0},
			{513,	2257,	23,	10,	17,	0},
			{514,	2258,	23,	10,	18,	0},
			{515,	2259,	23,	10,	19,	0},
			{516,	2260,	23,	10,	20,	0},
			{517,	2261,	23,	10,	21,	0},
			{518,	2262,	23,	10,	22,	0},
			{519,	2263,	23,	10,	23,	0},
			{520,	2264,	23,	10,	16,	0},
			{521,	2265,	23,	10,	17,	0},
			{522,	2266,	23,	10,	18,	0},
			{523,	2267,	23,	10,	19,	0},
			{524,	2268,	23,	10,	20,	0},
			{525,	2269,	23,	10,	21,	0},
			{526,	2270,	23,	10,	22,	0},
			{527,	2271,	23,	10,	23,	0},
			{528,	2272,	23,	10,	24,	0},
			{529,	2273,	23,	10,	25,	0},
			{530,	2274,	23,	10,	26,	0},
			{531,	2275,	23,	10,	27,	0},
			{532,	2276,	23,	10,	28,	0},
			{533,	2277,	23,	10,	29,	0},
			{534,	2278,	23,	10,	30,	0},
			{535,	2279,	23,	10,	31,	0},
			{536,	2280,	23,	10,	24,	0},
			{537,	2281,	23,	10,	25,	0},
			{538,	2282,	23,	10,	26,	0},
			{539,	2283,	23,	10,	27,	0},
			{540,	2284,	23,	10,	28,	0},
			{541,	2285,	23,	10,	29,	0},
			{542,	2286,	23,	10,	30,	0},
			{543,	2287,	23,	10,	31,	0},
			{544,	2288,	23,	10,	48,	0},
			{545,	2289,	23,	10,	49,	0},
			{546,	2290,	23,	10,	50,	0},
			{547,	2291,	23,	10,	51,	0},
			{548,	2292,	23,	10,	52,	0},
			{549,	2293,	23,	10,	53,	0},
			{550,	2294,	23,	10,	54,	0},
			{551,	2295,	23,	10,	55,	0},
			{552,	2296,	23,	10,	48,	0},
			{553,	2297,	23,	10,	49,	0},
			{554,	2298,	23,	10,	50,	0},
			{555,	2299,	23,	10,	51,	0},
			{556,	2300,	23,	10,	52,	0},
			{557,	2301,	23,	10,	53,	0},
			{558,	2302,	23,	10,	54,	0},
			{559,	2303,	23,	10,	55,	0},
			{560,	2304,	23,	10,	56,	0},
			{561,	2305,	23,	10,	57,	0},
			{562,	2306,	23,	10,	58,	0},
			{563,	2307,	23,	10,	59,	0},
			{564,	2308,	23,	10,	60,	0},
			{565,	2309,	23,	10,	61,	0},
			{566,	2310,	23,	10,	62,	0},
			{567,	2311,	23,	10,	63,	0},
			{568,	2312,	24,	10,	0,	0},
			{569,	2313,	24,	10,	1,	0},
			{570,	2314,	24,	10,	2,	0},
			{571,	2315,	24,	10,	3,	0},
			{572,	2316,	24,	10,	4,	0},
			{573,	2317,	24,	10,	5,	0},
			{574,	2318,	24,	10,	6,	0},
			{575,	2319,	24,	10,	7,	0},
			{576,	2320,	24,	10,	0,	0},
			{577,	2321,	24,	10,	1,	0},
			{578,	2322,	24,	10,	2,	0},
			{579,	2323,	24,	10,	3,	0},
			{580,	2324,	24,	10,	4,	0},
			{581,	2325,	24,	10,	5,	0},
			{582,	2326,	24,	10,	6,	0},
			{583,	2327,	24,	10,	7,	0},
			{584,	2328,	24,	10,	8,	0},
			{585,	2329,	24,	10,	9,	0},
			{586,	2330,	24,	10,	10,	0},
			{587,	2331,	24,	10,	11,	0},
			{588,	2332,	24,	10,	12,	0},
			{589,	2333,	24,	10,	13,	0},
			{590,	2334,	24,	10,	14,	0},
			{591,	2335,	24,	10,	15,	0},
			{592,	2336,	24,	10,	8,	0},
			{593,	2337,	24,	10,	9,	0},
			{594,	2338,	24,	10,	10,	0},
			{595,	2339,	24,	10,	11,	0},
			{596,	2340,	24,	10,	12,	0},
			{597,	2341,	24,	10,	13,	0},
			{598,	2342,	24,	10,	14,	0},
			{599,	2343,	24,	10,	15,	0},
			{600,	2344,	24,	10,	32,	0},
			{601,	2345,	24,	10,	33,	0},
			{602,	2346,	24,	10,	34,	0},
			{603,	2347,	24,	10,	35,	0},
			{604,	2348,	24,	10,	36,	0},
			{605,	2349,	24,	10,	37,	0},
			{606,	2350,	24,	10,	38,	0},
			{607,	2351,	24,	10,	39,	0},
			{608,	2352,	24,	10,	32,	0},
			{609,	2353,	24,	10,	33,	0},
			{610,	2354,	24,	10,	34,	0},
			{611,	2355,	24,	10,	35,	0},
			{612,	2356,	24,	10,	36,	0},
			{613,	2357,	24,	10,	37,	0},
			{614,	2358,	24,	10,	38,	0},
			{615,	2359,	24,	10,	39,	0},
			{616,	2360,	24,	10,	40,	0},
			{617,	2361,	24,	10,	41,	0},
			{618,	2362,	24,	10,	42,	0},
			{619,	2363,	24,	10,	43,	0},
			{620,	2364,	24,	10,	44,	0},
			{621,	2365,	24,	10,	45,	0},
			{622,	2366,	24,	10,	46,	0},
			{623,	2367,	24,	10,	47,	0},
			{624,	2368,	24,	10,	40,	0},
			{625,	2369,	24,	10,	41,	0},
			{626,	2370,	24,	10,	42,	0},
			{627,	2371,	24,	10,	43,	0},
			{628,	2372,	24,	10,	44,	0},
			{629,	2373,	24,	10,	45,	0},
			{630,	2374,	24,	10,	46,	0},
			{631,	2375,	24,	10,	47,	0},
			{632,	2376,	25,	10,	32,	0},
			{633,	2377,	25,	10,	33,	0},
			{634,	2378,	25,	10,	34,	0},
			{635,	2379,	25,	10,	35,	0},
			{636,	2380,	25,	10,	36,	0},
			{637,	2381,	25,	10,	37,	0},
			{638,	2382,	25,	10,	38,	0},
			{639,	2383,	25,	10,	39,	0},
			{640,	2384,	25,	10,	32,	0},
			{641,	2385,	25,	10,	33,	0},
			{642,	2386,	25,	10,	34,	0},
			{643,	2387,	25,	10,	35,	0},
			{644,	2388,	25,	10,	36,	0},
			{645,	2389,	25,	10,	37,	0},
			{646,	2390,	25,	10,	38,	0},
			{647,	2391,	25,	10,	39,	0},
			{648,	2392,	25,	10,	32,	0},
			{649,	2393,	25,	10,	33,	0},
			{650,	2394,	25,	10,	34,	0},
			{651,	2395,	25,	10,	35,	0},
			{652,	2396,	25,	10,	36,	0},
			{653,	2397,	25,	10,	37,	0},
			{654,	2398,	25,	10,	38,	0},
			{655,	2399,	25,	10,	39,	0},
			{656,	2400,	25,	10,	32,	0},
			{657,	2401,	25,	10,	33,	0},
			{658,	2402,	25,	10,	34,	0},
			{659,	2403,	25,	10,	35,	0},
			{660,	2404,	25,	10,	36,	0},
			{661,	2405,	25,	10,	37,	0},
			{662,	2406,	25,	10,	38,	0},
			{663,	2407,	25,	10,	39,	0},
			{664,	2408,	25,	10,	40,	0},
			{665,	2409,	25,	10,	41,	0},
			{666,	2410,	25,	10,	42,	0},
			{667,	2411,	25,	10,	43,	0},
			{668,	2412,	25,	10,	44,	0},
			{669,	2413,	25,	10,	45,	0},
			{670,	2414,	25,	10,	46,	0},
			{671,	2415,	25,	10,	47,	0},
			{672,	2416,	25,	10,	40,	0},
			{673,	2417,	25,	10,	41,	0},
			{674,	2418,	25,	10,	42,	0},
			{675,	2419,	25,	10,	43,	0},
			{676,	2420,	25,	10,	44,	0},
			{677,	2421,	25,	10,	45,	0},
			{678,	2422,	25,	10,	46,	0},
			{679,	2423,	25,	10,	47,	0},
			{680,	2424,	25,	10,	40,	0},
			{681,	2425,	25,	10,	41,	0},
			{682,	2426,	25,	10,	42,	0},
			{683,	2427,	25,	10,	43,	0},
			{684,	2428,	25,	10,	44,	0},
			{685,	2429,	25,	10,	45,	0},
			{686,	2430,	25,	10,	46,	0},
			{687,	2431,	25,	10,	47,	0},
			{688,	2432,	25,	10,	40,	0},
			{689,	2433,	25,	10,	41,	0},
			{690,	2434,	25,	10,	42,	0},
			{691,	2435,	25,	10,	43,	0},
			{692,	2436,	25,	10,	44,	0},
			{693,	2437,	25,	10,	45,	0},
			{694,	2438,	25,	10,	46,	0},
			{695,	2439,	25,	10,	47,	0},
			{696,	2440,	25,	10,	48,	0},
			{697,	2441,	25,	10,	49,	0},
			{698,	2442,	25,	10,	50,	0},
			{699,	2443,	25,	10,	51,	0},
			{700,	2444,	25,	10,	52,	0},
			{701,	2445,	25,	10,	53,	0},
			{702,	2446,	25,	10,	54,	0},
			{703,	2447,	25,	10,	55,	0},
			{704,	2448,	25,	10,	48,	0},
			{705,	2449,	25,	10,	49,	0},
			{706,	2450,	25,	10,	50,	0},
			{707,	2451,	25,	10,	51,	0},
			{708,	2452,	25,	10,	52,	0},
			{709,	2453,	25,	10,	53,	0},
			{710,	2454,	25,	10,	54,	0},
			{711,	2455,	25,	10,	55,	0},
			{712,	2456,	25,	10,	48,	0},
			{713,	2457,	25,	10,	49,	0},
			{714,	2458,	25,	10,	50,	0},
			{715,	2459,	25,	10,	51,	0},
			{716,	2460,	25,	10,	52,	0},
			{717,	2461,	25,	10,	53,	0},
			{718,	2462,	25,	10,	54,	0},
			{719,	2463,	25,	10,	55,	0},
			{720,	2464,	25,	10,	48,	0},
			{721,	2465,	25,	10,	49,	0},
			{722,	2466,	25,	10,	50,	0},
			{723,	2467,	25,	10,	51,	0},
			{724,	2468,	25,	10,	52,	0},
			{725,	2469,	25,	10,	53,	0},
			{726,	2470,	25,	10,	54,	0},
			{727,	2471,	25,	10,	55,	0},
			{728,	2472,	25,	10,	56,	0},
			{729,	2473,	25,	10,	57,	0},
			{730,	2474,	25,	10,	58,	0},
			{731,	2475,	25,	10,	59,	0},
			{732,	2476,	25,	10,	60,	0},
			{733,	2477,	25,	10,	61,	0},
			{734,	2478,	25,	10,	62,	0},
			{735,	2479,	25,	10,	63,	0},
			{736,	2480,	32,	10,	16,	0},
			{737,	2481,	32,	10,	17,	0},
			{738,	2482,	32,	10,	18,	0},
			{739,	2483,	32,	10,	19,	0},
			{740,	2484,	32,	10,	20,	0},
			{741,	2485,	32,	10,	21,	0},
			{742,	2486,	32,	10,	22,	0},
			{743,	2487,	32,	10,	23,	0},
			{744,	2488,	32,	10,	16,	0},
			{745,	2489,	32,	10,	17,	0},
			{746,	2490,	32,	10,	18,	0},
			{747,	2491,	32,	10,	19,	0},
			{748,	2492,	32,	10,	20,	0},
			{749,	2493,	32,	10,	21,	0},
			{750,	2494,	32,	10,	22,	0},
			{751,	2495,	32,	10,	23,	0},
			{752,	2496,	32,	10,	48,	0},
			{753,	2497,	32,	10,	49,	0},
			{754,	2498,	32,	10,	50,	0},
			{755,	2499,	32,	10,	51,	0},
			{756,	2500,	32,	10,	52,	0},
			{757,	2501,	32,	10,	53,	0},
			{758,	2502,	32,	10,	54,	0},
			{759,	2503,	32,	10,	55,	0},
			{760,	2504,	32,	10,	48,	0},
			{761,	2505,	32,	10,	49,	0},
			{762,	2506,	32,	10,	50,	0},
			{763,	2507,	32,	10,	51,	0},
			{764,	2508,	32,	10,	52,	0},
			{765,	2509,	32,	10,	53,	0},
			{766,	2510,	32,	10,	54,	0},
			{767,	2511,	32,	10,	55,	0},
			{768,	2512,	35,	10,	16,	0},
			{769,	2513,	35,	10,	17,	0},
			{770,	2514,	35,	10,	18,	0},
			{771,	2515,	35,	10,	19,	0},
			{772,	2516,	35,	10,	20,	0},
			{773,	2517,	35,	10,	21,	0},
			{774,	2518,	35,	10,	22,	0},
			{775,	2519,	35,	10,	23,	0},
			{776,	2520,	35,	10,	16,	0},
			{777,	2521,	35,	10,	17,	0},
			{778,	2522,	35,	10,	18,	0},
			{779,	2523,	35,	10,	19,	0},
			{780,	2524,	35,	10,	20,	0},
			{781,	2525,	35,	10,	21,	0},
			{782,	2526,	35,	10,	22,	0},
			{783,	2527,	35,	10,	23,	0},
			{784,	2528,	35,	10,	48,	0},
			{785,	2529,	35,	10,	49,	0},
			{786,	2530,	35,	10,	50,	0},
			{787,	2531,	35,	10,	51,	0},
			{788,	2532,	35,	10,	52,	0},
			{789,	2533,	35,	10,	53,	0},
			{790,	2534,	35,	10,	54,	0},
			{791,	2535,	35,	10,	55,	0},
			{792,	2536,	35,	10,	48,	0},
			{793,	2537,	35,	10,	49,	0},
			{794,	2538,	35,	10,	50,	0},
			{795,	2539,	35,	10,	51,	0},
			{796,	2540,	35,	10,	52,	0},
			{797,	2541,	35,	10,	53,	0},
			{798,	2542,	35,	10,	54,	0},
			{799,	2543,	35,	10,	55,	0},
			{800,	2544,	35,	10,	56,	0},
			{801,	2545,	35,	10,	57,	0},
			{802,	2546,	35,	10,	58,	0},
			{803,	2547,	35,	10,	59,	0},
			{804,	2548,	35,	10,	60,	0},
			{805,	2549,	35,	10,	61,	0},
			{806,	2550,	35,	10,	62,	0},
			{807,	2551,	35,	10,	63,	0},
			{808,	2552,	42,	10,	0,	0},
			{809,	2553,	42,	10,	1,	0},
			{810,	2554,	42,	10,	2,	0},
			{811,	2555,	42,	10,	3,	0},
			{812,	2556,	42,	10,	4,	0},
			{813,	2557,	42,	10,	5,	0},
			{814,	2558,	42,	10,	6,	0},
			{815,	2559,	42,	10,	7,	0},
			{816,	2560,	42,	10,	0,	0},
			{817,	2561,	42,	10,	1,	0},
			{818,	2562,	42,	10,	2,	0},
			{819,	2563,	42,	10,	3,	0},
			{820,	2564,	42,	10,	4,	0},
			{821,	2565,	42,	10,	5,	0},
			{822,	2566,	42,	10,	6,	0},
			{823,	2567,	42,	10,	7,	0},
			{824,	2568,	42,	10,	8,	0},
			{825,	2569,	42,	10,	9,	0},
			{826,	2570,	42,	10,	10,	0},
			{827,	2571,	42,	10,	11,	0},
			{828,	2572,	42,	10,	12,	0},
			{829,	2573,	42,	10,	13,	0},
			{830,	2574,	42,	10,	14,	0},
			{831,	2575,	42,	10,	15,	0},
			{832,	2576,	42,	10,	8,	0},
			{833,	2577,	42,	10,	9,	0},
			{834,	2578,	42,	10,	10,	0},
			{835,	2579,	42,	10,	11,	0},
			{836,	2580,	42,	10,	12,	0},
			{837,	2581,	42,	10,	13,	0},
			{838,	2582,	42,	10,	14,	0},
			{839,	2583,	42,	10,	15,	0},
			{840,	2584,	42,	10,	32,	0},
			{841,	2585,	42,	10,	33,	0},
			{842,	2586,	42,	10,	34,	0},
			{843,	2587,	42,	10,	35,	0},
			{844,	2588,	42,	10,	36,	0},
			{845,	2589,	42,	10,	37,	0},
			{846,	2590,	42,	10,	38,	0},
			{847,	2591,	42,	10,	39,	0},
			{848,	2592,	42,	10,	32,	0},
			{849,	2593,	42,	10,	33,	0},
			{850,	2594,	42,	10,	34,	0},
			{851,	2595,	42,	10,	35,	0},
			{852,	2596,	42,	10,	36,	0},
			{853,	2597,	42,	10,	37,	0},
			{854,	2598,	42,	10,	38,	0},
			{855,	2599,	42,	10,	39,	0},
			{856,	2600,	42,	10,	40,	0},
			{857,	2601,	42,	10,	41,	0},
			{858,	2602,	42,	10,	42,	0},
			{859,	2603,	42,	10,	43,	0},
			{860,	2604,	42,	10,	44,	0},
			{861,	2605,	42,	10,	45,	0},
			{862,	2606,	42,	10,	46,	0},
			{863,	2607,	42,	10,	47,	0},
			{864,	2608,	42,	10,	40,	0},
			{865,	2609,	42,	10,	41,	0},
			{866,	2610,	42,	10,	42,	0},
			{867,	2611,	42,	10,	43,	0},
			{868,	2612,	42,	10,	44,	0},
			{869,	2613,	42,	10,	45,	0},
			{870,	2614,	42,	10,	46,	0},
			{871,	2615,	42,	10,	47,	0},
			{872,	2616,	45,	10,	0,	0},
			{873,	2617,	45,	10,	1,	0},
			{874,	2618,	45,	10,	2,	0},
			{875,	2619,	45,	10,	3,	0},
			{876,	2620,	45,	10,	4,	0},
			{877,	2621,	45,	10,	5,	0},
			{878,	2622,	45,	10,	6,	0},
			{879,	2623,	45,	10,	7,	0},
			{880,	2624,	45,	10,	0,	0},
			{881,	2625,	45,	10,	1,	0},
			{882,	2626,	45,	10,	2,	0},
			{883,	2627,	45,	10,	3,	0},
			{884,	2628,	45,	10,	4,	0},
			{885,	2629,	45,	10,	5,	0},
			{886,	2630,	45,	10,	6,	0},
			{887,	2631,	45,	10,	7,	0},
			{888,	2632,	45,	10,	8,	0},
			{889,	2633,	45,	10,	9,	0},
			{890,	2634,	45,	10,	10,	0},
			{891,	2635,	45,	10,	11,	0},
			{892,	2636,	45,	10,	12,	0},
			{893,	2637,	45,	10,	13,	0},
			{894,	2638,	45,	10,	14,	0},
			{895,	2639,	45,	10,	15,	0},
			{896,	2640,	45,	10,	8,	0},
			{897,	2641,	45,	10,	9,	0},
			{898,	2642,	45,	10,	10,	0},
			{899,	2643,	45,	10,	11,	0},
			{900,	2644,	45,	10,	12,	0},
			{901,	2645,	45,	10,	13,	0},
			{902,	2646,	45,	10,	14,	0},
			{903,	2647,	45,	10,	15,	0},
			{904,	2648,	45,	10,	32,	0},
			{905,	2649,	45,	10,	33,	0},
			{906,	2650,	45,	10,	34,	0},
			{907,	2651,	45,	10,	35,	0},
			{908,	2652,	45,	10,	36,	0},
			{909,	2653,	45,	10,	37,	0},
			{910,	2654,	45,	10,	38,	0},
			{911,	2655,	45,	10,	39,	0},
			{912,	2656,	45,	10,	32,	0},
			{913,	2657,	45,	10,	33,	0},
			{914,	2658,	45,	10,	34,	0},
			{915,	2659,	45,	10,	35,	0},
			{916,	2660,	45,	10,	36,	0},
			{917,	2661,	45,	10,	37,	0},
			{918,	2662,	45,	10,	38,	0},
			{919,	2663,	45,	10,	39,	0},
			{920,	2664,	45,	10,	40,	0},
			{921,	2665,	45,	10,	41,	0},
			{922,	2666,	45,	10,	42,	0},
			{923,	2667,	45,	10,	43,	0},
			{924,	2668,	45,	10,	44,	0},
			{925,	2669,	45,	10,	45,	0},
			{926,	2670,	45,	10,	46,	0},
			{927,	2671,	45,	10,	47,	0},
			{928,	2672,	45,	10,	40,	0},
			{929,	2673,	45,	10,	41,	0},
			{930,	2674,	45,	10,	42,	0},
			{931,	2675,	45,	10,	43,	0},
			{932,	2676,	45,	10,	44,	0},
			{933,	2677,	45,	10,	45,	0},
			{934,	2678,	45,	10,	46,	0},
			{935,	2679,	45,	10,	47,	0},
			{936,	2680,	50,	10,	16,	0},
			{937,	2681,	50,	10,	17,	0},
			{938,	2682,	50,	10,	18,	0},
			{939,	2683,	50,	10,	19,	0},
			{940,	2684,	50,	10,	20,	0},
			{941,	2685,	50,	10,	21,	0},
			{942,	2686,	50,	10,	22,	0},
			{943,	2687,	50,	10,	23,	0},
			{944,	2688,	50,	10,	16,	0},
			{945,	2689,	50,	10,	17,	0},
			{946,	2690,	50,	10,	18,	0},
			{947,	2691,	50,	10,	19,	0},
			{948,	2692,	50,	10,	20,	0},
			{949,	2693,	50,	10,	21,	0},
			{950,	2694,	50,	10,	22,	0},
			{951,	2695,	50,	10,	23,	0},
			{952,	2696,	50,	10,	24,	0},
			{953,	2697,	50,	10,	25,	0},
			{954,	2698,	50,	10,	26,	0},
			{955,	2699,	50,	10,	27,	0},
			{956,	2700,	50,	10,	28,	0},
			{957,	2701,	50,	10,	29,	0},
			{958,	2702,	50,	10,	30,	0},
			{959,	2703,	50,	10,	31,	0},
			{960,	2704,	50,	10,	24,	0},
			{961,	2705,	50,	10,	25,	0},
			{962,	2706,	50,	10,	26,	0},
			{963,	2707,	50,	10,	27,	0},
			{964,	2708,	50,	10,	28,	0},
			{965,	2709,	50,	10,	29,	0},
			{966,	2710,	50,	10,	30,	0},
			{967,	2711,	50,	10,	31,	0},
			{968,	2712,	50,	10,	48,	0},
			{969,	2713,	50,	10,	49,	0},
			{970,	2714,	50,	10,	50,	0},
			{971,	2715,	50,	10,	51,	0},
			{972,	2716,	50,	10,	52,	0},
			{973,	2717,	50,	10,	53,	0},
			{974,	2718,	50,	10,	54,	0},
			{975,	2719,	50,	10,	55,	0},
			{976,	2720,	50,	10,	48,	0},
			{977,	2721,	50,	10,	49,	0},
			{978,	2722,	50,	10,	50,	0},
			{979,	2723,	50,	10,	51,	0},
			{980,	2724,	50,	10,	52,	0},
			{981,	2725,	50,	10,	53,	0},
			{982,	2726,	50,	10,	54,	0},
			{983,	2727,	50,	10,	55,	0},
			{984,	2728,	50,	10,	56,	0},
			{985,	2729,	50,	10,	57,	0},
			{986,	2730,	50,	10,	58,	0},
			{987,	2731,	50,	10,	59,	0},
			{988,	2732,	50,	10,	60,	0},
			{989,	2733,	50,	10,	61,	0},
			{990,	2734,	50,	10,	62,	0},
			{991,	2735,	50,	10,	63,	0},
			{992,	2736,	51,	10,	16,	0},
			{993,	2737,	51,	10,	17,	0},
			{994,	2738,	51,	10,	18,	0},
			{995,	2739,	51,	10,	19,	0},
			{996,	2740,	51,	10,	20,	0},
			{997,	2741,	51,	10,	21,	0},
			{998,	2742,	51,	10,	22,	0},
			{999,	2743,	51,	10,	23,	0},

			
	};
	
	return paths1;
};
		
public static int[][] Allpathsused2()
{
	// This matrix saves all the paths in the network, format: {Path numb, source-destination , path type , server numb , server utilization}.
	int[][] paths2 = {
			
			{1000,	2744,	51,	10,	16,	0},
			{1001,	2745,	51,	10,	17,	0},
			{1002,	2746,	51,	10,	18,	0},
			{1003,	2747,	51,	10,	19,	0},
			{1004,	2748,	51,	10,	20,	0},
			{1005,	2749,	51,	10,	21,	0},
			{1006,	2750,	51,	10,	22,	0},
			{1007,	2751,	51,	10,	23,	0},
			{1008,	2752,	51,	10,	24,	0},
			{1009,	2753,	51,	10,	25,	0},
			{1010,	2754,	51,	10,	26,	0},
			{1011,	2755,	51,	10,	27,	0},
			{1012,	2756,	51,	10,	28,	0},
			{1013,	2757,	51,	10,	29,	0},
			{1014,	2758,	51,	10,	30,	0},
			{1015,	2759,	51,	10,	31,	0},
			{1016,	2760,	51,	10,	24,	0},
			{1017,	2761,	51,	10,	25,	0},
			{1018,	2762,	51,	10,	26,	0},
			{1019,	2763,	51,	10,	27,	0},
			{1020,	2764,	51,	10,	28,	0},
			{1021,	2765,	51,	10,	29,	0},
			{1022,	2766,	51,	10,	30,	0},
			{1023,	2767,	51,	10,	31,	0},
			{1024,	2768,	51,	10,	48,	0},
			{1025,	2769,	51,	10,	49,	0},
			{1026,	2770,	51,	10,	50,	0},
			{1027,	2771,	51,	10,	51,	0},
			{1028,	2772,	51,	10,	52,	0},
			{1029,	2773,	51,	10,	53,	0},
			{1030,	2774,	51,	10,	54,	0},
			{1031,	2775,	51,	10,	55,	0},
			{1032,	2776,	51,	10,	48,	0},
			{1033,	2777,	51,	10,	49,	0},
			{1034,	2778,	51,	10,	50,	0},
			{1035,	2779,	51,	10,	51,	0},
			{1036,	2780,	51,	10,	52,	0},
			{1037,	2781,	51,	10,	53,	0},
			{1038,	2782,	51,	10,	54,	0},
			{1039,	2783,	51,	10,	55,	0},
			{1040,	2784,	51,	10,	56,	0},
			{1041,	2785,	51,	10,	57,	0},
			{1042,	2786,	51,	10,	58,	0},
			{1043,	2787,	51,	10,	59,	0},
			{1044,	2788,	51,	10,	60,	0},
			{1045,	2789,	51,	10,	61,	0},
			{1046,	2790,	51,	10,	62,	0},
			{1047,	2791,	51,	10,	63,	0},
			{1048,	2792,	52,	10,	32,	0},
			{1049,	2793,	52,	10,	33,	0},
			{1050,	2794,	52,	10,	34,	0},
			{1051,	2795,	52,	10,	35,	0},
			{1052,	2796,	52,	10,	36,	0},
			{1053,	2797,	52,	10,	37,	0},
			{1054,	2798,	52,	10,	38,	0},
			{1055,	2799,	52,	10,	39,	0},
			{1056,	2800,	52,	10,	32,	0},
			{1057,	2801,	52,	10,	33,	0},
			{1058,	2802,	52,	10,	34,	0},
			{1059,	2803,	52,	10,	35,	0},
			{1060,	2804,	52,	10,	36,	0},
			{1061,	2805,	52,	10,	37,	0},
			{1062,	2806,	52,	10,	38,	0},
			{1063,	2807,	52,	10,	39,	0},
			{1064,	2808,	52,	10,	32,	0},
			{1065,	2809,	52,	10,	33,	0},
			{1066,	2810,	52,	10,	34,	0},
			{1067,	2811,	52,	10,	35,	0},
			{1068,	2812,	52,	10,	36,	0},
			{1069,	2813,	52,	10,	37,	0},
			{1070,	2814,	52,	10,	38,	0},
			{1071,	2815,	52,	10,	39,	0},
			{1072,	2816,	52,	10,	32,	0},
			{1073,	2817,	52,	10,	33,	0},
			{1074,	2818,	52,	10,	34,	0},
			{1075,	2819,	52,	10,	35,	0},
			{1076,	2820,	52,	10,	36,	0},
			{1077,	2821,	52,	10,	37,	0},
			{1078,	2822,	52,	10,	38,	0},
			{1079,	2823,	52,	10,	39,	0},
			{1080,	2824,	52,	10,	40,	0},
			{1081,	2825,	52,	10,	41,	0},
			{1082,	2826,	52,	10,	42,	0},
			{1083,	2827,	52,	10,	43,	0},
			{1084,	2828,	52,	10,	44,	0},
			{1085,	2829,	52,	10,	45,	0},
			{1086,	2830,	52,	10,	46,	0},
			{1087,	2831,	52,	10,	47,	0},
			{1088,	2832,	52,	10,	40,	0},
			{1089,	2833,	52,	10,	41,	0},
			{1090,	2834,	52,	10,	42,	0},
			{1091,	2835,	52,	10,	43,	0},
			{1092,	2836,	52,	10,	44,	0},
			{1093,	2837,	52,	10,	45,	0},
			{1094,	2838,	52,	10,	46,	0},
			{1095,	2839,	52,	10,	47,	0},
			{1096,	2840,	52,	10,	40,	0},
			{1097,	2841,	52,	10,	41,	0},
			{1098,	2842,	52,	10,	42,	0},
			{1099,	2843,	52,	10,	43,	0},
			{1100,	2844,	52,	10,	44,	0},
			{1101,	2845,	52,	10,	45,	0},
			{1102,	2846,	52,	10,	46,	0},
			{1103,	2847,	52,	10,	47,	0},
			{1104,	2848,	52,	10,	40,	0},
			{1105,	2849,	52,	10,	41,	0},
			{1106,	2850,	52,	10,	42,	0},
			{1107,	2851,	52,	10,	43,	0},
			{1108,	2852,	52,	10,	44,	0},
			{1109,	2853,	52,	10,	45,	0},
			{1110,	2854,	52,	10,	46,	0},
			{1111,	2855,	52,	10,	47,	0},
			{1112,	2856,	53,	10,	16,	0},
			{1113,	2857,	53,	10,	17,	0},
			{1114,	2858,	53,	10,	18,	0},
			{1115,	2859,	53,	10,	19,	0},
			{1116,	2860,	53,	10,	20,	0},
			{1117,	2861,	53,	10,	21,	0},
			{1118,	2862,	53,	10,	22,	0},
			{1119,	2863,	53,	10,	23,	0},
			{1120,	2864,	53,	10,	16,	0},
			{1121,	2865,	53,	10,	17,	0},
			{1122,	2866,	53,	10,	18,	0},
			{1123,	2867,	53,	10,	19,	0},
			{1124,	2868,	53,	10,	20,	0},
			{1125,	2869,	53,	10,	21,	0},
			{1126,	2870,	53,	10,	22,	0},
			{1127,	2871,	53,	10,	23,	0},
			{1128,	2872,	53,	10,	24,	0},
			{1129,	2873,	53,	10,	25,	0},
			{1130,	2874,	53,	10,	26,	0},
			{1131,	2875,	53,	10,	27,	0},
			{1132,	2876,	53,	10,	28,	0},
			{1133,	2877,	53,	10,	29,	0},
			{1134,	2878,	53,	10,	30,	0},
			{1135,	2879,	53,	10,	31,	0},
			{1136,	2880,	53,	10,	24,	0},
			{1137,	2881,	53,	10,	25,	0},
			{1138,	2882,	53,	10,	26,	0},
			{1139,	2883,	53,	10,	27,	0},
			{1140,	2884,	53,	10,	28,	0},
			{1141,	2885,	53,	10,	29,	0},
			{1142,	2886,	53,	10,	30,	0},
			{1143,	2887,	53,	10,	31,	0},
			{1144,	2888,	53,	10,	48,	0},
			{1145,	2889,	53,	10,	49,	0},
			{1146,	2890,	53,	10,	50,	0},
			{1147,	2891,	53,	10,	51,	0},
			{1148,	2892,	53,	10,	52,	0},
			{1149,	2893,	53,	10,	53,	0},
			{1150,	2894,	53,	10,	54,	0},
			{1151,	2895,	53,	10,	55,	0},
			{1152,	2896,	53,	10,	48,	0},
			{1153,	2897,	53,	10,	49,	0},
			{1154,	2898,	53,	10,	50,	0},
			{1155,	2899,	53,	10,	51,	0},
			{1156,	2900,	53,	10,	52,	0},
			{1157,	2901,	53,	10,	53,	0},
			{1158,	2902,	53,	10,	54,	0},
			{1159,	2903,	53,	10,	55,	0},
			{1160,	2904,	53,	10,	56,	0},
			{1161,	2905,	53,	10,	57,	0},
			{1162,	2906,	53,	10,	58,	0},
			{1163,	2907,	53,	10,	59,	0},
			{1164,	2908,	53,	10,	60,	0},
			{1165,	2909,	53,	10,	61,	0},
			{1166,	2910,	53,	10,	62,	0},
			{1167,	2911,	53,	10,	63,	0},
			{1168,	2912,	54,	10,	0,	0},
			{1169,	2913,	54,	10,	1,	0},
			{1170,	2914,	54,	10,	2,	0},
			{1171,	2915,	54,	10,	3,	0},
			{1172,	2916,	54,	10,	4,	0},
			{1173,	2917,	54,	10,	5,	0},
			{1174,	2918,	54,	10,	6,	0},
			{1175,	2919,	54,	10,	7,	0},
			{1176,	2920,	54,	10,	0,	0},
			{1177,	2921,	54,	10,	1,	0},
			{1178,	2922,	54,	10,	2,	0},
			{1179,	2923,	54,	10,	3,	0},
			{1180,	2924,	54,	10,	4,	0},
			{1181,	2925,	54,	10,	5,	0},
			{1182,	2926,	54,	10,	6,	0},
			{1183,	2927,	54,	10,	7,	0},
			{1184,	2928,	54,	10,	8,	0},
			{1185,	2929,	54,	10,	9,	0},
			{1186,	2930,	54,	10,	10,	0},
			{1187,	2931,	54,	10,	11,	0},
			{1188,	2932,	54,	10,	12,	0},
			{1189,	2933,	54,	10,	13,	0},
			{1190,	2934,	54,	10,	14,	0},
			{1191,	2935,	54,	10,	15,	0},
			{1192,	2936,	54,	10,	8,	0},
			{1193,	2937,	54,	10,	9,	0},
			{1194,	2938,	54,	10,	10,	0},
			{1195,	2939,	54,	10,	11,	0},
			{1196,	2940,	54,	10,	12,	0},
			{1197,	2941,	54,	10,	13,	0},
			{1198,	2942,	54,	10,	14,	0},
			{1199,	2943,	54,	10,	15,	0},
			{1200,	2944,	54,	10,	32,	0},
			{1201,	2945,	54,	10,	33,	0},
			{1202,	2946,	54,	10,	34,	0},
			{1203,	2947,	54,	10,	35,	0},
			{1204,	2948,	54,	10,	36,	0},
			{1205,	2949,	54,	10,	37,	0},
			{1206,	2950,	54,	10,	38,	0},
			{1207,	2951,	54,	10,	39,	0},
			{1208,	2952,	54,	10,	32,	0},
			{1209,	2953,	54,	10,	33,	0},
			{1210,	2954,	54,	10,	34,	0},
			{1211,	2955,	54,	10,	35,	0},
			{1212,	2956,	54,	10,	36,	0},
			{1213,	2957,	54,	10,	37,	0},
			{1214,	2958,	54,	10,	38,	0},
			{1215,	2959,	54,	10,	39,	0},
			{1216,	2960,	54,	10,	40,	0},
			{1217,	2961,	54,	10,	41,	0},
			{1218,	2962,	54,	10,	42,	0},
			{1219,	2963,	54,	10,	43,	0},
			{1220,	2964,	54,	10,	44,	0},
			{1221,	2965,	54,	10,	45,	0},
			{1222,	2966,	54,	10,	46,	0},
			{1223,	2967,	54,	10,	47,	0},
			{1224,	2968,	54,	10,	40,	0},
			{1225,	2969,	54,	10,	41,	0},
			{1226,	2970,	54,	10,	42,	0},
			{1227,	2971,	54,	10,	43,	0},
			{1228,	2972,	54,	10,	44,	0},
			{1229,	2973,	54,	10,	45,	0},
			{1230,	2974,	54,	10,	46,	0},
			{1231,	2975,	54,	10,	47,	0},
			{1232,	0,	01,	9,	16,	0},
			{1233,	1,	01,	9,	17,	0},
			{1234,	2,	01,	9,	18,	0},
			{1235,	3,	01,	9,	19,	0},
			{1236,	4,	01,	9,	20,	0},
			{1237,	5,	01,	9,	21,	0},
			{1238,	6,	01,	9,	22,	0},
			{1239,	7,	01,	9,	23,	0},
			{1240,	8,	01,	9,	24,	0},
			{1241,	9,	01,	9,	25,	0},
			{1242,	10,	01,	9,	26,	0},
			{1243,	11,	01,	9,	27,	0},
			{1244,	12,	01,	9,	28,	0},
			{1245,	13,	01,	9,	29,	0},
			{1246,	14,	01,	9,	30,	0},
			{1247,	15,	01,	9,	31,	0},
			{1248,	16,	01,	9,	16,	0},
			{1249,	17,	01,	9,	17,	0},
			{1250,	18,	01,	9,	18,	0},
			{1251,	19,	01,	9,	19,	0},
			{1252,	20,	01,	9,	20,	0},
			{1253,	21,	01,	9,	21,	0},
			{1254,	22,	01,	9,	22,	0},
			{1255,	23,	01,	9,	23,	0},
			{1256,	24,	01,	9,	24,	0},
			{1257,	25,	01,	9,	25,	0},
			{1258,	26,	01,	9,	26,	0},
			{1259,	27,	01,	9,	27,	0},
			{1260,	28,	01,	9,	28,	0},
			{1261,	29,	01,	9,	29,	0},
			{1262,	30,	01,	9,	30,	0},
			{1263,	31,	01,	9,	31,	0},
			{1264,	32,	10,	9,	24,	0},
			{1265,	33,	10,	9,	25,	0},
			{1266,	34,	10,	9,	26,	0},
			{1267,	35,	10,	9,	27,	0},
			{1268,	36,	10,	9,	28,	0},
			{1269,	37,	10,	9,	29,	0},
			{1270,	38,	10,	9,	30,	0},
			{1271,	39,	10,	9,	31,	0},
			{1272,	40,	24,	9,	40,	0},
			{1273,	41,	24,	9,	41,	0},
			{1274,	42,	24,	9,	42,	0},
			{1275,	43,	24,	9,	43,	0},
			{1276,	44,	24,	9,	44,	0},
			{1277,	45,	24,	9,	45,	0},
			{1278,	46,	24,	9,	46,	0},
			{1279,	47,	24,	9,	47,	0},
			{1280,	48,	25,	9,	48,	0},
			{1281,	49,	25,	9,	49,	0},
			{1282,	50,	25,	9,	50,	0},
			{1283,	51,	25,	9,	51,	0},
			{1284,	52,	25,	9,	52,	0},
			{1285,	53,	25,	9,	53,	0},
			{1286,	54,	25,	9,	54,	0},
			{1287,	55,	25,	9,	55,	0},
			{1288,	56,	25,	9,	56,	0},
			{1289,	57,	25,	9,	57,	0},
			{1290,	58,	25,	9,	58,	0},
			{1291,	59,	25,	9,	59,	0},
			{1292,	60,	25,	9,	60,	0},
			{1293,	61,	25,	9,	61,	0},
			{1294,	62,	25,	9,	62,	0},
			{1295,	63,	25,	9,	63,	0},
			{1296,	64,	42,	9,	40,	0},
			{1297,	65,	42,	9,	41,	0},
			{1298,	66,	42,	9,	42,	0},
			{1299,	67,	42,	9,	43,	0},
			{1300,	68,	42,	9,	44,	0},
			{1301,	69,	42,	9,	45,	0},
			{1302,	70,	42,	9,	46,	0},
			{1303,	71,	42,	9,	47,	0},
			{1304,	72,	42,	9,	32,	0},
			{1305,	73,	42,	9,	33,	0},
			{1306,	74,	42,	9,	34,	0},
			{1307,	75,	42,	9,	35,	0},
			{1308,	76,	42,	9,	36,	0},
			{1309,	77,	42,	9,	37,	0},
			{1310,	78,	42,	9,	38,	0},
			{1311,	79,	42,	9,	39,	0},
			{1312,	80,	42,	9,	40,	0},
			{1313,	81,	42,	9,	41,	0},
			{1314,	82,	42,	9,	42,	0},
			{1315,	83,	42,	9,	43,	0},
			{1316,	84,	42,	9,	44,	0},
			{1317,	85,	42,	9,	45,	0},
			{1318,	86,	42,	9,	46,	0},
			{1319,	87,	42,	9,	47,	0},
			{1320,	88,	45,	9,	32,	0},
			{1321,	89,	45,	9,	33,	0},
			{1322,	90,	45,	9,	34,	0},
			{1323,	91,	45,	9,	35,	0},
			{1324,	92,	45,	9,	36,	0},
			{1325,	93,	45,	9,	37,	0},
			{1326,	94,	45,	9,	38,	0},
			{1327,	95,	45,	9,	39,	0},
			{1328,	96,	45,	9,	40,	0},
			{1329,	97,	45,	9,	41,	0},
			{1330,	98,	45,	9,	42,	0},
			{1331,	99,	45,	9,	43,	0},
			{1332,	100,	45,	9,	44,	0},
			{1333,	101,	45,	9,	45,	0},
			{1334,	102,	45,	9,	46,	0},
			{1335,	103,	45,	9,	47,	0},
			{1336,	104,	45,	9,	32,	0},
			{1337,	105,	45,	9,	33,	0},
			{1338,	106,	45,	9,	34,	0},
			{1339,	107,	45,	9,	35,	0},
			{1340,	108,	45,	9,	36,	0},
			{1341,	109,	45,	9,	37,	0},
			{1342,	110,	45,	9,	38,	0},
			{1343,	111,	45,	9,	39,	0},
			{1344,	112,	45,	9,	40,	0},
			{1345,	113,	45,	9,	41,	0},
			{1346,	114,	45,	9,	42,	0},
			{1347,	115,	45,	9,	43,	0},
			{1348,	116,	45,	9,	44,	0},
			{1349,	117,	45,	9,	45,	0},
			{1350,	118,	45,	9,	46,	0},
			{1351,	119,	45,	9,	47,	0},
			{1352,	120,	54,	9,	32,	0},
			{1353,	121,	54,	9,	33,	0},
			{1354,	122,	54,	9,	34,	0},
			{1355,	123,	54,	9,	35,	0},
			{1356,	124,	54,	9,	36,	0},
			{1357,	125,	54,	9,	37,	0},
			{1358,	126,	54,	9,	38,	0},
			{1359,	127,	54,	9,	39,	0},
			{1360,	128,	54,	9,	40,	0},
			{1361,	129,	54,	9,	41,	0},
			{1362,	130,	54,	9,	42,	0},
			{1363,	131,	54,	9,	43,	0},
			{1364,	132,	54,	9,	44,	0},
			{1365,	133,	54,	9,	45,	0},
			{1366,	134,	54,	9,	46,	0},
			{1367,	135,	54,	9,	47,	0},
			{1368,	136,	54,	9,	32,	0},
			{1369,	137,	54,	9,	33,	0},
			{1370,	138,	54,	9,	34,	0},
			{1371,	139,	54,	9,	35,	0},
			{1372,	140,	54,	9,	36,	0},
			{1373,	141,	54,	9,	37,	0},
			{1374,	142,	54,	9,	38,	0},
			{1375,	143,	54,	9,	39,	0},
			{1376,	144,	54,	9,	40,	0},
			{1377,	145,	54,	9,	41,	0},
			{1378,	146,	54,	9,	42,	0},
			{1379,	147,	54,	9,	43,	0},
			{1380,	148,	54,	9,	44,	0},
			{1381,	149,	54,	9,	45,	0},
			{1382,	150,	54,	9,	46,	0},
			{1383,	151,	54,	9,	47,	0},
			{1384,	152,	52,	9,	48,	0},
			{1385,	153,	52,	9,	49,	0},
			{1386,	154,	52,	9,	50,	0},
			{1387,	155,	52,	9,	51,	0},
			{1388,	156,	52,	9,	52,	0},
			{1389,	157,	52,	9,	53,	0},
			{1390,	158,	52,	9,	54,	0},
			{1391,	159,	52,	9,	55,	0},
			{1392,	160,	52,	9,	56,	0},
			{1393,	161,	52,	9,	57,	0},
			{1394,	162,	52,	9,	58,	0},
			{1395,	163,	52,	9,	59,	0},
			{1396,	164,	52,	9,	60,	0},
			{1397,	165,	52,	9,	61,	0},
			{1398,	166,	52,	9,	62,	0},
			{1399,	167,	52,	9,	63,	0},
			{1400,	168,	52,	9,	48,	0},
			{1401,	169,	52,	9,	49,	0},
			{1402,	170,	52,	9,	50,	0},
			{1403,	171,	52,	9,	51,	0},
			{1404,	172,	52,	9,	52,	0},
			{1405,	173,	52,	9,	53,	0},
			{1406,	174,	52,	9,	54,	0},
			{1407,	175,	52,	9,	55,	0},
			{1408,	176,	52,	9,	56,	0},
			{1409,	177,	52,	9,	57,	0},
			{1410,	178,	52,	9,	58,	0},
			{1411,	179,	52,	9,	59,	0},
			{1412,	180,	52,	9,	60,	0},
			{1413,	181,	52,	9,	61,	0},
			{1414,	182,	52,	9,	62,	0},
			{1415,	183,	52,	9,	63,	0},
			{1416,	184,	03,	9,	16,	0},
			{1417,	185,	03,	9,	17,	0},
			{1418,	186,	03,	9,	18,	0},
			{1419,	187,	03,	9,	19,	0},
			{1420,	188,	03,	9,	20,	0},
			{1421,	189,	03,	9,	21,	0},
			{1422,	190,	03,	9,	22,	0},
			{1423,	191,	03,	9,	23,	0},
			{1424,	192,	03,	9,	24,	0},
			{1425,	193,	03,	9,	25,	0},
			{1426,	194,	03,	9,	26,	0},
			{1427,	195,	03,	9,	27,	0},
			{1428,	196,	03,	9,	28,	0},
			{1429,	197,	03,	9,	29,	0},
			{1430,	198,	03,	9,	30,	0},
			{1431,	199,	03,	9,	31,	0},
			{1432,	200,	03,	9,	16,	0},
			{1433,	201,	03,	9,	17,	0},
			{1434,	202,	03,	9,	18,	0},
			{1435,	203,	03,	9,	19,	0},
			{1436,	204,	03,	9,	20,	0},
			{1437,	205,	03,	9,	21,	0},
			{1438,	206,	03,	9,	22,	0},
			{1439,	207,	03,	9,	23,	0},
			{1440,	208,	03,	9,	24,	0},
			{1441,	209,	03,	9,	25,	0},
			{1442,	210,	03,	9,	26,	0},
			{1443,	211,	03,	9,	27,	0},
			{1444,	212,	03,	9,	28,	0},
			{1445,	213,	03,	9,	29,	0},
			{1446,	214,	03,	9,	30,	0},
			{1447,	215,	03,	9,	31,	0},
			{1448,	216,	03,	9,	48,	0},
			{1449,	217,	03,	9,	49,	0},
			{1450,	218,	03,	9,	50,	0},
			{1451,	219,	03,	9,	51,	0},
			{1452,	220,	03,	9,	52,	0},
			{1453,	221,	03,	9,	53,	0},
			{1454,	222,	03,	9,	54,	0},
			{1455,	223,	03,	9,	55,	0},
			{1456,	224,	03,	9,	56,	0},
			{1457,	225,	03,	9,	57,	0},
			{1458,	226,	03,	9,	58,	0},
			{1459,	227,	03,	9,	59,	0},
			{1460,	228,	03,	9,	60,	0},
			{1461,	229,	03,	9,	61,	0},
			{1462,	230,	03,	9,	62,	0},
			{1463,	231,	03,	9,	63,	0},
			{1464,	232,	03,	9,	48,	0},
			{1465,	233,	03,	9,	49,	0},
			{1466,	234,	03,	9,	50,	0},
			{1467,	235,	03,	9,	51,	0},
			{1468,	236,	03,	9,	52,	0},
			{1469,	237,	03,	9,	53,	0},
			{1470,	238,	03,	9,	54,	0},
			{1471,	239,	03,	9,	55,	0},
			{1472,	240,	03,	9,	56,	0},
			{1473,	241,	03,	9,	57,	0},
			{1474,	242,	03,	9,	58,	0},
			{1475,	243,	03,	9,	59,	0},
			{1476,	244,	03,	9,	60,	0},
			{1477,	245,	03,	9,	61,	0},
			{1478,	246,	03,	9,	62,	0},
			{1479,	247,	03,	9,	63,	0},
			{1480,	248,	13,	9,	16,	0},
			{1481,	249,	13,	9,	17,	0},
			{1482,	250,	13,	9,	18,	0},
			{1483,	251,	13,	9,	19,	0},
			{1484,	252,	13,	9,	20,	0},
			{1485,	253,	13,	9,	21,	0},
			{1486,	254,	13,	9,	22,	0},
			{1487,	255,	13,	9,	23,	0},
			{1488,	256,	13,	9,	24,	0},
			{1489,	257,	13,	9,	25,	0},
			{1490,	258,	13,	9,	26,	0},
			{1491,	259,	13,	9,	27,	0},
			{1492,	260,	13,	9,	28,	0},
			{1493,	261,	13,	9,	29,	0},
			{1494,	262,	13,	9,	30,	0},
			{1495,	263,	13,	9,	31,	0},
			{1496,	264,	13,	9,	16,	0},
			{1497,	265,	13,	9,	17,	0},
			{1498,	266,	13,	9,	18,	0},
			{1499,	267,	13,	9,	19,	0},
			{1500,	268,	13,	9,	20,	0},
			{1501,	269,	13,	9,	21,	0},
			{1502,	270,	13,	9,	22,	0},
			{1503,	271,	13,	9,	23,	0},
			{1504,	272,	13,	9,	24,	0},
			{1505,	273,	13,	9,	25,	0},
			{1506,	274,	13,	9,	26,	0},
			{1507,	275,	13,	9,	27,	0},
			{1508,	276,	13,	9,	28,	0},
			{1509,	277,	13,	9,	29,	0},
			{1510,	278,	13,	9,	30,	0},
			{1511,	279,	13,	9,	31,	0},
			{1512,	280,	13,	9,	48,	0},
			{1513,	281,	13,	9,	49,	0},
			{1514,	282,	13,	9,	50,	0},
			{1515,	283,	13,	9,	51,	0},
			{1516,	284,	13,	9,	52,	0},
			{1517,	285,	13,	9,	53,	0},
			{1518,	286,	13,	9,	54,	0},
			{1519,	287,	13,	9,	55,	0},
			{1520,	288,	13,	9,	56,	0},
			{1521,	289,	13,	9,	57,	0},
			{1522,	290,	13,	9,	58,	0},
			{1523,	291,	13,	9,	59,	0},
			{1524,	292,	13,	9,	60,	0},
			{1525,	293,	13,	9,	61,	0},
			{1526,	294,	13,	9,	62,	0},
			{1527,	295,	13,	9,	63,	0},
			{1528,	296,	13,	9,	48,	0},
			{1529,	297,	13,	9,	49,	0},
			{1530,	298,	13,	9,	50,	0},
			{1531,	299,	13,	9,	51,	0},
			{1532,	300,	13,	9,	52,	0},
			{1533,	301,	13,	9,	53,	0},
			{1534,	302,	13,	9,	54,	0},
			{1535,	303,	13,	9,	55,	0},
			{1536,	304,	13,	9,	56,	0},
			{1537,	305,	13,	9,	57,	0},
			{1538,	306,	13,	9,	58,	0},
			{1539,	307,	13,	9,	59,	0},
			{1540,	308,	13,	9,	60,	0},
			{1541,	309,	13,	9,	61,	0},
			{1542,	310,	13,	9,	62,	0},
			{1543,	311,	13,	9,	63,	0},
			{1544,	312,	30,	9,	16,	0},
			{1545,	313,	30,	9,	17,	0},
			{1546,	314,	30,	9,	18,	0},
			{1547,	315,	30,	9,	19,	0},
			{1548,	316,	30,	9,	20,	0},
			{1549,	317,	30,	9,	21,	0},
			{1550,	318,	30,	9,	22,	0},
			{1551,	319,	30,	9,	23,	0},
			{1552,	320,	30,	9,	24,	0},
			{1553,	321,	30,	9,	25,	0},
			{1554,	322,	30,	9,	26,	0},
			{1555,	323,	30,	9,	27,	0},
			{1556,	324,	30,	9,	28,	0},
			{1557,	325,	30,	9,	29,	0},
			{1558,	326,	30,	9,	30,	0},
			{1559,	327,	30,	9,	31,	0},
			{1560,	328,	30,	9,	16,	0},
			{1561,	329,	30,	9,	17,	0},
			{1562,	330,	30,	9,	18,	0},
			{1563,	331,	30,	9,	19,	0},
			{1564,	332,	30,	9,	20,	0},
			{1565,	333,	30,	9,	21,	0},
			{1566,	334,	30,	9,	22,	0},
			{1567,	335,	30,	9,	23,	0},
			{1568,	336,	30,	9,	24,	0},
			{1569,	337,	30,	9,	25,	0},
			{1570,	338,	30,	9,	26,	0},
			{1571,	339,	30,	9,	27,	0},
			{1572,	340,	30,	9,	28,	0},
			{1573,	341,	30,	9,	29,	0},
			{1574,	342,	30,	9,	30,	0},
			{1575,	343,	30,	9,	31,	0},
			{1576,	344,	30,	9,	48,	0},
			{1577,	345,	30,	9,	49,	0},
			{1578,	346,	30,	9,	50,	0},
			{1579,	347,	30,	9,	51,	0},
			{1580,	348,	30,	9,	52,	0},
			{1581,	349,	30,	9,	53,	0},
			{1582,	350,	30,	9,	54,	0},
			{1583,	351,	30,	9,	55,	0},
			{1584,	352,	30,	9,	56,	0},
			{1585,	353,	30,	9,	57,	0},
			{1586,	354,	30,	9,	58,	0},
			{1587,	355,	30,	9,	59,	0},
			{1588,	356,	30,	9,	60,	0},
			{1589,	357,	30,	9,	61,	0},
			{1590,	358,	30,	9,	62,	0},
			{1591,	359,	30,	9,	63,	0},
			{1592,	360,	30,	9,	48,	0},
			{1593,	361,	30,	9,	49,	0},
			{1594,	362,	30,	9,	50,	0},
			{1595,	363,	30,	9,	51,	0},
			{1596,	364,	30,	9,	52,	0},
			{1597,	365,	30,	9,	53,	0},
			{1598,	366,	30,	9,	54,	0},
			{1599,	367,	30,	9,	55,	0},
			{1600,	368,	30,	9,	56,	0},
			{1601,	369,	30,	9,	57,	0},
			{1602,	370,	30,	9,	58,	0},
			{1603,	371,	30,	9,	59,	0},
			{1604,	372,	30,	9,	60,	0},
			{1605,	373,	30,	9,	61,	0},
			{1606,	374,	30,	9,	62,	0},
			{1607,	375,	30,	9,	63,	0},
			{1608,	376,	31,	9,	16,	0},
			{1609,	377,	31,	9,	17,	0},
			{1610,	378,	31,	9,	18,	0},
			{1611,	379,	31,	9,	19,	0},
			{1612,	380,	31,	9,	20,	0},
			{1613,	381,	31,	9,	21,	0},
			{1614,	382,	31,	9,	22,	0},
			{1615,	383,	31,	9,	23,	0},
			{1616,	384,	31,	9,	24,	0},
			{1617,	385,	31,	9,	25,	0},
			{1618,	386,	31,	9,	26,	0},
			{1619,	387,	31,	9,	27,	0},
			{1620,	388,	31,	9,	28,	0},
			{1621,	389,	31,	9,	29,	0},
			{1622,	390,	31,	9,	30,	0},
			{1623,	391,	31,	9,	31,	0},
			{1624,	392,	31,	9,	16,	0},
			{1625,	393,	31,	9,	17,	0},
			{1626,	394,	31,	9,	18,	0},
			{1627,	395,	31,	9,	19,	0},
			{1628,	396,	31,	9,	20,	0},
			{1629,	397,	31,	9,	21,	0},
			{1630,	398,	31,	9,	22,	0},
			{1631,	399,	31,	9,	23,	0},
			{1632,	400,	31,	9,	24,	0},
			{1633,	401,	31,	9,	25,	0},
			{1634,	402,	31,	9,	26,	0},
			{1635,	403,	31,	9,	27,	0},
			{1636,	404,	31,	9,	28,	0},
			{1637,	405,	31,	9,	29,	0},
			{1638,	406,	31,	9,	30,	0},
			{1639,	407,	31,	9,	31,	0},
			{1640,	408,	31,	9,	48,	0},
			{1641,	409,	31,	9,	49,	0},
			{1642,	410,	31,	9,	50,	0},
			{1643,	411,	31,	9,	51,	0},
			{1644,	412,	31,	9,	52,	0},
			{1645,	413,	31,	9,	53,	0},
			{1646,	414,	31,	9,	54,	0},
			{1647,	415,	31,	9,	55,	0},
			{1648,	416,	31,	9,	56,	0},
			{1649,	417,	31,	9,	57,	0},
			{1650,	418,	31,	9,	58,	0},
			{1651,	419,	31,	9,	59,	0},
			{1652,	420,	31,	9,	60,	0},
			{1653,	421,	31,	9,	61,	0},
			{1654,	422,	31,	9,	62,	0},
			{1655,	423,	31,	9,	63,	0},
			{1656,	424,	31,	9,	48,	0},
			{1657,	425,	31,	9,	49,	0},
			{1658,	426,	31,	9,	50,	0},
			{1659,	427,	31,	9,	51,	0},
			{1660,	428,	31,	9,	52,	0},
			{1661,	429,	31,	9,	53,	0},
			{1662,	430,	31,	9,	54,	0},
			{1663,	431,	31,	9,	55,	0},
			{1664,	432,	31,	9,	56,	0},
			{1665,	433,	31,	9,	57,	0},
			{1666,	434,	31,	9,	58,	0},
			{1667,	435,	31,	9,	59,	0},
			{1668,	436,	31,	9,	60,	0},
			{1669,	437,	31,	9,	61,	0},
			{1670,	438,	31,	9,	62,	0},
			{1671,	439,	31,	9,	63,	0},
			{1672,	0,	24,	11,	0,	0},
			{1673,	1,	24,	11,	1,	0},
			{1674,	2,	24,	11,	2,	0},
			{1675,	3,	24,	11,	3,	0},
			{1676,	4,	24,	11,	4,	0},
			{1677,	5,	24,	11,	5,	0},
			{1678,	6,	24,	11,	6,	0},
			{1679,	7,	24,	11,	7,	0},
			{1680,	8,	25,	11,	16,	0},
			{1681,	9,	25,	11,	17,	0},
			{1682,	10,	25,	11,	18,	0},
			{1683,	11,	25,	11,	19,	0},
			{1684,	12,	25,	11,	20,	0},
			{1685,	13,	25,	11,	21,	0},
			{1686,	14,	25,	11,	22,	0},
			{1687,	15,	25,	11,	23,	0},
			{1688,	16,	45,	11,	0,	0},
			{1689,	17,	45,	11,	1,	0},
			{1690,	18,	45,	11,	2,	0},
			{1691,	19,	45,	11,	3,	0},
			{1692,	20,	45,	11,	4,	0},
			{1693,	21,	45,	11,	5,	0},
			{1694,	22,	45,	11,	6,	0},
			{1695,	23,	45,	11,	7,	0},
			{1696,	24,	45,	11,	8,	0},
			{1697,	25,	45,	11,	9,	0},
			{1698,	26,	45,	11,	10,	0},
			{1699,	27,	45,	11,	11,	0},
			{1700,	28,	45,	11,	12,	0},
			{1701,	29,	45,	11,	13,	0},
			{1702,	30,	45,	11,	14,	0},
			{1703,	31,	45,	11,	15,	0},
			{1704,	32,	45,	11,	0,	0},
			{1705,	33,	45,	11,	1,	0},
			{1706,	34,	45,	11,	2,	0},
			{1707,	35,	45,	11,	3,	0},
			{1708,	36,	45,	11,	4,	0},
			{1709,	37,	45,	11,	5,	0},
			{1710,	38,	45,	11,	6,	0},
			{1711,	39,	45,	11,	7,	0},
			{1712,	40,	45,	11,	8,	0},
			{1713,	41,	45,	11,	9,	0},
			{1714,	42,	45,	11,	10,	0},
			{1715,	43,	45,	11,	11,	0},
			{1716,	44,	45,	11,	12,	0},
			{1717,	45,	45,	11,	13,	0},
			{1718,	46,	45,	11,	14,	0},
			{1719,	47,	45,	11,	15,	0},
			{1720,	48,	52,	11,	0,	0},
			{1721,	49,	52,	11,	1,	0},
			{1722,	50,	52,	11,	2,	0},
			{1723,	51,	52,	11,	3,	0},
			{1724,	52,	52,	11,	4,	0},
			{1725,	53,	52,	11,	5,	0},
			{1726,	54,	52,	11,	6,	0},
			{1727,	55,	52,	11,	7,	0},
			{1728,	56,	52,	11,	8,	0},
			{1729,	57,	52,	11,	9,	0},
			{1730,	58,	52,	11,	10,	0},
			{1731,	59,	52,	11,	11,	0},
			{1732,	60,	52,	11,	12,	0},
			{1733,	61,	52,	11,	13,	0},
			{1734,	62,	52,	11,	14,	0},
			{1735,	63,	52,	11,	15,	0},
			{1736,	64,	52,	11,	0,	0},
			{1737,	65,	52,	11,	1,	0},
			{1738,	66,	52,	11,	2,	0},
			{1739,	67,	52,	11,	3,	0},
			{1740,	68,	52,	11,	4,	0},
			{1741,	69,	52,	11,	5,	0},
			{1742,	70,	52,	11,	6,	0},
			{1743,	71,	52,	11,	7,	0},
			{1744,	72,	52,	11,	8,	0},
			{1745,	73,	52,	11,	9,	0},
			{1746,	74,	52,	11,	10,	0},
			{1747,	75,	52,	11,	11,	0},
			{1748,	76,	52,	11,	12,	0},
			{1749,	77,	52,	11,	13,	0},
			{1750,	78,	52,	11,	14,	0},
			{1751,	79,	52,	11,	15,	0},
			{1752,	80,	52,	11,	32,	0},
			{1753,	81,	52,	11,	33,	0},
			{1754,	82,	52,	11,	34,	0},
			{1755,	83,	52,	11,	35,	0},
			{1756,	84,	52,	11,	36,	0},
			{1757,	85,	52,	11,	37,	0},
			{1758,	86,	52,	11,	38,	0},
			{1759,	87,	52,	11,	39,	0},
			{1760,	88,	52,	11,	40,	0},
			{1761,	89,	52,	11,	41,	0},
			{1762,	90,	52,	11,	42,	0},
			{1763,	91,	52,	11,	43,	0},
			{1764,	92,	52,	11,	44,	0},
			{1765,	93,	52,	11,	45,	0},
			{1766,	94,	52,	11,	46,	0},
			{1767,	95,	52,	11,	47,	0},
			{1768,	96,	52,	11,	32,	0},
			{1769,	97,	52,	11,	33,	0},
			{1770,	98,	52,	11,	34,	0},
			{1771,	99,	52,	11,	35,	0},
			{1772,	100,	52,	11,	36,	0},
			{1773,	101,	52,	11,	37,	0},
			{1774,	102,	52,	11,	38,	0},
			{1775,	103,	52,	11,	39,	0},
			{1776,	104,	52,	11,	40,	0},
			{1777,	105,	52,	11,	41,	0},
			{1778,	106,	52,	11,	42,	0},
			{1779,	107,	52,	11,	43,	0},
			{1780,	108,	52,	11,	44,	0},
			{1781,	109,	52,	11,	45,	0},
			{1782,	110,	52,	11,	46,	0},
			{1783,	111,	52,	11,	47,	0},
			{1784,	112,	52,	11,	16,	0},
			{1785,	113,	52,	11,	17,	0},
			{1786,	114,	52,	11,	18,	0},
			{1787,	115,	52,	11,	19,	0},
			{1788,	116,	52,	11,	20,	0},
			{1789,	117,	52,	11,	21,	0},
			{1790,	118,	52,	11,	22,	0},
			{1791,	119,	52,	11,	23,	0},
			{1792,	120,	52,	11,	24,	0},
			{1793,	121,	52,	11,	25,	0},
			{1794,	122,	52,	11,	26,	0},
			{1795,	123,	52,	11,	27,	0},
			{1796,	124,	52,	11,	28,	0},
			{1797,	125,	52,	11,	29,	0},
			{1798,	126,	52,	11,	30,	0},
			{1799,	127,	52,	11,	31,	0},
			{1800,	128,	52,	11,	16,	0},
			{1801,	129,	52,	11,	17,	0},
			{1802,	130,	52,	11,	18,	0},
			{1803,	131,	52,	11,	19,	0},
			{1804,	132,	52,	11,	20,	0},
			{1805,	133,	52,	11,	21,	0},
			{1806,	134,	52,	11,	22,	0},
			{1807,	135,	52,	11,	23,	0},
			{1808,	136,	52,	11,	24,	0},
			{1809,	137,	52,	11,	25,	0},
			{1810,	138,	52,	11,	26,	0},
			{1811,	139,	52,	11,	27,	0},
			{1812,	140,	52,	11,	28,	0},
			{1813,	141,	52,	11,	29,	0},
			{1814,	142,	52,	11,	30,	0},
			{1815,	143,	52,	11,	31,	0},
			{1816,	144,	52,	11,	48,	0},
			{1817,	145,	52,	11,	49,	0},
			{1818,	146,	52,	11,	50,	0},
			{1819,	147,	52,	11,	51,	0},
			{1820,	148,	52,	11,	52,	0},
			{1821,	149,	52,	11,	53,	0},
			{1822,	150,	52,	11,	54,	0},
			{1823,	151,	52,	11,	55,	0},
			{1824,	152,	52,	11,	56,	0},
			{1825,	153,	52,	11,	57,	0},
			{1826,	154,	52,	11,	58,	0},
			{1827,	155,	52,	11,	59,	0},
			{1828,	156,	52,	11,	60,	0},
			{1829,	157,	52,	11,	61,	0},
			{1830,	158,	52,	11,	62,	0},
			{1831,	159,	52,	11,	63,	0},
			{1832,	160,	52,	11,	48,	0},
			{1833,	161,	52,	11,	49,	0},
			{1834,	162,	52,	11,	50,	0},
			{1835,	163,	52,	11,	51,	0},
			{1836,	164,	52,	11,	52,	0},
			{1837,	165,	52,	11,	53,	0},
			{1838,	166,	52,	11,	54,	0},
			{1839,	167,	52,	11,	55,	0},
			{1840,	168,	52,	11,	56,	0},
			{1841,	169,	52,	11,	57,	0},
			{1842,	170,	52,	11,	58,	0},
			{1843,	171,	52,	11,	59,	0},
			{1844,	172,	52,	11,	60,	0},
			{1845,	173,	52,	11,	61,	0},
			{1846,	174,	52,	11,	62,	0},
			{1847,	175,	52,	11,	63,	0},
			{1848,	176,	34,	11,	16,	0},
			{1849,	177,	34,	11,	17,	0},
			{1850,	178,	34,	11,	18,	0},
			{1851,	179,	34,	11,	19,	0},
			{1852,	180,	34,	11,	20,	0},
			{1853,	181,	34,	11,	21,	0},
			{1854,	182,	34,	11,	22,	0},
			{1855,	183,	34,	11,	23,	0},
			{1856,	184,	34,	11,	24,	0},
			{1857,	185,	34,	11,	25,	0},
			{1858,	186,	34,	11,	26,	0},
			{1859,	187,	34,	11,	27,	0},
			{1860,	188,	34,	11,	28,	0},
			{1861,	189,	34,	11,	29,	0},
			{1862,	190,	34,	11,	30,	0},
			{1863,	191,	34,	11,	31,	0},
			{1864,	192,	34,	11,	16,	0},
			{1865,	193,	34,	11,	17,	0},
			{1866,	194,	34,	11,	18,	0},
			{1867,	195,	34,	11,	19,	0},
			{1868,	196,	34,	11,	20,	0},
			{1869,	197,	34,	11,	21,	0},
			{1870,	198,	34,	11,	22,	0},
			{1871,	199,	34,	11,	23,	0},
			{1872,	200,	34,	11,	24,	0},
			{1873,	201,	34,	11,	25,	0},
			{1874,	202,	34,	11,	26,	0},
			{1875,	203,	34,	11,	27,	0},
			{1876,	204,	34,	11,	28,	0},
			{1877,	205,	34,	11,	29,	0},
			{1878,	206,	34,	11,	30,	0},
			{1879,	207,	34,	11,	31,	0},
			{1880,	208,	43,	11,	16,	0},
			{1881,	209,	43,	11,	17,	0},
			{1882,	210,	43,	11,	18,	0},
			{1883,	211,	43,	11,	19,	0},
			{1884,	212,	43,	11,	20,	0},
			{1885,	213,	43,	11,	21,	0},
			{1886,	214,	43,	11,	22,	0},
			{1887,	215,	43,	11,	23,	0},
			{1888,	216,	43,	11,	24,	0},
			{1889,	217,	43,	11,	25,	0},
			{1890,	218,	43,	11,	26,	0},
			{1891,	219,	43,	11,	27,	0},
			{1892,	220,	43,	11,	28,	0},
			{1893,	221,	43,	11,	29,	0},
			{1894,	222,	43,	11,	30,	0},
			{1895,	223,	43,	11,	31,	0},
			{1896,	224,	43,	11,	16,	0},
			{1897,	225,	43,	11,	17,	0},
			{1898,	226,	43,	11,	18,	0},
			{1899,	227,	43,	11,	19,	0},
			{1900,	228,	43,	11,	20,	0},
			{1901,	229,	43,	11,	21,	0},
			{1902,	230,	43,	11,	22,	0},
			{1903,	231,	43,	11,	23,	0},
			{1904,	232,	43,	11,	24,	0},
			{1905,	233,	43,	11,	25,	0},
			{1906,	234,	43,	11,	26,	0},
			{1907,	235,	43,	11,	27,	0},
			{1908,	236,	43,	11,	28,	0},
			{1909,	237,	43,	11,	29,	0},
			{1910,	238,	43,	11,	30,	0},
			{1911,	239,	43,	11,	31,	0},
			{1912,	240,	04,	11,	16,	0},
			{1913,	241,	04,	11,	17,	0},
			{1914,	242,	04,	11,	18,	0},
			{1915,	243,	04,	11,	19,	0},
			{1916,	244,	04,	11,	20,	0},
			{1917,	245,	04,	11,	21,	0},
			{1918,	246,	04,	11,	22,	0},
			{1919,	247,	04,	11,	23,	0},
			{1920,	248,	04,	11,	24,	0},
			{1921,	249,	04,	11,	25,	0},
			{1922,	250,	04,	11,	26,	0},
			{1923,	251,	04,	11,	27,	0},
			{1924,	252,	04,	11,	28,	0},
			{1925,	253,	04,	11,	29,	0},
			{1926,	254,	04,	11,	30,	0},
			{1927,	255,	04,	11,	31,	0},
			{1928,	256,	04,	11,	16,	0},
			{1929,	257,	04,	11,	17,	0},
			{1930,	258,	04,	11,	18,	0},
			{1931,	259,	04,	11,	19,	0},
			{1932,	260,	04,	11,	20,	0},
			{1933,	261,	04,	11,	21,	0},
			{1934,	262,	04,	11,	22,	0},
			{1935,	263,	04,	11,	23,	0},
			{1936,	264,	04,	11,	24,	0},
			{1937,	265,	04,	11,	25,	0},
			{1938,	266,	04,	11,	26,	0},
			{1939,	267,	04,	11,	27,	0},
			{1940,	268,	04,	11,	28,	0},
			{1941,	269,	04,	11,	29,	0},
			{1942,	270,	04,	11,	30,	0},
			{1943,	271,	04,	11,	31,	0},
			{1944,	272,	14,	11,	16,	0},
			{1945,	273,	14,	11,	17,	0},
			{1946,	274,	14,	11,	18,	0},
			{1947,	275,	14,	11,	19,	0},
			{1948,	276,	14,	11,	20,	0},
			{1949,	277,	14,	11,	21,	0},
			{1950,	278,	14,	11,	22,	0},
			{1951,	279,	14,	11,	23,	0},
			{1952,	280,	14,	11,	24,	0},
			{1953,	281,	14,	11,	25,	0},
			{1954,	282,	14,	11,	26,	0},
			{1955,	283,	14,	11,	27,	0},
			{1956,	284,	14,	11,	28,	0},
			{1957,	285,	14,	11,	29,	0},
			{1958,	286,	14,	11,	30,	0},
			{1959,	287,	14,	11,	31,	0},
			{1960,	288,	14,	11,	16,	0},
			{1961,	289,	14,	11,	17,	0},
			{1962,	290,	14,	11,	18,	0},
			{1963,	291,	14,	11,	19,	0},
			{1964,	292,	14,	11,	20,	0},
			{1965,	293,	14,	11,	21,	0},
			{1966,	294,	14,	11,	22,	0},
			{1967,	295,	14,	11,	23,	0},
			{1968,	296,	14,	11,	24,	0},
			{1969,	297,	14,	11,	25,	0},
			{1970,	298,	14,	11,	26,	0},
			{1971,	299,	14,	11,	27,	0},
			{1972,	300,	14,	11,	28,	0},
			{1973,	301,	14,	11,	29,	0},
			{1974,	302,	14,	11,	30,	0},
			{1975,	303,	14,	11,	31,	0},
			{1976,	304,	40,	11,	16,	0},
			{1977,	305,	40,	11,	17,	0},
			{1978,	306,	40,	11,	18,	0},
			{1979,	307,	40,	11,	19,	0},
			{1980,	308,	40,	11,	20,	0},
			{1981,	309,	40,	11,	21,	0},
			{1982,	310,	40,	11,	22,	0},
			{1983,	311,	40,	11,	23,	0},
			{1984,	312,	40,	11,	24,	0},
			{1985,	313,	40,	11,	25,	0},
			{1986,	314,	40,	11,	26,	0},
			{1987,	315,	40,	11,	27,	0},
			{1988,	316,	40,	11,	28,	0},
			{1989,	317,	40,	11,	29,	0},
			{1990,	318,	40,	11,	30,	0},
			{1991,	319,	40,	11,	31,	0},
			{1992,	320,	40,	11,	16,	0},
			{1993,	321,	40,	11,	17,	0},
			{1994,	322,	40,	11,	18,	0},
			{1995,	323,	40,	11,	19,	0},
			{1996,	324,	40,	11,	20,	0},
			{1997,	325,	40,	11,	21,	0},
			{1998,	326,	40,	11,	22,	0},
			{1999,	327,	40,	11,	23,	0},
			{2000,	328,	40,	11,	24,	0},
			{2001,	329,	40,	11,	25,	0},
			{2002,	330,	40,	11,	26,	0},
			{2003,	331,	40,	11,	27,	0},
			{2004,	332,	40,	11,	28,	0},
			{2005,	333,	40,	11,	29,	0},
			{2006,	334,	40,	11,	30,	0},
			{2007,	335,	40,	11,	31,	0},
			{2008,	336,	41,	11,	16,	0},
			{2009,	337,	41,	11,	17,	0},
			{2010,	338,	41,	11,	18,	0},
			{2011,	339,	41,	11,	19,	0},
			{2012,	340,	41,	11,	20,	0},
			{2013,	341,	41,	11,	21,	0},
			{2014,	342,	41,	11,	22,	0},
			{2015,	343,	41,	11,	23,	0},
			{2016,	344,	41,	11,	24,	0},
			{2017,	345,	41,	11,	25,	0},
			{2018,	346,	41,	11,	26,	0},
			{2019,	347,	41,	11,	27,	0},
			{2020,	348,	41,	11,	28,	0},
			{2021,	349,	41,	11,	29,	0},
			{2022,	350,	41,	11,	30,	0},
			{2023,	351,	41,	11,	31,	0},
			{2024,	352,	41,	11,	16,	0},
			{2025,	353,	41,	11,	17,	0},
			{2026,	354,	41,	11,	18,	0},
			{2027,	355,	41,	11,	19,	0},
			{2028,	356,	41,	11,	20,	0},
			{2029,	357,	41,	11,	21,	0},
			{2030,	358,	41,	11,	22,	0},
			{2031,	359,	41,	11,	23,	0},
			{2032,	360,	41,	11,	24,	0},
			{2033,	361,	41,	11,	25,	0},
			{2034,	362,	41,	11,	26,	0},
			{2035,	363,	41,	11,	27,	0},
			{2036,	364,	41,	11,	28,	0},
			{2037,	365,	41,	11,	29,	0},
			{2038,	366,	41,	11,	30,	0},
			{2039,	367,	41,	11,	31,	0},

			
	};
	
	return paths2;
};		
	

	public static void main(String[] args) {

		//-------------------------------------------------------------------------------------------------------------------	
		//------------------------------------------- Initializing the SN settings ------------------------------------------	
		//-------------------------------------------------------------------------------------------------------------------	

		int Kickmigration = 0 ;    // Change to (1)to start migration phase, or keep (0)- to turn-off migration phase.
		int Kickonline    = 0 ;   // (1) to start online, or (0)to turn-off online phase.
		int MaxSFCs       = 499;  // This is the basic number of SFCs.
		int SFCduplicator = 1;    // Example: change to 20 to load 10000 SFCs, 10 for 5000 SFCs, or 200 for 100,000 SFCs. 
		                          //This is used to control the maximum number of the Arriving SFCs (Maximum SFC = MaxSFCs * SFCduplicator). 
		int ActivateDelay = 0;    // 0 no delay. Else put it 1 so delay is activated in online.
		//double minVNF   = 1;
		int maxwaiting    = 30;    // put it 0 for offline scenario. For online, this is the max waiting time for any SFC that does not have enough resources on the online iteration.
		int minwaiting    = 2;    // put it 0 for offline scenario. For online, this is the min waiting time for any SFC that does not have enough resources on the online iteration.

				
		int delay_SFC_by_waiting = maxwaiting; // This is the waiting counter for SFC the does not has path.		
		
		long startTime;
		long endTime;
		
		int[][] P9  = Path9();
		int[][] P101= Path101();
		int[][] P102= Path102();
		int[][] P11 = Path11();
		int[][] P13 = Path13();
		int[][] P15 = Path15();
		int[][] P17 = Path17();
		double[][] Servers_Cores= Scores();	
		double[][] SFC1 = Sfunction1();	
		double[][] SFC2 = Sfunction2();		
		double[][] SFC3 = Sfunction3();		
		int[][] Allpaths1 = Allpathsused1();
		int[][] Allpaths2 = Allpathsused2();
		int[][] Allpaths  = new int[Allpaths1.length+Allpaths2.length][6];

		for(int i=0; i<Allpaths1.length ; i++)
			for(int j=0 ; j<6 ; j++)
			{
				Allpaths[i][j]=Allpaths1[i][j];
			}
		
		for(int i=Allpaths1.length; i<Allpaths1.length+Allpaths2.length ; i++)
			for(int j=0 ; j<6 ; j++)
			{
				Allpaths[i][j]=Allpaths2[i-Allpaths1.length][j];
			}
		
		
		int Servers     = 64;
		
		double Beta_e   = 1;
		double mig_Beta;
		double mig_time = 0;

		double[] a_traffic= {0.3,0.6,1};//{0.3,0.5,0.7,1};// To be used to loop for the traffic load
		double[] Beta_m = {0.0000027};//{0.0,0.00000018,0.00000036,0.00000054,0.00000072,0.0000009,0.0000013,0.0000016,0.000002,0.0000023,0.0000027};
		double[] Time_m = {2.0}; // ,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,0.0};
		
		int[][] Used_Servers_CPU_Cons = new int[Beta_m.length][Servers];
	    double[][] Runs_Output      = new double[Beta_m.length][15]; // This saves the output of each run 
		double[]   Tot_Cost         = new double[Beta_m.length]; // This is the total Costs 
		double[]   Tot_PCost        = new double[Beta_m.length]; // This is the total Power consumption Costs 
		double[][] Tot_MCost        = new double[Beta_m.length][2]; /* This is the total Migration Costs, first column includes
		                                                           * the migration cost, and the second includes the number 
		                                                           * of migrations.
		                                                           */ 
		for (int i=0 ; i<Beta_m.length ; i++)
			for (int j=0 ; j<15 ; j++)
				Runs_Output[i][j] = 0;
		
		for (int i=0 ; i<Beta_m.length ; i++)
		{
			Tot_Cost[i]  = 0;
			Tot_PCost[i] = 0;
			Tot_MCost[i][0] = 0;
			Tot_MCost[i][1] = 0;
		}
	
	int Max_Runs      = 10;
	
		
	for (int Runs=0 ; Runs<Max_Runs ; Runs++)
	{
	
	for (int a_traf=0 ; a_traf<a_traffic.length ; a_traf++)	
	for (int betaloop=0 ; betaloop<Beta_m.length ; betaloop++)
		{
	
		
		//int a_trafmin = 0;
		//int a_trafmax = a_traffic.length;
	
		
		//int betaloopmin = 0;
		//int betaloopmax = Beta_m.length;

		
		//int a_traf = (int) (a_trafmin + (Math.random() * ((a_trafmax  - a_trafmin)+1)));

		//int betaloop = (int) (betaloopmin + (Math.random() * ((betaloopmax  - betaloopmin)+1)));

		
		double a_pw_idle=a_traffic[a_traf];    // 1 means fully loaded Server. Vary it between 1, 0.7, 0.5, 0.3, or 0 to get the Idle power as a fraction of the maximum server power.
		mig_Beta = Beta_m[betaloop];
		mig_time = Time_m[0];		
		
			 			   
			
	
		//{
		int Rem = 0;	// Very important Counter used in the Online and migration scenarios		
		
		
	//-------------------------------------------------------------------------------
	// --------------------------------- Create SN ----------------------------------
	//-------------------------------------------------------------------------------
			
		
		double[][] adjacencyMatrix = {
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	1,	0,	0,	1,	0,	1,	0,	0,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	1,	0,	1,	0,	1,	0,	0,	0,	1,	1,	0,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	1,	1,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{1,	1,	0,	1,	0,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	1,	0,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	1,	0,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	1,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	1,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0}

		};
		
		int    edgesnum          = 0;
		
		for(int i=0 ; i<Servers ; i++)
			for(int j=0; j<Servers ; j++)
				if(adjacencyMatrix[i][j]==1)
					{
					edgesnum++;
					}else
						continue;
		
		//this is the BW adjacency matrix
		int[][] BW_Adj = {
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	40,	0,	0,	40,	0,	40,	0,	0,	40,	40,	40,	0,	0,	0,	0,	0,	0,	0,	40,	40,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	40,	0,	40,	0,	40,	0,	0,	0,	40,	40,	0,	0,	40,	40,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	40,	0,	40,	0,	0,	0,	40,	40,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	40,	0,	40,	0,	0,	0,	40,	40,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{40,	40,	0,	40,	0,	0,	40,	0,	0,	40,	0,	40,	0,	0,	0,	40,	0,	0,	40,	40,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	40,	0,	40,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	40,	0,	40,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	40,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	40,	40,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	40,	40,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	40,	0,	0,	0,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	10,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	10,	10,	10,	10,	10,	10,	1},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
				{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0}
				
		};
		
		for(int i=0 ; i<Servers ; i++)
			for(int j=0; j<Servers ; j++)	
				BW_Adj[i][j] = (int) (BW_Adj[i][j] * 1);

		//these is the Delay adjacency matrix
		double[][] Delay_Adj = adjacencyMatrix;

	//-------------------------------------------------------------------------------------------------------------------------

	/* Initialize the SN Nodes and Edges with random values 
	* This is done just once in the first time to run the network.
	*/		
				
		double[] Servers_Current_PCons_node    = new double[ Servers ];  // a matrix to store the Maximum power capacity for each SN as a stand alone Data Center
		double[] Servers_MAX_Power_Cap         = new double[ Servers ];  // a matrix to store the Maximum power capacity for each SN as a stand alone Data Center
		double[] Servers_MIN_Power_Cap         = new double[ Servers ];  // a matrix to store the Maximum power capacity for each SN as a stand alone Data Center
		double[] Servers_idle_PCons            = new double[ Servers ];	 // a matrix to store the Power Consumption values.

		double[] Servers_MAX_CPU_Cap              = new double[ Servers ];  // a matrix to store the Maximum CPU capacity for each server
		double[] Servers_Consumed_Core            = new double[ Servers ];  // a matrix to store the consumed cores in terms of traffic allocated on top of each server.
		double[] Tot_PW_idle_and_Cons_Server      = new double[ Servers ]; // This is the total power consumption of the server, including idle and consumed powers.
		double[] Servers_CPU_Cons                 = new double[ Servers ];  // a matrix to store the CPU values.
		double[] Servers_CPU_Cur_Util             = new double[ Servers ];  // a matrix to store the current CPU utilization after each iteration

		double[][] SN_BWmatrix           = new double[BW_Adj.length][BW_Adj.length]; // a matrix to store edges BW the size of the adjacency matrix.
		double[][] SN_BW_Util            = new double[BW_Adj.length][BW_Adj.length]; // a matrix to store edges current BW utilization the size of the adjacency matrix.
		
		double[][] Allpaths_not_sorted = new double[Allpaths.length][7];  // This is a matrix to save all paths when their Server are idle and not sorted.
	    
		for(int i=0 ; i<Allpaths_not_sorted.length ; i++)
		{
			for(int j=0; j<6 ; j++)	
			{
				Allpaths_not_sorted[i][j] = Allpaths[i][j];
				//System.out.print(Allpaths_not_sorted[i][j]+"\t");
			}
		//System.out.println();	
		}
		
		
		/*
		//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
					@SuppressWarnings("resource")
					Scanner sc1 = new Scanner(System.in);
					System.out.println("what is the value of a");
			        System.out.println();
					int a = sc1.nextInt();
		//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	*/	
		
		
		
		
		double Sum_SN_Utilization;
		double nodes_utilization;
		double Sum_edges_Utilization;
		double edges_utilization;
		double MaxPWCap       = 0;    // Maximum PW capacity of all SN nodes 
		double Minsd          = 0.0001*ActivateDelay;   // min Delay for each link is 0.000001.
		double Maxsd          = 0.008*ActivateDelay;	 // max Delay for each link is 0.0001.

			
		// Delay settings according to (3GPP TR 38.913 version 14.2.0 Release 14 and ETSI TR 138 913 V14.2.0 (2017-05)) && ITU Technical Report (Transport network support of IMT-2020/5G)
		/*
		 * User plane latency
			The time it takes to successfully deliver an application layer packet/message from the radio protocol layer 2/3 SDU
			ingress point to the radio protocol layer 2/3 SDU egress point via the radio interface in both uplink and downlink
			directions, where neither device nor Base Station reception is restricted by DRX.
			
			For URLLC, the target for user plane latency should be 0.5ms for UL, and 0.5ms for DL. Furthermore, if possible, the
			latency should also be low enough to support the use of the next generation access technologies as a wireless transport
			technology that can be used within the next generation access architecture.
			NOTE1: The reliability KPI also provides a latency value with an associated reliability requirement. The value
			above should be considered an average value and does not have an associated high reliability
			requirement.
			
			For eMBB, the target for user plane latency should be 4ms for UL, and 4ms for DL.
			NOTE2: For eMBB value, the evaluation needs to consider all typical delays associated with the transfer of the
			data packets in an efficient way (e.g. applicable procedural delay when resources are not preallocated,
			averaged HARQ retransmission delay, impacts of network architecture)
		 */
		
		// Put midDSFC and maxDSFC to 0.001 for URLLC, and 0.008 for eMBB
		
		double minDSFC = 0.001; 
		double maxDSFC = 0.008;
		
		
		
		
		double Sum_edges_BW_Cons = 0.0;
		//double Sum_Nodes_CPU_Cons= 0.0;

		//----------------------- Here change the BW_Adj from Gb to bits ------------------------------
		
		for(int i=0 ; i<BW_Adj.length ; i++)
			for(int j=0 ; j<BW_Adj.length ; j++)
			{
				BW_Adj[i][j] = BW_Adj[i][j] * 1000;
				SN_BWmatrix[i][j] = BW_Adj[i][j]; 
			}
		
	//----------------- This is where we update the network delays ---------------------------------------
		
		for(int i=0 ; i<Delay_Adj.length ; i++)
		{
			for(int j=0 ; j<Delay_Adj.length ; j++)
			{
				Delay_Adj[i][j]= (Delay_Adj[i][j] * (Minsd + (Math.random() * ((Maxsd  - Minsd)))));
				//System.out.print(Delay_Adj[i][j]+"-");
			}
			//System.out.println();
		
		}
		
		//-------------------------------------------------------------------------------------------------
			
		int number_of_cores_per_servers = 48; // maximum number of cores per each server. 
		double PC_max_node	  = 1000;    // Power consumption of any SN node.
		double a_PCidletomax  = a_traffic[a_traf];// // ratio between idle PC to max power of line card.
		double P_idle         = a_PCidletomax * PC_max_node;  // Idle power of a line card.

	//-----------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------  Define SN parameters  -----------------------------------------------
	//-----------------------------------------------------------------------------------------------------------------------
		
	for (int i=0 ; i<Servers ; i++)
		{
			Servers_MAX_CPU_Cap  [i] = Servers_Cores[i][1]*number_of_cores_per_servers; // Initialize the CPU matrix.
			Servers_Consumed_Core[i] = 0; // Consumed cores on each server in terms of allocated traffic.
			Tot_PW_idle_and_Cons_Server[i] =0;
		}
			
	for (int i=0 ; i < Servers ; i++)
		{
		
		Servers_CPU_Cons    [i] = Servers_MAX_CPU_Cap [i];  // Initialize consumed CPU

		Servers_CPU_Cur_Util[i] = ((( Servers_MAX_CPU_Cap[i] - Servers_CPU_Cons[i])/ Servers_MAX_CPU_Cap[i]));
		
		Servers_MAX_Power_Cap      [i] = PC_max_node;  // fill the SN node's power.
		Servers_idle_PCons         [i] = P_idle; // Idle power consumption each SN node.
		Servers_MIN_Power_Cap      [i] = Servers_idle_PCons   [i];
		Servers_Current_PCons_node [i] = Servers_idle_PCons   [i] 
				                      +((Servers_MAX_Power_Cap[i]
				                      -  Servers_idle_PCons   [i])
				                      *  Servers_CPU_Cur_Util [i]); // Current Power consumption per each SN node. 
		
		MaxPWCap	   += Servers_MAX_Power_Cap[i];
		/*
		System.out.println( 	
						   " MAX_PCons = " + i + "\t" + (int)Servers_MAX_Power_Cap       [i] +"\t" +
						   " MIN_PCons = " + i + "\t" + (int)Servers_idle_PCons          [i] +"\t" +
						   " Cur_PCons = " + i + "\t" + (int)Servers_Current_PCons_node  [i] +"\t" +
						   " CPUCap    = " + i + "\t" + (int)Servers_CPU_Cons            [i] +"\t" +
						   " CPU_Utili = " + i + "\t" + (int)Servers_CPU_Cur_Util        [i]);	
		 */
		}// End of for (int i=0 ; i < Servers ; i++
		
	//-------------------------------------------------------------------------------------------------------------------
	// ---------------------------------------  Start Creating and Initializing SFCs  -----------------------------------.
	//-------------------------------------------------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------------------------------------------------
	// ---------------------------------------  Start Creating and Initializing SFCs  -----------------------------------.
	//-------------------------------------------------------------------------------------------------------------------
		
		double[] alfa    = {1.00,0.93,0.87,0.80,0.73,0.67,0.60,0.53,0.47,0.40,0.33,0.27,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73,0.80,0.87,0.93};
		
		// Next for loop is the starting of generating SFCs and the Embedding.

		//SFC: define controlling parameters for the random equations generating power, CPU, BW and delay matrices.
			double[][] SFCs1_mod     = new double[MaxSFCs][7]; // Matrix to save the SFC1 values when the BW is modulated by Alpha
			double[][] SFCs2_mod     = new double[MaxSFCs][8]; // Matrix to save the SFC2 values when the BW is modulated by Alpha
			double[][] SFCs3_mod     = new double[MaxSFCs][9];  // Matrix to save the SFC3 values when the BW is modulated by Alpha
			
			double[][] SFCstoallocate= new double[MaxSFCs*SFCduplicator][9]; 
			/*This is the most important matrix, since it includes the total number of SFCs to be allocated*/ 

			
			int[]    NumberofnodesinSFC = new int   [SFCstoallocate.length];
			double[] All_Alfas	        = new double[SFCstoallocate.length];

			for ( int Tot_Num_of_SFCs = 0; Tot_Num_of_SFCs < MaxSFCs; Tot_Num_of_SFCs++ )
			{			
				for(int j=0; j<7 ; j++)
				{
					SFCs1_mod[Tot_Num_of_SFCs][j]=SFC1[Tot_Num_of_SFCs][j];	
				//System.out.print(SFCs1_mod[Tot_Num_of_SFCs][j]+"\t");  // This modifies the BW demands of the SFC according to the daily traffic trend as defined by Alpha[D]
				
				}//System.out.println();
			}
			
			for ( int Tot_Num_of_SFCs = 0; Tot_Num_of_SFCs < MaxSFCs; Tot_Num_of_SFCs++ )
			{			
				for(int j=0; j<8 ; j++)
				{
					SFCs2_mod[Tot_Num_of_SFCs][j]=SFC2[Tot_Num_of_SFCs][j];	
				//System.out.print(SFCs2_mod[Tot_Num_of_SFCs][j]+"\t");  // This modifies the BW demands of the SFC according to the daily traffic trend as defined by Alpha[D]
				
				}//System.out.println();
			}
			
			for ( int Tot_Num_of_SFCs = 0; Tot_Num_of_SFCs < MaxSFCs; Tot_Num_of_SFCs++ )
			{			
				for(int j=0; j<9 ; j++)
				{
					SFCs3_mod[Tot_Num_of_SFCs][j]=SFC3[Tot_Num_of_SFCs][j];	
				//System.out.print(SFCs3_mod[Tot_Num_of_SFCs][j]+"\t");  // This modifies the BW demands of the SFC according to the daily traffic trend as defined by Alpha[D]
				
				}//System.out.println();
			}
		
			
			//---------------------------------------------------------------------------------------------------------------------	

			/*
			 * The following section randomly selects the SFCs to be allocated
			/* */
			
			int V = 0; // to control the loop of the daily demands.
			
			int VNFmax  = 3;
			int VNFmin  = 1;
			int MaxSFC = MaxSFCs;
			int MinSFC = 0;
	   
			for ( int Tot_Num_of_SFCs = 0 ; Tot_Num_of_SFCs < SFCstoallocate.length ; Tot_Num_of_SFCs++ )
			{			
				int VNFsinSFC = (int) (VNFmin + (Math.random() * ((VNFmax  - VNFmin)+1)));
				NumberofnodesinSFC[Tot_Num_of_SFCs] = VNFsinSFC; // a matrix saving the number of VNFs per each SFC.
				
				if ( V < alfa.length )
				{	
					int Selected_SFC = (int) ( MinSFC + (Math.random() * ((MaxSFC  - MinSFC))));
					
					All_Alfas[Tot_Num_of_SFCs] = alfa[V];
					//System.out.println("SFC \t" + Tot_Num_of_SFCs + "\t" + "At traffic value\t" + All_Alfas[Tot_Num_of_SFCs]);

					if (VNFsinSFC == 1)
					{
						SFCstoallocate[Tot_Num_of_SFCs][0] = Selected_SFC; // To save the number of the selected SFC.
						SFCstoallocate[Tot_Num_of_SFCs][1] = VNFsinSFC;    // To save the type of the SFC.
						SFCstoallocate[Tot_Num_of_SFCs][2] = SFCs1_mod[Selected_SFC][2]; // To save demanded source-destination of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][3] = SFCs1_mod[Selected_SFC][3]; // To save demanded BW of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][4] = SFCs1_mod[Selected_SFC][4]; // To save demanded delay of  this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][5] = SFCs1_mod[Selected_SFC][5]; // To save demanded cores of  this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][6] = SFCs1_mod[Selected_SFC][6]; // To save demanded processing time of this SFC.

					} // End of if (VNFsinSFC == 1)
					
					if (VNFsinSFC == 2)
					{
						SFCstoallocate[Tot_Num_of_SFCs][0] = Selected_SFC; // To save the number of the selected SFC.
						SFCstoallocate[Tot_Num_of_SFCs][1] = VNFsinSFC;    // To save the type of the SFC.
						SFCstoallocate[Tot_Num_of_SFCs][2] = SFCs2_mod[Selected_SFC][2]; // To save demanded source-destination of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][3] = SFCs2_mod[Selected_SFC][3]; // To save demanded BW of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][4] = SFCs2_mod[Selected_SFC][4]; // To save demanded delay of  this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][5] = SFCs2_mod[Selected_SFC][5]; // To save demanded cores of the first VNF in this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][6] = SFCs2_mod[Selected_SFC][6]; // To save demanded cores of the second VNF of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][7] = SFCs2_mod[Selected_SFC][7]; // To save demanded processing time of this SFC.

					} // End of if (VNFsinSFC == 2)
					
					if (VNFsinSFC == 3)
					{
						SFCstoallocate[Tot_Num_of_SFCs][0] = Selected_SFC; // To save the number of the selected SFC.
						SFCstoallocate[Tot_Num_of_SFCs][1] = VNFsinSFC;    // To save the type of the SFC.
						SFCstoallocate[Tot_Num_of_SFCs][2] = SFCs3_mod[Selected_SFC][2]; // To save demanded source-destination of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][3] = SFCs3_mod[Selected_SFC][3]; // To save demanded BW of this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][4] = SFCs3_mod[Selected_SFC][4]; // To save demanded delay of  this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][5] = SFCs3_mod[Selected_SFC][5]; // To save demanded cores of the 1st VNF in this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][6] = SFCs3_mod[Selected_SFC][6]; // To save demanded cores of the 2nd VNF in this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][7] = SFCs3_mod[Selected_SFC][7]; // To save demanded cores of the 3rd VNF in this SFC.
						SFCstoallocate[Tot_Num_of_SFCs][8] = SFCs3_mod[Selected_SFC][8]; // To save demanded processing time of this SFC.

					} // End of if (VNFsinSFC == 3)
				
					V++;
				//	System.out.print(Tot_Num_of_SFCs);

				} else	{
							V=0;				  	
							Tot_Num_of_SFCs=Tot_Num_of_SFCs-1;
							//break;				
							//System.out.println( Tot_Num_of_SFCs+ "\t" + NumberofnodesinSFC[Tot_Num_of_SFCs] + "\t" + V );
						}
			} // end of For loop which fills in the 2000 SFCs matrices.
			


			

	//---------------------------------------------------------------------------------------------------------------------
			int D = 0; // to control the loop of the daily demands.
		
			/*
			 * The following "for loop" modifies the BW values of each SFC according to the daily traffic cycle
			 * as defined by alfa[D].
			 */			
			
			for ( int Tot_Num_of_SFCs = 0; Tot_Num_of_SFCs < SFCstoallocate.length; Tot_Num_of_SFCs++ )
			{			
				if ( D < alfa.length )
				{											
					double SFCdel = (minDSFC + (Math.random() * ((maxDSFC  - minDSFC)+1)));
					
					SFCstoallocate[Tot_Num_of_SFCs][3] = SFCstoallocate[Tot_Num_of_SFCs][3] * alfa[D];  // This modifies the BW demands of the SFC according to the daily traffic trend as defined by Alpha[D]
					SFCstoallocate[Tot_Num_of_SFCs][4] = SFCstoallocate[Tot_Num_of_SFCs][4] * SFCdel;  // This modifies the BW demands of the SFC according to the daily traffic trend as defined by Alpha[D]
									
				D++;
				//	System.out.print(Tot_Num_of_SFCs);

				} else	{
							D=0;				  	
							Tot_Num_of_SFCs = Tot_Num_of_SFCs-1;
							//System.out.println( Tot_Num_of_SFCs+ "\t" + D );
						}
			} // end 
			
	
			//Allpaths.length
			
		/*	for (int i=0 ; i< 100; i++)
			{
				for (int j=0 ; j<9 ; j++)
					System.out.print(SFCstoallocate[i][j] + "\t");
			          	 
			 System.out.println();
			
			}// End of for (int i=0 ; i< MaximumSFCs; i++)
			
	 */  

			
		/*	
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
						
						Scanner sc1 = new Scanner(System.in);
						System.out.println("what is the value of a");
				        System.out.println();
						int a = sc1.nextInt();
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

		*/		

		/*	
			//SFCstoallocate.length
			
			for (int i=0 ; i< 100 ; i++)
			{
				for (int j=0 ; j<9 ; j++)
					System.out.print(SFCstoallocate[i][j] + "\t");
			          	 
			 System.out.println();
			
			}// End of for (int i=0 ; i< MaximumSFCs; i++)
			
	 */  

			/*
			
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
						@SuppressWarnings("resource")
						Scanner sc1 = new Scanner(System.in);
						System.out.println("what is the value of a");
				        System.out.println();
						int a = sc1.nextInt();
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

		*/		
			
			
	//_________________________________________  End of SFCs declaration  ___________________________________________________________________	

	//---------------------------   Beginning of searching and listing all paths in the suggested Topology	---------------
			
	//---------------------------------------------------------------------------------------------------------------------
	//------------------------------------- THis section is to generate all paths in the network  -------------------------
	//---------------------------------------------------------------------------------------------------------------------

	//-------------------------------------------------- Paths of Type - 9 - Nodes ----------------------------------------
				/*						
						for (int i=0 ; i< P9.length; i++)
						{
							System.out.print(" P9-->" + "\t");
							
							for (int e=0 ; e<13 ; e++)											
			     			    System.out.print(P9[i][e]+ ","); // print the paths type 9 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths9 = new int[P9.length]; // a matrix to save the path numbers of the newly formulated paths type 4 nodes
						int a9=0;
						
						for (int a=0 ; a<P9.length ; a++ )
						{
							sorted_CPUsum_paths9[a]=a9; // this gives the path numbers 
							a9++;
							//System.out.println(sorted_CPUsum_paths4[a]); // print these paths numbers
						}				
						System.out.println( "Type-9 paths\t" + P9.length);
						
	//-------------------------------------------  End of Paths of 9 nodes   --------------------------------------------				

	//------------------------------------------- Paths of Type - 101 - Nodes  --------------------------------------------
						
						for (int i=0 ; i< P101.length; i++)
						{
							System.out.print(" P101-->" + "\t");
							
							for (int e=0 ; e<14 ; e++)											
			     			    System.out.print(P101[i][e]+ ","); // print these paths type 10 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths101 = new int[P101.length]; // a matrix to save the path numbers of the newly formulated paths type 5 nodes
						int a101=0;
						
						for (int a=0 ; a<P101.length ; a++ )
						{
							sorted_CPUsum_paths101[a]=a101; // this gives the path numbers 
							a101++;
							//System.out.println(sorted_CPUsum_paths101[a]); // print these paths numbers
						}				
						System.out.println( "Type-101 paths\t" + P101.length);
						
	//-------------------------------------------  End of Paths of 101 nodes   --------------------------------------------				
		
	//------------------------------------------- Paths of Type - 102 - Nodes  --------------------------------------------
						
						for (int i=0 ; i< P102.length; i++)
						{
							System.out.print(" P102-->" + "\t");
							
							for (int e=0 ; e<14 ; e++)											
			     			    System.out.print(P102[i][e]+ ","); // print these paths type 102 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths102 = new int[P102.length]; // a matrix to save the path numbers of the newly formulated paths type 5 nodes
						int a102=0;
						
						for (int a=0 ; a<P102.length ; a++ )
						{
							sorted_CPUsum_paths102[a]=a102; // this gives the path numbers 
							a102++;
							//System.out.println(sorted_CPUsum_paths102[a]); // print these paths numbers
						}				
						//System.out.println( "Type-102 paths\t" + P102.length);
				*/		
	//-------------------------------------------  End of Paths of 101 nodes   --------------------------------------------				
						
						
						
	//------------------------------------------- Paths of Type - 11 - Nodes  --------------------------------------------
				/*		
						for (int i=0 ; i< P11.length; i++)
						{
							System.out.print(" P11-->" + "\t");
							
							for (int e=0 ; e<15 ; e++)											
			     			    System.out.print(P11[i][e]+ ","); // print these paths type 11 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths11 = new int[P11.length]; // a matrix to save the path numbers of the newly formulated paths type 6 nodes
						int a11=0;
						
						for (int a=0 ; a<P11.length ; a++ )
						{
							sorted_CPUsum_paths11[a]=a11; // this gives the path numbers 
							a11++;
							//System.out.println(sorted_CPUsum_paths11[a]); // print these paths numbers
						}				
						System.out.println( "Type-11 paths\t" + P11.length);
						
	//-------------------------------------------  End of Paths of 11 nodes   --------------------------------------------				
						
	//------------------------------------------- Paths of Type - 13 - Nodes  --------------------------------------------
						
						for (int i=0 ; i< P13.length; i++)
						{
							System.out.print(" P13-->" + "\t");
							
							for (int e=0 ; e<17 ; e++)											
			     			    System.out.print(P13[i][e]+ ","); // print these paths type 13 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths13 = new int[P13.length]; // a matrix to save the path numbers of the newly formulated paths type 7 nodes
						int a13=0;
						
						for (int a=0 ; a<P13.length ; a++ )
						{
							sorted_CPUsum_paths13[a]=a13; // this gives the path numbers 
							a13++;
							//System.out.println(sorted_CPUsum_paths13[a]); // print these paths numbers
						}				
						System.out.println( "Type-13 paths\t" + P13.length);
						
	//-------------------------------------------  End of Paths of 13 nodes   --------------------------------------------				
						
	//------------------------------------------- Paths of Type - 15 - Nodes  --------------------------------------------
						
						for (int i=0 ; i< P15.length; i++)
						{
							System.out.print(" P15-->" + "\t");
							
							for (int e=0 ; e<19 ; e++)											
			     			    System.out.print(P15[i][e]+ ","); // print these paths type 15 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths15 = new int[P15.length]; // a matrix to save the path numbers of the newly formulated paths type 8 nodes
						int a15=0;
						
						for (int a=0 ; a<P15.length ; a++ )
						{
							sorted_CPUsum_paths15[a]=a15; // this gives the path numbers 
							a15++;
							//System.out.println(sorted_CPUsum_paths15[a]); // print these paths numbers
						}				
						System.out.println( "Type-15 paths\t" + P15.length);
						
	//-------------------------------------------  End of Paths of 15 nodes   --------------------------------------------				
							
						
	//------------------------------------------- Paths of Type - 17 - Nodes  --------------------------------------------
						
						for (int i=0 ; i< P17.length; i++)
						{
							System.out.print(" P17-->" + "\t");
							
							for (int e=0 ; e<21 ; e++)											
			     			    System.out.print(P17[i][e]+ ","); // print these paths type 17 nodes
								
							System.out.println();
						}					
						
						int[] sorted_CPUsum_paths17 = new int[P17.length]; // a matrix to save the path numbers of the newly formulated paths type 8 nodes
						int a17=0;
						
						for (int a=0 ; a<P17.length ; a++ )
						{
							sorted_CPUsum_paths17[a]=a17; // this gives the path numbers 
							a17++;
							//System.out.println(sorted_CPUsum_paths17[a]); // print these paths numbers
						}				
						System.out.println( "Type-17 paths\t" + P17.length);
					*/	
	//-------------------------------------------  End of Paths of 17 nodes   --------------------------------------------				
						
						
	//__________________________________  End of Initializing the SN paths ___________________________________________________
	//-------------------------------------------------------------------------------------------------------------------------

	//------------------------------------------------------------------------------------------------------------------------
	//-----------------------------------    At this stage we start the simulation  ------------------------------------------
	//------------------------------------------------------------------------------------------------------------------------
													
	//----------------------------------------------------------------------------------------------------------------
	//--------------------------Run each load setting for a total of Max_Runs times----------------------------------
	//----------------------------------------------------------------------------------------------------------------

	int MaximumSFCs = SFCstoallocate.length;
			
	double[][] SFCs_output         = new double[MaximumSFCs][15];
	double[] TO_BE_SelectedPath    = new double[29]; // This matrix saves the used SN path for successful embedding and the SFC that was embedded. 
	double[] TO_BE_SelectedPath_m  = new double[29]; // This matrix saves the used SN path for successful embedding and the SFC that was embedded. 
	double[][] SelectedPath          = new double[MaximumSFCs][29]; // This matrix saves the used SN path for successful embedding and the SFC that was embedded. 

	int[]  SNOffNodes        = new int[MaximumSFCs];  // saves the number of turned off SN after each SFC embedding.
	int    successfulSFC     = 0;                     // Counter for the successful SFCs.
	int    rejectedSFCs      = 0;                     // Counter for the rejected SFCs

		   
	for (int i=0 ; i<MaximumSFCs ; i++)
	for (int j=0 ; j<29 ; j++)
	{
		SelectedPath         [i][j]=10000;
	}
	
	for (int j=0 ; j<29 ; j++)
	{
		TO_BE_SelectedPath   [j]=10000;
		TO_BE_SelectedPath_m [j]=10000;
		
	}
	
	
	//***********************************************************************************************************
	// Calculate the total demanded BW for all SFCs

	double TotBW=0;

	for (int i=0 ; i<MaximumSFCs ; i++)
		TotBW += SFCstoallocate[i][3];

	for (int i=0 ; i<MaximumSFCs ; i++)
	for (int j=0 ; j<11 ; j++)
		SFCs_output[i][j] = 0;	// Reset the SFCs array with zeros.	

	//------------------------------------------------------------------------------------------------------------------------		    
	//---------------------------------------------Start Injecting SFCs-------------------------------------------------------	
	//------------------------------------------------------------------------------------------------------------------------		    

	double[] SN_Total_PW_Consumption_withTurnOFF = new double[MaximumSFCs];	// a matrix to save total PW consumption when turn off strategy is used.
	double[] SN_Total_PW_Consumption_NoTurnOFF   = new double[MaximumSFCs];	// a matrix to save total PW consumption when no turn off strategy was used.
	double[] Embedding_cost          = new double[MaximumSFCs]; // a matrix to save revenue to cost ratio for each iteration.
	double[] SFCs_Acceptance_Ratio   = new double[MaximumSFCs]; // Array to SFCs acceptance ratio after each Max_SFCs iteration.
	double[] SFCs_Bloking_Ratio      = new double[MaximumSFCs]; // Array to SFCs acceptance ratio after each Max_SFCs iteration.
	double[] PowerSaving             = new double[MaximumSFCs]; // Array to save the power saving ratio after each Max_SFCs iteration.
	double[] MaxPWCapacity			 = new double[MaximumSFCs];
	double[] nodes_average_CPU_utili = new double[MaximumSFCs]; // a matrix to save the average CPU utilization per each iteration 
	double[] edges_average_BW_utili  = new double[MaximumSFCs];	// a matrix to save the average BW utilization per each iteration 
	double[] SNPC                    = new double[MaximumSFCs]; // This to save the total power consumption in all SN after each iteration.
	double[] Consumed_CPU	 		 = new double[MaximumSFCs];
	double[] Consumed_BW	 		 = new double[MaximumSFCs];

	double TotServersConsumedPower   = 0; // Includes the total sum of the Server's Power consumption after all SFCs 
	double TotalmigrateionCosts      = 0; // Includes the total sum of the Migration costs after all SFCs 
	int    Totlanumberofmigration    = 0; // Sum of all migrations after all SFC.

	double[] TotEC                = new double[MaximumSFCs]; // Initialize the total Migration Cost before start a new migration phase.
	double[] Tot_CMig             = new double[MaximumSFCs]; // Initialize the total Migration Cost before start a new migration phase.
	int   [] Number_of_Migrations = new int   [MaximumSFCs]; // Counter for the successful migrated SFCs.

	for (int i=0 ; i<MaximumSFCs ; i++)
	{
		SN_Total_PW_Consumption_withTurnOFF[i] = 0;	// Reset with zeros.	
		SN_Total_PW_Consumption_NoTurnOFF[i]   = 0;	// Reset with zeros.	
		PowerSaving            [i] = 0;	// Reset with zeros.	
		MaxPWCapacity          [i] = 0; // Reset with zeros.
		SFCs_Acceptance_Ratio  [i] = 0;	// Reset with zeros.	
		SFCs_Bloking_Ratio     [i] = 0;	// Reset with zeros.	
		nodes_average_CPU_utili[i] = 0;	// Reset with zeros.	
		edges_average_BW_utili [i] = 0;	// Reset with zeros.	
		SNPC                   [i] = 0;
		Consumed_CPU           [i] = 0;
		Consumed_BW            [i] = 0;
		TotEC                  [i] = 0;
		Tot_CMig               [i] = 0;
		Number_of_Migrations   [i] = 0;
	}
				
		int[]   Succ_Used_Paths 	   = new int[MaximumSFCs]; // Array to save the path number of a successful SFC embedding
		int[]   SN_All_Nodes		   = new int[Servers];     // All nodes in the SN.
		
		for (int i=0 ; i<MaximumSFCs ; i++)
			Succ_Used_Paths[i] = 0;
		
		double[]   Servers1Current_PCons     = new double[Servers]; // This is matrix to save the current power consumption for each server as calculated through Eramo's eq.(15).

		for (int i = 0 ; i < Servers ; i++)
		{
			SN_All_Nodes[i] = i ; // Saving the node number for all SN nodes.
			// System.out.print(SN_All_Nodes[i] + " ,");
			Servers1Current_PCons[i]=0;
			
		}	

	//********************************************************************************************************************	
	//--------------------------------------------------------------------------------------------------------------------				
	//----------------------------------   FROM HERE: STARTING REAL SIMULATION -------------------------------------------
	//--------------------------------------------------------------------------------------------------------------------
	//********************************************************************************************************************	
		int suc=0;
		double rej=0;
		double DroppedBW =0;	
		long[] totalTime = new long[MaximumSFCs];

		
	for (int SFC = 0 ; SFC < MaximumSFCs ; SFC++)
	{
		
		startTime = System.currentTimeMillis();
		
	// This is a for loop over the total simulation time frame. ****************STARTING THE SIMULATION*********************
		
	//-------------------------------------------------------------------------------------------------------------------				
	//--------------------------------- Definition of Power Compensation parameters -------------------------------------
	//-------------------------------------------------------------------------------------------------------------------
	int     NumberofTurndoffSNNodes  = 0;
	int     Turned_off_nodes         = 0 ; // A counter to be used to set the size of the matrix that contains the SN nodes that will be turned off.
	double  PC_forSN_TurnedOff_Nodes = 0 ; // to save the total power consumption of the SN turned off nodes
	double  Tot_SN_consumed_power    = 0;  // Total consumed power by all SN nodes after each SFC embedding
							
	//-------------------------------------------------------------------------------------------------------------------				
	//--------------------------------- End of Definition of Power Compensation parameters -------------------------------------
	//-------------------------------------------------------------------------------------------------------------------
		
	//*************************************************************************************************************************
	//*************************************************************************************************************************
	//*********************           Beginning of EMBEDDING on SN paths          *************************************************
	//*************************************************************************************************************************
	//*************************************************************************************************************************
		
	int SFCnodes = (int) SFCstoallocate[SFC][1]; // NodesinSFCpath is an input from the SFC section. But here for testing only	
		
	System.out.println(" Number of nodes in SFC\t("+ SFC + ")\t" + SFCnodes);
//
		


		//---------------------------------------------  Paths for Type SFC1   --------------------------------------------------		
		//------------------------------------------Initialize the Power and CPU matrices ---------------------------------------- 
		//------------------------- Initialize Power and CPU matrices for the SN nodes in paths of type SFC1 ------------------------

	    int tempsorted_pathG      = 0;        // this is temporary store to save the value of the index for the sorted power value.
		int tempsorted_path       = 0;        // this is temporary store to save the value of the index for the sorted power value.
		int tempsorted_SD         = 0;        // this is temporary store to save the value of the index for the sorted power value.
		int tempsorted_Nodes      = 0;        // this is temporary store to save the value of the index for the sorted power value.
		int tempsorted_Server     = 0;        // this is temporary store to save the value of the index for the sorted power value.
		double tempsorted_CPU     = 0;        // this is temporary store to save the value of the index for the sorted power value.
		

		double[]   Servers1Max_Power         = new double[Servers]; // this is a matrix that includes the Maximum power capacity per each SN node
		double[]   Servers1Min_Power         = new double[Servers]; // this is a matrix that includes the Minimum power capacity per each SN node
		double[]   Servers1Consmed_Power     = new double[Servers]; // this is a matrix that includes the Maximum power capacity per each SN node
		double[]   Servers1Consmed_Power_sum = new double[Servers]; // SORTED matrix to save the sum of the consumed power values for the Path nodes 

		double[]   Servers1Max_CPU                   = new double[Servers]; // this is a matrix that includes the current CPU per each SN node	
		double[]   Servers1CPU                       = new double[Servers]; // this is a matrix that includes the current CPU per each SN node
		double[]   Servers1CPU_Utilization           = new double[Servers]; // this is a matrix to save the CPU utilization for each SN node in this path.			
		double[]   Servers1cpu_utilization_sum       = new double[Servers]; // SORTED matrix to save the sum of the CPU values for the Path nodes 
		double[][] Servers1CPU_util_not_sorted_paths = Allpaths_not_sorted; // NOT SORTED matrix to save the sum of the power values for the Path nodes
		double[][] Servers1CPU_util_sorted_paths     = Allpaths_not_sorted;  // a matrix to save the index of the sorted Paths based on power consumption. We first initialize by the number of not sorted paths numbers.


		for (int i = 0 ; i < Servers ; i++)
			{
				Servers1cpu_utilization_sum[i] = 0; // to reset the CPU utilization for each path after sorting the paths
				Servers1Consmed_Power_sum  [i] = 0; // to reset the CPU utilization for each path after sorting the paths
				
			// Here we initialize the Power COnsumption and CPU matrices for all paths in this type.
						
					Servers1Max_Power[i]       = Servers_MAX_Power_Cap[i]; // This saves the Max power per each Server.
					Servers1Min_Power[i]       = Servers_MIN_Power_Cap[i]; // This saves the Min power per each Server.
					Servers1Max_CPU  [i]	   = Servers_MAX_CPU_Cap  [i]; // fill the Maximum CPU for the SN node j in path i to calculate CPU utilization 
					Servers1CPU      [i]       = Servers_CPU_Cons     [i]; // fill the CPU matrix by the current CPU value.
				//------
					Servers1CPU_Utilization[i] = ((Servers1Max_CPU  [i] - Servers1CPU[i]) / Servers1Max_CPU  [i] ); // This to calculate the CPU utilization per each SN node in the path
					Servers1Consmed_Power  [i] =   Servers1Min_Power[i]  
							                    +((Servers1Max_Power[i] 
							                    -  Servers1Min_Power[i])  
							                    *  Servers1CPU_Utilization[i]); // This calculates the current power consumption per each SN node	
				//------				
					
			/*   System.out.print("SN PTSFC1 node #" + i + " -->  "
						        + "  Cons_Power-" + " = " + Servers1Consmed_Power  [i] 
						        + "     Cur_CPU-" + " = " + Servers1CPU            [i]
						        + "     Max_CPU-" + " = " + Servers1Max_CPU        [i]
						        + "    CPU_Util-" + " = " + Servers1CPU_Utilization[i]);			
				System.out.println();
			*/											
				
				}
		/*	 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	  	Scanner sc1 = new Scanner(System.in);
	  	System.out.println("what is the value of a");
	  	System.out.println();
	  	int a = sc1.nextInt();
	  	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   */
		/*
		for (int i = 0 ; i < P_SFC1_Paths ; i++)
			System.out.println("  Servers1cpu_utilization_sum  = " + Servers1cpu_utilization_sum[i] + 
					           "  Servers1CPU_util_not_sorted  = " + Servers1CPU_util_not_sorted[i]);
		*/				
		//System.out.println();

		//00 sorting the paths total CPU utilization and finding the index that represents the
		// paths of the sorted power matrix  000

		for (int i=0 ; i<Servers1CPU_util_not_sorted_paths.length ; i++)
		{
			Servers1CPU_util_not_sorted_paths[i][5] =  Servers1CPU_Utilization[(int) Servers1CPU_util_not_sorted_paths[i][4]];
			Servers1CPU_util_sorted_paths    [i][5] =  Servers1CPU_Utilization[(int) Servers1CPU_util_sorted_paths    [i][4]];
		}

		for (int i1=0; i1 < Servers1CPU_util_sorted_paths.length-1; i1++ )  
		{
		for ( int j1=i1+1; j1 < Servers1CPU_util_sorted_paths.length; j1++ )
		{
		   if((Servers1CPU_util_sorted_paths[i1][5] < Servers1CPU_util_sorted_paths [j1][5])&&
			   (Servers1CPU_util_sorted_paths[i1][6] < Servers1CPU_util_sorted_paths [j1][6]))// &&Servers1Consmed_Power_sum  [i1] < Servers1Consmed_Power_sum   [j1])  )    //sorting into descending order
		     {
		  	     tempsorted_pathG                = (int) Servers1CPU_util_sorted_paths[i1][0];	// swapping the Path global number
			     tempsorted_path                 = (int) Servers1CPU_util_sorted_paths[i1][1];	// swapping the Path number 
		  	     tempsorted_SD                   = (int) Servers1CPU_util_sorted_paths[i1][2];	// swapping the S-D
		  	     tempsorted_Nodes                = (int) Servers1CPU_util_sorted_paths[i1][3];	// swapping the Nodes in the path
		  	     tempsorted_Server               = (int) Servers1CPU_util_sorted_paths[i1][4];	// swapping the Server number
		  	     tempsorted_CPU                  =       Servers1CPU_util_sorted_paths[i1][5];	// swapping the Server's utilization

		  	     Servers1CPU_util_sorted_paths[i1][0] = Servers1CPU_util_sorted_paths[j1][0];
		  	     Servers1CPU_util_sorted_paths[i1][1] = Servers1CPU_util_sorted_paths[j1][1];
		  	     Servers1CPU_util_sorted_paths[i1][2] = Servers1CPU_util_sorted_paths[j1][2];
		  	     Servers1CPU_util_sorted_paths[i1][3] = Servers1CPU_util_sorted_paths[j1][3];
		  	     Servers1CPU_util_sorted_paths[i1][4] = Servers1CPU_util_sorted_paths[j1][4];
		  	     Servers1CPU_util_sorted_paths[i1][5] = Servers1CPU_util_sorted_paths[j1][5];

		  	     Servers1CPU_util_sorted_paths[j1][0] = tempsorted_pathG;
		  	     Servers1CPU_util_sorted_paths[j1][1] = tempsorted_path;
		  	     Servers1CPU_util_sorted_paths[j1][2] = tempsorted_SD;			
		  	     Servers1CPU_util_sorted_paths[j1][3] = tempsorted_Nodes;			
		  	     Servers1CPU_util_sorted_paths[j1][4] = tempsorted_Server;			
		  	     Servers1CPU_util_sorted_paths[j1][5] = tempsorted_CPU;			

								   
		     } // end of -if- for sorting           
		} // end of j1 for-loop 
		} // end of i1 for-loop
					
		//System.out.println();		
		//System.out.println("Not Sorted Path " + "   CPUSum " + " ----- " + " Sorted Path " + " CPUSum ");
		//System.out.println();
					
		//Here we print the values of the total cpu in the path, once before sorting, and then after after sorting.
		// Servers1CPU_util_sorted_paths.length
		
	/*  for (int i=0; i < 100 ; i++) 
		  System.out.println("\t" + i  + 
				              "\t" +       Servers1CPU_util_not_sorted_paths[i][0] 
				            + "\t" + (int) Servers1CPU_util_not_sorted_paths[i][1] 
						    + "\t" + (int) Servers1CPU_util_not_sorted_paths[i][2] 
							+ "\t" + (int) Servers1CPU_util_not_sorted_paths[i][3] 
							+ "\t" + (int) Servers1CPU_util_not_sorted_paths[i][4] 
							+ "\t" +       Servers1CPU_util_not_sorted_paths[i][5] 
				            + "\t" + 	   Servers1CPU_util_sorted_paths    [i][0]
						    + "\t" + (int) Servers1CPU_util_sorted_paths    [i][1]
							+ "\t" + (int) Servers1CPU_util_sorted_paths    [i][2]
							+ "\t" + (int) Servers1CPU_util_sorted_paths    [i][3]			            		
				            + "\t" + (int) Servers1CPU_util_sorted_paths    [i][4]
						    + "\t" +       Servers1CPU_util_sorted_paths    [i][5]); // to print power consumption values not sorted and after being sorted
		   */
	//000000000000000000000000000000000000000 End of finding the index  000000000000000000000000000000000000000000000000000          
		 /*
		 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		  	Scanner sc2 = new Scanner(System.in);
		  	System.out.println("what is the value of a");
		  	System.out.println();
		  	int c = sc2.nextInt();
		  	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
      */
		  	
	//---------------------------------------------------------------------------------------------------------------------
	//******************************************************* Start Comparisons Phase **************************************************  
	//************************ First create the paths segments for top ranked Server's paths and arriving SFC **************************************

	//**********************************************              SFC Segment                 ***************************************
	//---------------------------------------------------------------------------------------------------------------------
					
		/* Here we define the SFC segment for each demanded path, that includes
		* - First formulate the segment according to the type of the SFC
		* - SFC demanded cores.
		* - SFC demanded BW.
		* - SFC demanded delay.
		*/
		 
		double[] SFC1_segment = new double[5];
		 
		if(SFCnodes==1)
		 {
			    // This is for the SFC of 1 VNF------------
			
			    SFC1_segment[0] = SFCstoallocate[SFC][2]; // SFC source and destination nodes
			    SFC1_segment[1] = SFCstoallocate[SFC][5]; // SFC cores*minVNF
			    SFC1_segment[2] = SFCstoallocate[SFC][3]; // SFC BW
			    SFC1_segment[3] = SFCstoallocate[SFC][4]; // SFC Delay
			    SFC1_segment[4] = SFCstoallocate[SFC][6]; // VNF processing time
		 }else
			 if(SFCnodes==2)
			 {
				// This is for the SFC of 2 VNFs------------

				SFC1_segment[0] = SFCstoallocate[SFC][2]; // SFC source and destination nodes 
				SFC1_segment[1] = SFCstoallocate[SFC][5] + SFCstoallocate[SFC][6];// // SFC cores*minVNF
				SFC1_segment[2] = SFCstoallocate[SFC][3]; // SFC BW
				SFC1_segment[3] = SFCstoallocate[SFC][4]; // SFC Delay
			    SFC1_segment[4] = SFCstoallocate[SFC][7]; // VNF processing time

			 }else
				 if(SFCnodes==3)
				 {
				// This is for the SFC of 3 VNFs------------
					 
				SFC1_segment[0] = SFCstoallocate[SFC][2]; // SFC source and destination nodes*minVNF
				SFC1_segment[1] = SFCstoallocate[SFC][5] + SFCstoallocate[SFC][6] + SFCstoallocate[SFC][7]; // SFC cores
				SFC1_segment[2] = SFCstoallocate[SFC][3]; // SFC BW
				SFC1_segment[3] = SFCstoallocate[SFC][4]; // SFC Delay 
			    SFC1_segment[4] = SFCstoallocate[SFC][8]; // VNF processing time

				 }
	//-----------------------------End of formulating the segment according to the type of the SFC----------------------
	//********************************************* End of SFC Segment initialization **********************************
			
	//******************************************************* SN Segment  ********************************************

	/* Here we define the selected Server's path segment, that includes
	* - Current cores.
	* - Current BW per each edge in the selected path.
	* - Current delay per each edge in the selected path.
	*/

	double[] SNPTSFC1_segment = new double[18]; // This is selected path segment.

	for (int i=0 ; i<SNPTSFC1_segment.length ; i++)
		SNPTSFC1_segment[i] = 40000000;

	/* *****************************************************************************************
	 * - This "for loop " triggers the tests for the resources availability in the sorted paths, 
	 * - It started by the one on the top, 
	 * - Then checks if the s-to-d of that path is the requested s-d by the SFC
	 * - Then formulates the Servers' segments. 
	 * - Servers1CPU_util_sorted_paths[i][0] gives the global path number 
	 * - Servers1CPU_util_sorted_paths[i][1] gives the path number as listed in its type list (P9, P101, P102, P11, P13, P15, P17)
	 * - Servers1CPU_util_sorted_paths[i][2] gives the source and destination of this path
	 * - Servers1CPU_util_sorted_paths[i][3] gives the number of nodes in this path
	 * - Servers1CPU_util_sorted_paths[i][4] gives the number of the Server in this path 
	 * - Servers1CPU_util_sorted_paths[i][5] gives the utilization of the Server in this path.
	 *******************************************************************************************
	 */

	for (int i=0; i<Servers1CPU_util_sorted_paths.length; i++)
		{	
		
		//---The following set of "if statements" checks the s-d of the selected path if it is the demanded by the SFC. 	
//		if((int) SFC1_segment[0] == Servers1CPU_util_sorted_paths[i][2])
//		  {
			if(Servers1CPU_util_sorted_paths[i][3] == 9)
			{
				for(int ii=0 ; ii<13 ; ii++)
				TO_BE_SelectedPath[ii]=P9[ (int) Servers1CPU_util_sorted_paths[i][1]][ii];
			}else
				if((Servers1CPU_util_sorted_paths[i][0] > 255)&&(Servers1CPU_util_sorted_paths[i][0] < 855)
				 &&(Servers1CPU_util_sorted_paths[i][3] == 10))
				{
					for(int ii=0 ; ii<14 ; ii++)
					TO_BE_SelectedPath[ii]=P101[ (int) (Servers1CPU_util_sorted_paths[i][1]-2000)][ii];
				}else
					if((Servers1CPU_util_sorted_paths[i][0] > 855)&&(Servers1CPU_util_sorted_paths[i][0] < 1231)
							 &&(Servers1CPU_util_sorted_paths[i][3] == 10))
					{
						for(int ii=0 ; ii<14 ; ii++)
						TO_BE_SelectedPath[ii]=P102[ (int) (Servers1CPU_util_sorted_paths[i][1]-2600)][ii];
					}else
					if(Servers1CPU_util_sorted_paths[i][3] == 11)
					{
						for(int ii=0 ; ii<15 ; ii++)
						TO_BE_SelectedPath[ii]=P11[ (int) Servers1CPU_util_sorted_paths[i][1]][ii];
					}else
						if(Servers1CPU_util_sorted_paths[i][3] == 13)
						{
							for(int ii=0 ; ii<17 ; ii++)
							TO_BE_SelectedPath[ii]=P13[ (int) Servers1CPU_util_sorted_paths[i][1]][ii];
						}else
							if(Servers1CPU_util_sorted_paths[i][3] == 15)
						{
							for(int ii=0 ; ii<19 ; ii++)
							TO_BE_SelectedPath[ii]=P15[ (int) Servers1CPU_util_sorted_paths[i][1]][ii];
						}else
							if(Servers1CPU_util_sorted_paths[i][3] == 17)
							{
								for(int ii=0 ; ii<21 ; ii++)
								TO_BE_SelectedPath[ii]=P17[ (int) Servers1CPU_util_sorted_paths[i][1]][ii];
							}  
			
		/*
			if(TO_BE_SelectedPath[0]==10000)
				break;
		*/	
			
		/*  }else 
				if (i < Servers1CPU_util_sorted_paths.length-1)
					{
					
					 System.out.println(Servers1CPU_util_sorted_paths[i][0]+"\t"+ 
			                    Servers1CPU_util_sorted_paths[i][1]+"\t"+
					            (int)SFC1_segment[0]+"---\t"+
			                    Servers1CPU_util_sorted_paths[i][2]+"---\t"+
					            Servers1CPU_util_sorted_paths[i][3]);
					
					//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				  	@SuppressWarnings("resource")
				  	Scanner sc1 = new Scanner(System.in);
				  	System.out.println("Old--i--"+i+"\t"+"Outer-loop - what is the value of a");
				  	System.out.println();
				  	int a = sc1.nextInt();
				  	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			 
						continue; // force the next iteration from the for-loop.						  
					}
					
			*/
			 
		/*	for(int w=0;w<21;w++)
				System.out.print(TO_BE_SelectedPath[w]+"\t");
			System.out.println();
		*/	
	// --------------------- the following lines formulate the segment for the selected path -----------------------------
	// -------------- In the first column in SNPTSFC1_segment save the current cores in the targeted Server--------------- 					
			
			//System.out.println("Server S-D\t" + TO_BE_SelectedPath[1] + "\t" + "Demanded S-D\t" + SFC1_segment[0]);

			
			SNPTSFC1_segment[0] = Servers_CPU_Cons  [(int) TO_BE_SelectedPath[3]]; // SN Segment Nodes' CPU
			 
			//	System.out.println("Servers Cores--\t"+ SNPTSFC1_segment[0] + "\t" + "Demand Cores are\t" + SFC1_segment[1]);
		
			//-//-----------------------------------------------------------------------------------------------------------
			
			// ------ In the columns 1- (TO_BE_SelectedPathanditsSFC[2])in SNPTSFC1_segment save the current BWs for each edge in the selected path 					
			
			for (int i_bw=1 ; i_bw < TO_BE_SelectedPath[2] ; i_bw++)
			{
				SNPTSFC1_segment[i_bw] =   BW_Adj[(int) TO_BE_SelectedPath[3+i_bw]]
						                         [(int) TO_BE_SelectedPath[3+i_bw+1]]; // Edges BW
				
			/*	 System.out.println(" BW-------\t" + TO_BE_SelectedPath[3+i_bw] + "-->" 			 
				                                   + TO_BE_SelectedPath[3+i_bw+1] + "\t" 
				                                   + SNPTSFC1_segment[i_bw] + "\t" 
				                                   + "Demand is\t" + SFC1_segment[2]);
			*/	
				 
			}// end of ibw_d for loop
			
			//------------------------------------------------------------------------------------------------------------
			
			// ------ In the last columns in SNPTSFC1_segment save the End to end delay of the selected path--------------
			
			double Delaysum=0;
			
			for (int i_bw=1 ; i_bw < TO_BE_SelectedPath[2] ; i_bw++)		
				Delaysum += Delay_Adj[(int) TO_BE_SelectedPath[3+i_bw]]
						             [(int) TO_BE_SelectedPath[3+i_bw+1]]; // Edges Delay			
			
			SNPTSFC1_segment[17] = Delaysum;
									
		/*		System.out.println("EtE Delay\t" + SNPTSFC1_segment[17] + "\t" +
				                   "Demand is\t" + SFC1_segment[3] + "\t" +
						             (SNPTSFC1_segment[17]-SFC1_segment[3]));
		*/		
			//------------------------------------------------------------------------------------------------------------

			
//			System.out.println("----------------------------------------------");
			 
		//***********************************  SN to SFC comparisons to check capacity    *****************************
				
		/* To validate capacity constraints, here we check if the SN nodes' CPU, Mem and SN edges' BW and Delay 
		* are sufficient to accommodate the SFC demands:
		* 
		* 		- First we compare SN metric to the demanded SFC metric. 
		* 		- Second we make sure that the capacity of the SN nodes and edges does not exceed
		* 		  the maximum capacity for that node or edge.
		*/	
			 	
		if (	
			(SNPTSFC1_segment[0] -  SFC1_segment[1]) >=  0 &&
			(SNPTSFC1_segment[1] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[2] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[3] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[4] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[5] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[6] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[7] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[8] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[9] -  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[10]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[11]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[12]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[13]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[14]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[15]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[16]-  SFC1_segment[2]) >=  0 &&
			(SNPTSFC1_segment[17]<= SFC1_segment[3]))				
		{	
			
			for(int ii=0 ; ii<22 ; ii++)
			SelectedPath[successfulSFC][ii]= TO_BE_SelectedPath[ii]; 
			// This matrix saves the number of the SN path that has enough resources to accommodate the SFC.

			SelectedPath[successfulSFC][22]=  SFC1_segment[1]; // This saves the demanded cores which were allocated
			SelectedPath[successfulSFC][23]=  SFC1_segment[2]; // This saves the demanded BW which was allocated
			SelectedPath[successfulSFC][24]=  SFC1_segment[3]; // This saves the accepted delay by the SFC
			SelectedPath[successfulSFC][25]=  SFC1_segment[4]; // This saves the processing times of the allocated VNFs
		
			// This for loop prints the selected Server's path and the demanded cores and BW before updating the Network.
			/*for (int w=0 ; w<29 ; w++)
				System.out.print(SelectedPath[successfulSFC][w]+"\t");
			System.out.println();
			//
			 * The "SelectedPath" matrix saves all the data of the selected Server's path and the allocated SFC (cores and BW)
			 * (((((******** Same thing for the SelectedPath_m*************)))))
			 * In the "SelectedPath" matrix:
			 * 
			 * - SelectedPath[SFC][0]      -- Has the path # (if its from the list of P9, P10, P11, P13, P15, or P17).
			 * - SelectedPath[SFC][1]      -- Has source to destination nodes.
			 * - SelectedPath[SFC][2]      -- Has number of nodes in this path.
			 * - SelectedPath[SFC][3]      -- Has the selected server number.
			 * - SelectedPath[SFC][4]-[13] -- Has the nodes' numbers if the selected path is of type P9.
			 * - SelectedPath[SFC][4]-[14] -- Has the nodes' numbers if the selected path is of type P10.
			 * - SelectedPath[SFC][4]-[15] -- Has the nodes' numbers if the selected path is of type P11.
			 * - SelectedPath[SFC][4]-[17] -- Has the nodes' numbers if the selected path is of type P13.
			 * - SelectedPath[SFC][4]-[19] -- Has the nodes' numbers if the selected path is of type P15.
			 * - SelectedPath[SFC][4]-[21] -- Has the nodes' numbers if the selected path is of type P17.
			 * - SelectedPath[SFC][22]     -- Has the demanded cores by the allocated SFC
			 * - SelectedPath[SFC][23]     -- Has the demanded BW by the allocated SFC.
			 * - SelectedPath[SFC][24]     -- Has the maximum accepted delay by the SFC.
			 * - SelectedPath[SFC][25]     -- Has the sum of the processing times of the allocated VNFs.
			 * - SelectedPath[SFC][26]-[28]-- Are empty.
			 */
			
		    // update the values of the selected CPU, BW, and Delay matrices as per the SFC corresponding values
									  
			// To print the values of the SN after updating the SN, given a successful embedding

			    //---- Updating the current cores in the selected Server after the allocation. 
			
			Servers_CPU_Cons[(int) SelectedPath[successfulSFC][3]] = SNPTSFC1_segment[0] -  SFC1_segment[1];
			
			/*	System.out.println("Server--"        + SelectedPath[successfulSFC][3]                    + "\t"
		                         + "Core_b\t"        + (int) SNPTSFC1_segment[0]               + "\t" 
		                         + "Core_a\t"        + (int) Servers_CPU_Cons[(int) SelectedPath[successfulSFC][3]] + "\t"
			    		         + "SFC_dem_Cores\t" + (int) SFC1_segment[1]);
		*/
			 //---- Updating the current BW in the selected path after the allocation. 
				
			 for (int i_bw = 0 ; i_bw < SelectedPath[successfulSFC][2]-1 ; i_bw++)
			 {
				 BW_Adj[(int) SelectedPath[successfulSFC][4+i_bw]]
	                   [(int) SelectedPath[successfulSFC][4+i_bw+1]]= (int) (SNPTSFC1_segment[i_bw + 1] - SFC1_segment[2]);
		   
			/*   System.out.println("BW-update\t" +
					                            SelectedPath[successfulSFC][4+i_bw]+ "-->" + 
					                            SelectedPath[successfulSFC][4+i_bw+1]+ "\t"+
		   		       "BW_b\t"  + (int)        SNPTSFC1_segment[i_bw + 1] + "\t" + 
					   "BW_a\t"  + (int) BW_Adj[(int) SelectedPath[successfulSFC][4+i_bw]]
	                                           [(int) SelectedPath[successfulSFC][4+i_bw+1]] + "\t" + 
					   "SFC_dem_BW\t" + (int)   SFC1_segment[2]);
		    
			*/   
			  }// end of for (int i_bw = 0 ; i_bw < SelectedPath[successfulSFC][2]-1 ; i_bw++)	    	
	 		 
	//--------------------------------------------------------------------------------------------------------------------
	//----------------------------- Calculating Total Power Consumption after each Embedding -----------------------------
	//------------------------------------- Eramo's Formula is used here -------------------------------------------------
	//--------------------------------------------------------------------------------------------------------------------
			
			 Beta_e                = 1.0; // The cost per consumed 1 Watt of power.
			 double delta_t        = 1.0; // The duration of a stationary interval h-th(h=0,1,...,N-1), N=24.
			 double P_idle_ser     = P_idle; // This is calculated server's idle power.
	 		 double PW_idle_cores  = P_idle_ser; // This provides the total traffic consumed on this server.
	 		 
			 double T_VNFI      = SelectedPath[successfulSFC][23] * 1000000; // This is the incoming traffic by the allocated SFC in bits.
			 double t_pro       = SelectedPath[successfulSFC][25]; // This is the processing time of all VNFs in the SFC.
			 double L_max       = 1500*8*48; // Converting the packet length into bits
			 
			 double T_VNFI_t_pro       = T_VNFI * t_pro * 100;       // As defined in Eramo's equation(15)
			 double T_VNFI_t_pro_L_max = T_VNFI_t_pro / L_max; // As defined in Eramo's equation(15)
			 
			 //PW_Cons_cores = Servers_Consumed_Core[(int) SelectedPath[successfulSFC][3]] + T_VNFI_t_pro_L_max; // This calculate the consumed power of the server.
			 Servers_Consumed_Core[(int) SelectedPath[successfulSFC][3]] += T_VNFI_t_pro_L_max; // This is to update the server current power consumption after a successful allocation.
			 
			 Tot_PW_idle_and_Cons_Server[(int) SelectedPath[successfulSFC][3]] = Beta_e * delta_t * (PW_idle_cores + Servers_Consumed_Core[(int) SelectedPath[successfulSFC][3]]) ; // As defined in Eramo's equation(15)
			 Servers1Current_PCons  [(int) SelectedPath[successfulSFC][3]] = Tot_PW_idle_and_Cons_Server[(int) SelectedPath[successfulSFC][3]];		
			 Tot_SN_consumed_power += Servers1Current_PCons[(int) SelectedPath[successfulSFC][3]];
		/*
			 System.out.println("Tot_PW_idle_and_Cons_Server\t"+Tot_PW_idle_and_Cons_Server[(int) SelectedPath[successfulSFC][3]]);
			 System.out.println("T_VNFI\t"+T_VNFI);
			 System.out.println("t_pro\t"+t_pro);
			 System.out.println("L_max\t"+L_max);
			 System.out.println("T_VNFI_t_pro\t"+T_VNFI_t_pro);
			 System.out.println("T_VNFI_t_pro_L_max\t"+T_VNFI_t_pro_L_max);
			 System.out.println("Beta_e\t"+Beta_e);
			 System.out.println("delta_t\t"+delta_t);
		*/	 
			 System.out.println("Beta_m[betaloop]\t"+Beta_m[betaloop]);
			 System.out.println("PW_idle_cores\t"+PW_idle_cores);
			 System.out.println("Servers1Current_PCons\t"+Servers1Current_PCons  [(int) SelectedPath[successfulSFC][3]]);
		 
			 
			 
	//********************************************************************************************************************
	//********************************************************************************************************************

			successfulSFC++; // This is a counter for the total number of accepted SFCs.
			
					
			    //System.out.println("-----------------------------------------------------------------------------------");
		    	//System.out.println(successfulSFC + "-Accepted SFCs ---- End of Successful Embedding: SFC1 Nodes and links are updated  after SFC embedding  -");
			    //System.out.println("-----------------------------------------------------------------------------------");				    	
							    	
			    break;	 //exit the sorted path for-loop, and go for the next SFC		   					   
			    } else 
			    		if (i < Servers1CPU_util_sorted_paths.length-1)
			    		{
			    			
			    			continue; // force the next iteration from the for-loop.						  
			    		}else 
			    		{   
				    		if (delay_SFC_by_waiting != 0)
				    		{   
				    			delay_SFC_by_waiting --;
				    			break; // force the next iteration from the for-loop.						  
				    		}else 	    			
							{	
			    			
			    		/*	
			    			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			    						@SuppressWarnings("resource")
			    						Scanner sc1 = new Scanner(System.in);
			    						System.out.println("Inner loop - what is the value of a");
			    				        System.out.println();
			    						int a = sc1.nextInt();
			    			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

			    		*/	
			    			    rej+=SFCstoallocate[SFC][3];   // This is a counter to calculate the BW of the total rejected SFCs. Will be used in calculating SFCs acceptance ratio.
			    			    rejectedSFCs++;
			    				
			    			    
			    			    // to set delay_SFC_by_waiting randomly for next round when allocating other SFC before counting dropped ratio
			    			    delay_SFC_by_waiting = (int) (minwaiting + (Math.random() * ((maxwaiting  - minwaiting))));   			    
			    			  
					    		//System.out.println(rej + "Rejected SFCs  ----  Embedding is Failed, there is no SN path to accomodate the demands of this SFC");
					    	    //System.out.println();
					    		//System.out.println("Inner-loop Go to next SFC");
					    	    //System.out.println();
					    		break;            // This breaks the if statement, and directly go for the immediate next SFC.
							    			
							}
			    		}// End of -if- statement
		
		
		}// End of for-loop on the sorted paths

/*
	if(TO_BE_SelectedPath[SFC][0]==10000)
		break;
*/

	//-----------------------------------------------------------------------------------------------------------------------
	//---------------------------------------------      This is Migration stage     ----------------------------------------
	//-----------------------------------------------------------------------------------------------------------------------

	int    MIGRATEDSFCS   = 0;    //  Number of migrated SFCs in this loop.
	double Cost_Migration;
    
	// (All_Alfas[SFC] == 0.2) && 
	
	if ((Kickmigration == 1))
		{
		Cost_Migration = 0.0;  //  This saves the cost of the migrated flows for this specific "SFCm"			
		
		double[]   tempsorted_CPU_m = new double[29];   // this is temporary store used when ranking the used paths SelectedPath[SFCm][i].

		double[]   Servers1Max_Power_m          = new double[Servers]; // this is a matrix that includes the Maximum power capacity per each SN node
		double[]   Servers1Min_Power_m          = new double[Servers]; // this is a matrix that includes the Minimum power capacity per each SN node
		double[]   Servers1Consmed_Power_m      = new double[Servers]; // this is a matrix that includes the Maximum power capacity per each SN node
		double[]   Servers1Consmed_Power_sum_m  = new double[Servers]; // SORTED matrix to save the sum of the consumed power values for the Path nodes 

		double[]   Servers1Max_CPU_m                = new double[Servers]; // this is a matrix that includes the current CPU per each SN node	
		double[]   Servers1CPU_Utilization_m        = new double[Servers]; // this is a matrix to save the CPU utilization for each SN node in this path.			
		double[]   Servers1cpu_utilization_sum_m    = new double[Servers]; // SORTED matrix to save the sum of the CPU values for the Path nodes 

	//--------------------------------------------------------------------------------------------------------------------	
	//------------------------------------- the migration Process starts from here ----------------------------------------	
	//--------------------------------------------------------------------------------------------------------------------	
			
		for (int SFCm=Rem ; SFCm < successfulSFC-Rem ; SFCm++)
		{
	//--------------------------------------------------------------------------------------------------------------------	
		
		double[][] SelectedPath_m        = new double[successfulSFC-Rem][29]; 
		
		/* This matrix saves the used SN path for successful embedding and the SFC that was embedded,
		*  and it will be the main matrix to be used to rank the paths during the migration process.
		* 
		*  - The next for loop fills in the (SelectedPath_m) with the already used paths during the previous
		*   allocations as listed in (SelectedPath) 
		*/

		for(int i=0 ; i<successfulSFC-Rem ; i++)
		{
			for(int j=0 ; j<29 ; j++)
			{
				SelectedPath_m[i][j] = SelectedPath[i][j];
				 	//System.out.print(SelectedPath_m[i][j]+"\t");
			}
			//System.out.println();
		}

	/**/

		
	//--------------------------------------------------------------------------------------------------------------------	

			//System.out.println("All_Alfas[SFCm]********\t" + All_Alfas[SFCm] + "\tSFCm\t" +SFCm + "successfulSFC\t" + (successfulSFC-Rem));

			//System.out.println("SFCm***********\t" + SFCm + "\t" + "SFC\t" + SFC);
			
			for (int i = 0 ; i < Servers ; i++)
			{
				Servers1cpu_utilization_sum_m[i] = 0; // to reset the CPU utilization for each path after sorting the paths
				Servers1Consmed_Power_sum_m  [i] = 0; // to reset the CPU utilization for each path after sorting the paths
				
			// Here we initialize the Power COnsumption and CPU matrices for all paths in this type.
						
					Servers1Max_Power_m[i]     = Servers1Max_Power[i]; // This saves the Max power per each Server.
					Servers1Min_Power_m[i]     = Servers1Min_Power[i]; // This saves the Min power per each Server.
					Servers1Max_CPU_m  [i]	   = Servers1Max_CPU  [i]; // fill the Maximum CPU for the SN node j in path i to calculate CPU utilization 
				//------
					Servers1CPU_Utilization_m[i] =((Servers1Max_CPU_m  [i] - Servers_CPU_Cons[i]) / Servers1Max_CPU_m  [i] ); // This to calculate the CPU utilization per each SN node in the path
					Servers1Consmed_Power_m  [i] =  Servers1Min_Power_m[i]  
							                     +((Servers1Max_Power_m[i] 
							                     -  Servers1Min_Power_m[i])  
							                     *  Servers1CPU_Utilization_m[i]); // This calculates the current power consumption per each SN node	
				//------				
			/*  System.out.print("mServer #\t"    + i + "-->\t"
						        + "mCons_Power " + " = " + (int)Servers1Consmed_Power_m  [i]+"\t" 
						        + "mCur_CPU-"    + " = " + (int)Servers_CPU_Cons         [i]+"\t"
						        + "mMax_CPU-"    + " = " + (int)Servers1Max_CPU_m        [i]+"\t"
						        + "mCPU_Util-"   + " = " + Servers1CPU_Utilization_m[i]);			
				System.out.println();
			 */											
				
				}

		//00 sorting the paths total CPU utilization and finding the index that represents the paths of the sorted power matrix  000

			/*
			 * In the sorting,
			 * - Rank the used paths as listed in the (SelectedPath) according to the Servers's utilization
			 *   Low-to-High.
			 * - So the sorted list of (SelectedPath) will be the same used paths, but ranked from the least 
			 *   utilized paths to the most utilized.
			 * - Therefore, for migrations, migrate all the demands on the least utilized path from the sorted 
			 *   (SelectedPath)to other paths from the same list (SelectedPath) giving that same(Source-Destination)
			 *   are maintained.
			 */
			
		for (int i1 = 0; i1 < SelectedPath_m.length - 1; i1++ )  
		{
			if(SelectedPath_m[i1][3]==10000)
			{ 
				break;
			}else
		for ( int j1 = i1 + 1; j1 < SelectedPath_m.length; j1++ )
		{
			if(SelectedPath_m[j1][3]==10000)
			{ 
				break;
			}else
				if ((Servers1CPU_Utilization_m[(int) SelectedPath_m[i1][3]] > 
		             Servers1CPU_Utilization_m[(int) SelectedPath_m[j1][3]])  
		     ) //sorting into low-to-high order
		     {
			   for(int i=0 ; i<29 ; i++)
			     tempsorted_CPU_m[i]    = SelectedPath_m[i1][i];	// swapping the index  

		  	   for(int i=0 ; i<29 ; i++)
		  		 SelectedPath_m[i1][i] = SelectedPath_m[j1][i]; 
		
		  	   for(int i=0 ; i<29 ; i++)
			  		 SelectedPath_m[j1][i] = tempsorted_CPU_m[i];
								   
		     } // end of -if- for sorting  
		
		} // end of j1 for-loop 
		} // end of i1 for-loop
					
		//System.out.println();		
		//System.out.println("Not Sorted Path " + "   CPUSum " + " ----- " + " Sorted Path " + " CPUSum ");
		//System.out.println();
					
		//Here we print the values of the total cpu in the path, once before sorting, and then after sorting.
		//
	 /*	 for (int i=0; i < SelectedPath_m.length ; i++) 
	 	 {
			 for (int j=0; j < 29 ; j++)
		   System.out.print(SelectedPath_m[i][j]+"\t"); // to print power consumption values not sorted and after being sorted
		  
		System.out.println();
	 	 }
	*/	 
	//00000000000000000000000000000000000000000000000 End of finding the index  000000000000000000000000000000000000000000000000000          

	//************************************************ Start Comparisons Phase **************************************************  
	//**************************************** First create the paths segments for SN and SFCs **************************************
	//*****************************************              SFC Segment                 ***************************************
					
			/* Here we define the SFC segment for the path that it was allocated to it, that includes
			* - First formulate the segment according to the type of the SFC
			* - SFC demanded cores.
			* - SFC demanded BW.
			* - SFC demanded delay.
			*/
				 
			double[] SFC1_segment_m = new double[5];
			
				    SFC1_segment_m[0] = SelectedPath_m[SFCm][1]; // SFC source and destination nodes
				    SFC1_segment_m[1] = SelectedPath_m[SFCm][22]; // SFC cores
				    SFC1_segment_m[2] = SelectedPath_m[SFCm][23]; // SFC BW
				    SFC1_segment_m[3] = SelectedPath_m[SFCm][24]; // SFC Delay
				    SFC1_segment_m[4] = SelectedPath_m[SFCm][25]; // VNF processing time
		 
		 
	//************************************* End of candidate migrating SFC Segment initialization **********************************
			
	//************************************************* Selected Server's Segment  ********************************************

					/*
					 * The "SelectedPath" matrix saves all the data of the selected Server's path and the allocated SFC (cores and BW)
					 * (((((******** Same thing for the SelectedPath_m*************)))))
					 * In the "SelectedPath" matrix:
					 * 
					 * - SelectedPath_m[SFC][0]      -- Has the path # (if its from the list of P9, P10, P11, P13, P15, or P17).
					 * - SelectedPath_m[SFC][1]      -- Has source to destination nodes.
					 * - SelectedPath_m[SFC][2]      -- Has number of nodes in this path.
					 * - SelectedPath_m[SFC][3]      -- Has the selected server number.
					 * - SelectedPath_m[SFC][4]-[13] -- Has the nodes' numbers if the selected path is of type P9.
					 * - SelectedPath_m[SFC][4]-[14] -- Has the nodes' numbers if the selected path is of type P10.
					 * - SelectedPath_m[SFC][4]-[15] -- Has the nodes' numbers if the selected path is of type P11.
					 * - SelectedPath_m[SFC][4]-[17] -- Has the nodes' numbers if the selected path is of type P13.
					 * - SelectedPath_m[SFC][4]-[19] -- Has the nodes' numbers if the selected path is of type P15.
					 * - SelectedPath_m[SFC][4]-[21] -- Has the nodes' numbers if the selected path is of type P17.
					 * - SelectedPath_m[SFC][22]     -- Has the demanded cores by the allocated SFC
					 * - SelectedPath_m[SFC][23]     -- Has the demanded BW by the allocated SFC.
					 * - SelectedPath_m[SFC][24]     -- Has the maximum accepted delay by the SFC.
					 * - SelectedPath_m[SFC][25]     -- Has the sum of the processing times of the allocated VNFs.
					 * - SelectedPath_m[SFC][26]-[28]-- Are empty.
					 */

				    /* Here we define the selected Server's path segment, that includes
				    * - Current cores.
				    * - Current BW per each edge in the selected path.
				    * - Current delay per each edge in the selected path.
				    */


				    /* *****************************************************************************************
				     * - This "for loop " triggers the tests for the resources availability in the sorted paths, 
				     * - It started by the one on the top, 
				     * - Then checks if the s-to-d of that path is the requested s-d by the SFC
				     * - Then formulates the Servers' segments. 
				     *******************************************************************************************
				     */
				    
		double[] SNPTSFC1_segment_o = new double[18];
		double[] SNPTSFC1_segment_m = new double[18];

		for (int i=0 ; i<SNPTSFC1_segment_o.length ; i++)
		{
			SNPTSFC1_segment_o[i] = 40000000;
			SNPTSFC1_segment_m[i] = 40000000;
		}	
		
		for (int i=0; i<SelectedPath_m.length; i++)
		{
			/************************************* Restoring the OLD SN values Segment  *******************************
			* This is important in order to load the new demands on a new candidate path, the old demands which
			* were embedded on the old path has to be restored and transfer (migrate) the new demands to the new path.
			*/		
			
			/* First we reconstruct the old segment that was used to embed the demanded SFC using it is old Server's path.
			 * Second, we construct the new segment using the the new candidate path to migrate the SFC to it.
			 * 
			 * In the following "if statement" it tests the following:
			 * -1- Ensure that the source-&-destination nodes of the selected sorted path are the same as 
			 *     used ones for allocating the candidate SFC to be migrated.
			 * -2- Ensure that the server in the new path is different than the old server (currently hosting 
			 *     the candidate SFC)
			 * -3- Ensure that the utilization of the old Server is larger than the utilization in the new 
			 *     Server
			 * 		
			*/
	//(SelectedPath[SFCm][1] == SelectedPath_m[i][1]) &&
			
		/*
		 * (SelectedPath[SFCm][3] != SelectedPath_m[i][3]) &&
			 (Servers1CPU_Utilization_m[(int) SelectedPath  [SFCm][3]]<
			  Servers1CPU_Utilization_m[(int) SelectedPath_m[SFCm][3]]) &&
			  (Servers_CPU_Cons[(int) SelectedPath_m[SFCm][3]] > SFC1_segment_m[1])
		 * 	
		 */
			
		
		if((SelectedPath_m[SFCm][0]!=10000)&&(SelectedPath[SFCm][0]!=10000))
		{
			if (SelectedPath[SFCm][3] != SelectedPath_m[i][3] &&
					 (Servers1CPU_Utilization_m[(int) SelectedPath  [SFCm][3]]<
							  Servers1CPU_Utilization_m[(int) SelectedPath_m[SFCm][3]]))
			{	
			 /*
				System.out.println();	
				System.out.println("--------------------------------------------------------------------------------------");					
				System.out.println("------------------------------------------------------------ Old path to migrate from:");					

			  */
			// --------------------- the following lines formulate the segment for the old selected path -----------------------------
			
			 /*- To formulate the old Server segment (This is needed in the updating stages if the migration to a new path is approved.):
			  * - Use the items from the old selected Server's path as in "SelectedPath[SFCm]"
			  * - Reconstruct the "SNPTSFC1_segment_o" using the cores, BW, Delay					
			 */				
					SNPTSFC1_segment_o[0] = Servers_CPU_Cons[(int) SelectedPath[SFCm][3]]; // SN Segment Nodes' CPU
					 
				/*	 	System.out.print("mServers--\t"+ SNPTSFC1_segment_o[0] + 
							 "\t" + "mDemand is\t" + SFC1_segment_m[1]+"\t");
				*/	
					 //------------------------------------------------------------------------------------------------------------
					
					/* -In the columns 1- (SelectedPath[SFCm][2])in SNPTSFC1_segment_m 
					 * save the current BWs for each edge in the selected path 					
					 */
					
					for (int i_bw=1 ; i_bw < SelectedPath[SFCm][2] ; i_bw++)
					{
						SNPTSFC1_segment_o[i_bw] =   BW_Adj[(int) SelectedPath[SFCm][3+i_bw]]
								                           [(int) SelectedPath[SFCm][3+i_bw+1]]; // Edges BW
						
					 /*     System.out.print(" mBW-------\t" + SelectedPath[SFCm][3+i_bw]   + "-->" 			 
						                                   + SelectedPath[SFCm][3+i_bw+1] + "\t" 
						                                   + SNPTSFC1_segment_o[i_bw]     + "\t" 
						                                   + "mDemand is\t" + SFC1_segment_m[2]+"\t");
					*/	
						 
					}// end of ibw_d for loop
					
					//------------------------------------------------------------------------------------------------------------
					
					// ------ In the last columns in SNPTSFC1_segment save the End to end delay of the selected path--------------
					
					int Delaysum_o=0;
					
					for (int i_bw=1 ; i_bw < SelectedPath[SFCm][2] ; i_bw++)		
						Delaysum_o += Delay_Adj[(int) SelectedPath[SFCm][3+i_bw]]
								               [(int) SelectedPath[SFCm][3+i_bw+1]]; // Edges Delay			
					
					SNPTSFC1_segment_o[17] = Delaysum_o;
												
				/*	System.out.print("mEtE Delay\t" + SNPTSFC1_segment_o[17] + "\t" + "mDemand is\t" + SFC1_segment_m[4]);
					
					System.out.println();	
					System.out.println("--------------------------------------------------------------------------------------");					
					System.out.println("----------------------------------------------------- New Candidate path to migrate to:");					
	            
			*/

	//----------------------------------------------------------------------------------------------------------
	// --------------------- the following lines formulate the segment for the NEW selected path ---------------
	//----------------------------------------------------------------------------------------------------------

	/*- In the first column in SNPTSFC1_segment_m save the 
	* current cores in the targeted Server 					
	*/				
				SNPTSFC1_segment_m[0] = Servers_CPU_Cons[(int) SelectedPath_m[SFCm][3]]; 
				// Save the Server's cores of the new candidate path to migrate to it.
								 
		/*		System.out.print("mServers--\t"+ SNPTSFC1_segment_m[0] + "\t" + "mDemand is\t" + SFC1_segment_m[1]+"\t");
		*/
				//-//-----------------------------------------------------------------------------------------------------------
					
			/* -In the columns 1- (SelectedPath[SFCm][2])in SNPTSFC1_segment_m 
			* save the current BWs for each edge in the selected path 					
			*/
								
			for (int i_bw=1 ; i_bw < SelectedPath_m[SFCm][2] ; i_bw++)
				{
					SNPTSFC1_segment_m[i_bw] =   BW_Adj[(int) SelectedPath_m[SFCm][3+i_bw]]
											           [(int) SelectedPath_m[SFCm][3+i_bw+1]]; // Edges BW
									
			/*		System.out.print(" mBW-------\t" + SelectedPath_m[SFCm][3+i_bw]   + "-->" 			 
									                  + SelectedPath_m[SFCm][3+i_bw+1] + "\t" 
									                  + SNPTSFC1_segment_m[i_bw]     + "\t" 
									                  + "mDemand is\t" + SFC1_segment_m[2]+"\t");
			*/	
									 
				}// end of ibw_d for loop
								
		//------------------------------------------------------------------------------------------------------------
								
		// ------ In the last columns in SNPTSFC1_segment save the End to end delay of the selected path--------------
								
		int Delaysum_m=0;
								
		for (int i_bw=1 ; i_bw < SelectedPath_m[SFCm][2] ; i_bw++)		
			Delaysum_m += Delay_Adj[ (int) SelectedPath_m[SFCm][3+i_bw]]
								   [ (int) SelectedPath_m[SFCm][3+i_bw+1]]; // Edges Delay			
								
			SNPTSFC1_segment_m[17] = Delaysum_m;
														
		/*	System.out.print("mEtE Delay\t" + SNPTSFC1_segment_m[17] + "\t" + "mDemand is\t" + SFC1_segment_m[4]);

			System.out.println();	
			System.out.println("--------------------------------------------------------------------------------------");					
			System.out.println("------------------------------------- Next: Check if the the path has enough resources");					

		*/	
			//----------------------------------------------------------------------------------------------------------

			/* To validate capacity constraints, here we check if the SN nodes' CPU, Mem and SN edges' BW and Delay 
			* are sufficient to accommodate the SFC demands:
			* 
			* 		- First we compare SN metric to the demanded SFC metric. 
			* 		- Second we make sure that the capacity of the SN nodes and edges does not exceed
			* 		  the maximum capacity for that node or edge.
			*/	
				 	
			if (	
				(SNPTSFC1_segment_m[0] -  SFC1_segment_m[1]) >=  0 &&
				(SNPTSFC1_segment_m[1] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[2] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[3] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[4] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[5] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[6] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[7] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[8] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[9] -  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[10]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[11]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[12]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[13]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[14]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[15]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[16]-  SFC1_segment_m[2]) >=  0 &&
				(SNPTSFC1_segment_m[17]<= SFC1_segment_m[3]))				
			{	
				
	//*********************** Removing the old allocated SFC's Cores from the old selected path *****************************
				
				Servers_CPU_Cons[(int) SelectedPath[SFCm][3]] = SNPTSFC1_segment_o[0] +  SFC1_segment_m[1];

				 //---- Removing the old allocated SFC's BW from the old selected path

				for (int i_bw = 0 ; i_bw < SelectedPath[SFCm][2]-1 ; i_bw++)
				 {
					 BW_Adj[(int) SelectedPath[SFCm][4+i_bw]]
		                   [(int) SelectedPath[SFCm][4+i_bw+1]]= (int) (SNPTSFC1_segment_o[i_bw + 1] + SFC1_segment_m[2]);
					  
				  }// end of for (int i_bw = 0 ; i_bw < SelectedPath[SFCm][2]-1 ; i_bw++)	
			
	//********************************************************************************************************************


	//****************** Save all items of the newly selected path in the global (SelectedPath) ************************
				
				for(int ii=0 ; ii<22 ; ii++)
				SelectedPath[SFCm][ii]= SelectedPath_m[SFCm][ii]; 
				// This matrix saves the elements of the Server's path that has enough resources to accommodate the SFC.
				
				SelectedPath[SFCm][22]= (int) SFC1_segment_m[1]; // This saves the demanded cores which were allocated
				SelectedPath[SFCm][23]= (int) SFC1_segment_m[2]; // This saves the demanded BW which was allocated
				SelectedPath[SFCm][24]= (int) SFC1_segment_m[3]; // This saves the accepted delay by the SFC
				SelectedPath[SFCm][25]= (int) SFC1_segment_m[4]; // This saves the processing times of the allocated VNFs
			
				// This for loop prints the selected Server's path and the demanded cores and BW before updating the Network.
		/*	
				System.out.println("----------------------------------------------------------------------------------");

				for (int w=0 ; w<29 ; w++)
					System.out.print(SelectedPath[SFCm][w]+"\t");
				
				System.out.println();
				System.out.println("----------------------------------------------------------------------------------");
		*/	
				
				/* * The "SelectedPath" matrix saves all the data of the selected Server's path and the allocated SFC (cores and BW)
				 * (((((******** Same thing for the SelectedPath_m*************)))))
				 * In the "SelectedPath" matrix:
				 * 
				 * - SelectedPath[SFCm][0]      -- Has the path # (if its from the list of P9, P10, P11, P13, P15, or P17).
				 * - SelectedPath[SFCm][1]      -- Has source to destination nodes.
				 * - SelectedPath[SFCm][2]      -- Has number of nodes in this path.
				 * - SelectedPath[SFCm][3]      -- Has the selected server number.
				 * - SelectedPath[SFCm][4]-[13] -- Has the nodes' numbers if the selected path is of type P9.
				 * - SelectedPath[SFCm][4]-[14] -- Has the nodes' numbers if the selected path is of type P10.
				 * - SelectedPath[SFCm][4]-[15] -- Has the nodes' numbers if the selected path is of type P11.
				 * - SelectedPath[SFCm][4]-[17] -- Has the nodes' numbers if the selected path is of type P13.
				 * - SelectedPath[SFCm][4]-[19] -- Has the nodes' numbers if the selected path is of type P15.
				 * - SelectedPath[SFCm][4]-[21] -- Has the nodes' numbers if the selected path is of type P17.
				 * - SelectedPath[SFCm][22]     -- Has the demanded cores by the allocated SFC
				 * - SelectedPath[SFCm][23]     -- Has the demanded BW by the allocated SFC.
				 * - SelectedPath[SFCm][24]     -- Has the maximum accepted delay by the SFC.
				 * - SelectedPath[SFCm][25]     -- Has the sum of the processing times of the allocated VNFs.
				 * - SelectedPath[SFCm][26]-[28]-- Are empty.
				 */			

	//*********************************************************************************************************************

	//********	Update the values of the selected CPU, BW, and Delay matrices as per the SFC corresponding values *********
										  
				// To print the values of the SN after updating the SN, given a successful embedding

				//---- Updating the current cores in the newly selected Server after the allocation. 
				
				Servers_CPU_Cons[(int) SelectedPath[SFCm][3]] = SNPTSFC1_segment_m[0] -  SFC1_segment_m[1];
					
			/*		System.out.println("mServer--"        + SelectedPath[SFCm][3]                    + "\t"
			                         + "mCore_b\t"        + (int) SNPTSFC1_segment_o[0]              + "\t" 
			                         + "mCore_a\t"        + (int) Servers_CPU_Cons[(int) SelectedPath[SFCm][3]] + "\t"
				    		         + "mSFC_dem_Cores\t" + (int) SFC1_segment_m[1]);
			*/
				 //---- Updating the current BW in the selected path after the allocation. 
				 for (int i_bw = 0 ; i_bw < SelectedPath[SFCm][2]-1 ; i_bw++)
				 {
					 BW_Adj[(int) SelectedPath[SFCm][4+i_bw]]
			               [(int) SelectedPath[SFCm][4+i_bw+1]]= (int) (SNPTSFC1_segment_m[i_bw + 1] - SFC1_segment_m[2]);
					 
			/* 	 System.out.println("mBW-update\t" +
						                            SelectedPath[SFCm][4+i_bw]   + "-->" + 
						                            SelectedPath[SFCm][4+i_bw+1] + "\t"+
			   		       "mBW_b\t"  + (int)       SNPTSFC1_segment_o[i_bw + 1] + "\t" + 
						   "mBW_a\t"  + (int) BW_Adj[(int) SelectedPath[SFCm][4+i_bw]]
		                                            [(int) SelectedPath[SFCm][4+i_bw+1]] + "\t" + 
						   "mSFC_dem_BW\t" + (int)   SFC1_segment[2]);
			    
			 	*/   
				  }// end of for (int i_bw = 0 ; i_bw < SelectedPath[SFCm][2]-1 ; i_bw++)	    	
			
			}// End of the comparison "if statement" 
			
	//*********************************************************************************************************************
			

	//--------------------------------------------------------------------------------------------------------------------		
	//------------------------------ Calculating Total Power Consumption after each Embedding -----------------------------
	//-------------------------------------- Eramo's Formula is used here -------------------------------------------------
	//--------------------------------------------------------------------------------------------------------------------		
			
				 double mig_cost       = mig_Beta;		 
				 double T_down         = mig_time; // Down time during migration
				
				 double T_VNFI = SelectedPath[SFCm][23] * 1000000; // This is the incoming traffic by the allocated SFC in bits.
				 
				 
				 Cost_Migration += mig_cost * T_down * T_VNFI; 
				 // This is to calculate the migration cost for the Server's path of this specific "SFCm"
				 
				 System.out.println("SelectedPath[SFCm][23]"+SelectedPath[SFCm][23]+"\t"+"Cost_Migration"+Cost_Migration+"\t"+"mig_cost\t"+mig_cost+"\t"+"T_down\t"+T_down+"\t"+"T_VNFI\t"+T_VNFI);
				
				 
	//********************************************************************************************************************
	//********************************************************************************************************************			
				
				 MIGRATEDSFCS++; // This is a counter for the total number of accepted SFCs.
						
				    //System.out.println("-----------------------------------------------------------------------------------");
			    	//System.out.println("-Migration Phase---End of Successful Embedding: SFC1 Nodes and links are updated  after SFC embedding  -");
				   // System.out.println("-----------------------------------------------------------------------------------");				    	
								    	
				    break;	// exit the sorted path for-loop, and go for the next SFC		   					   
				    } else 
				    		if (i < SelectedPath_m.length-1)
				    		{
					    		continue; // force the next iteration from the for-loop. 							  
				    		}else 	    			
								{
						    			//System.out.println("Migration Phase---Embedding is Failed, there is no SN path to accomodate the demands of this SFC");
						    	       // System.out.println();
						    			//System.out.println("Go to next SFC");
						    	        //System.out.println();
						    	        
						    			break;            // This breaks the if statement, and directly go for the immediate next SFC.
								    			
								}// End of -if- statement
		}else
			break;

		} // End of for (int i=0; i<Servers1CPU_util_sorted_paths_m.length; i++)

		} // End of for (int SFCm=0 ; SFCm < successfulSFC ; SFCm++) ****** Migration for loop of all successfully accepted SFCs
		
		
		Tot_CMig[SFC]  = Cost_Migration; // This is to save the total costs for all migrations

		}//  End of if (All_Alfas[SFC] == 0.2)  ******* this is IF statement that triggers the migration process.	



	//-----------------------------------------------------------------------------------------------------------------------
	//------------------------------------------  End Of migration phase   ----------------------------------------
	//-----------------------------------------------------------------------------------------------------------------------

	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   End of All Allocations and migrations  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   End of All Allocations and migrations  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   End of All Allocations and migrations  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

	//----------------------------------------------- Online Version --------------------------------------------------
	//-------------------------------------     Compensation for Expired SFCs     -------------------------------------
	//-----------------------------------------------------------------------------------------------------------------
	int lifetime    = 10;
	int expmin      = 1;
	int expmax      = 1;
	int arrivingmin = 15;
	int arrivingmax = 15;

	int L=500;//  Depends on the average lifetime for the demands. 

	if ((SFC >= L) && (Kickonline == 1))
	{// 5//  
		
		int expiring =  (int) (expmin + (Math.random() * ((expmax  - expmin))));
		
		if((successfulSFC - Rem) > 100)
		{
	
		if (((SFC % expiring ) == 0) )
		{//4
			/* VERY IMPORTANT---------------VERY IMPORTANT
			 * 1-To avoid drops in the ONLINE, make sure that, you put the value of 
			 * "lifetime relatively small (10-20)".
			 * 2- Also make sure that the same value used in this if statment (if ((SFC % lifetime ) == 0)
			 *    and the next for loop statment for (int i=0 ; i< lifetime ; i++))
			 * 3- Also make sure that the value of "L" is related to "MaxSFCs". 
			 * Example, if "MaxSFCs = 499", then put "L=400" 
			 */
			int arriving = (int) (arrivingmin + (Math.random() * ((arrivingmax  - arrivingmin))));		
			
			for (int i=0 ; i< arriving ; i++)
			{ 
				//if ( (Rem < successfulSFC-1))
				//{////
				System.out.println("SFC#\t" + SFC +"\t"+ "Rem" + Rem + " SelectedPath[Rem][0]\t"+SelectedPath[Rem][0]);
				
				System.out.println("Removing SFC number\t"+ Rem + "****************************************************");

			/*	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
							//@SuppressWarnings("resource")
							Scanner sc1 = new Scanner(System.in);
							System.out.println("what is the value of a");
					        System.out.println();
							int a = sc1.nextInt();
				//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				*/
				
				/*//
				 * The "SelectedPath" matrix saves all the data of the selected Server's path and the allocated SFC (cores and BW)
				 * (((((******** Same thing for the SelectedPath_m*************)))))
				 * In the "SelectedPath" matrix:
				 * 
				 * - SelectedPath[SFC][0]      -- Has the path # (if its from the list of P9, P10, P11, P13, P15, or P17).
				 * - SelectedPath[SFC][1]      -- Has source to destination nodes.
				 * - SelectedPath[SFC][2]      -- Has number of nodes in this path.
				 * - SelectedPath[SFC][3]      -- Has the selected server number.
				 * - SelectedPath[SFC][4]-[13] -- Has the nodes' numbers if the selected path is of type P9.
				 * - SelectedPath[SFC][4]-[14] -- Has the nodes' numbers if the selected path is of type P10.
				 * - SelectedPath[SFC][4]-[15] -- Has the nodes' numbers if the selected path is of type P11.
				 * - SelectedPath[SFC][4]-[17] -- Has the nodes' numbers if the selected path is of type P13.
				 * - SelectedPath[SFC][4]-[19] -- Has the nodes' numbers if the selected path is of type P15.
				 * - SelectedPath[SFC][4]-[21] -- Has the nodes' numbers if the selected path is of type P17.
				 * - SelectedPath[SFC][22]     -- Has the demanded cores by the allocated SFC
				 * - SelectedPath[SFC][23]     -- Has the demanded BW by the allocated SFC.
				 * - SelectedPath[SFC][24]     -- Has the maximum accepted delay by the SFC.
				 * - SelectedPath[SFC][25]     -- Has the sum of the processing times of the allocated VNFs.
				 * - SelectedPath[SFC][26]-[28]-- Are empty.
				 */
				
			    // update the values of the selected CPU, BW, and Delay matrices as per the SFC corresponding values
										  
				// To print the values of the SN after updating the SN, given a successful embedding

				//---- Updating the current cores in the selected Server after the allocation. 
					
				double cors_b = Servers_CPU_Cons[(int) SelectedPath[Rem][3]];
				
				////
				for(int f=0;f<29;f++)
					System.out.print(SelectedPath[Rem][f]+"\t");
				System.out.println();
				Servers_CPU_Cons[(int) SelectedPath[Rem][3]] += SelectedPath[Rem][22];
					
					System.out.println("Server--"        + SelectedPath[Rem][3]                    + "\t"
			                         + "Core_b\t"        + (int) cors_b                            + "\t" 
			                         + "Core_a\t"        + (int) Servers_CPU_Cons[(int) SelectedPath[Rem][3]] + "\t"
				    		         + "SFC_dem_Cores\t" + (int) SelectedPath[Rem][22]);
			/**/
				 //---- Updating the current BW in the selected path after the allocation. 
					
				for (int i_bw = 0 ; i_bw < SelectedPath[Rem][2]-1 ; i_bw++)
				 {
					double BW_b = BW_Adj[(int) SelectedPath[Rem][4+i_bw]][(int) SelectedPath[Rem][4+i_bw+1]];
					
					 BW_Adj[(int) SelectedPath[Rem][4+i_bw]]
		                   [(int) SelectedPath[Rem][4+i_bw+1]] += (int) SelectedPath[Rem][23];
			   
				   System.out.println("BW-update\t" +
						                            SelectedPath[Rem][4+i_bw]  + "-->" + 
						                            SelectedPath[Rem][4+i_bw+1]+ "\t"+
			   		       "BW_b\t"  + (int)        BW_b                       + "\t" + 
						   "BW_a\t"  + (int) BW_Adj[(int) SelectedPath[Rem][4+i_bw]]
		                                           [(int) SelectedPath[Rem][4+i_bw+1]] + "\t" + 
						   "SFC_dem_BW\t" + (int)   SelectedPath[Rem][23]);
			    
				/**/   
				  }// end of for (int i_bw = 0 ; i_bw < SelectedPath[SFC][2]-1 ; i_bw++)			
				
	//--------------------------------------------------------------------------------------------------------------------
	//--------------------------- Calculating Total Power Consumption after each SFC removal -----------------------------
	//------------------------------------- Eramo's Formula is used here -------------------------------------------------
	//--------------------------------------------------------------------------------------------------------------------

				 Beta_e                = 1.0; // The cost per consumed 1 Watt of power.
				 double delta_t        = 1.0; // The duration of a stationary interval h-th(h=0,1,...,N-1), N=24.
				 double P_idle_ser     = P_idle; // This is calculated server's idle power.
		 		 double PW_idle_cores  = P_idle_ser; // This provides the total traffic consumed on this server.
		 		 
				 double T_VNFI      = SelectedPath[Rem][23] * 1000; // This is the incoming traffic by the allocated SFC in bits.
				 double t_pro       = SelectedPath[Rem][25]; // This is the processing time of all VNFs in the SFC.
				 double L_max       = 1500*8*48; // Converting the packet length into bits
				 
				 double T_VNFI_t_pro       = T_VNFI * t_pro;       // As defined in Eramo's equation(15)
				 double T_VNFI_t_pro_L_max = T_VNFI_t_pro / L_max; // As defined in Eramo's equation(15)
				 
				 //PW_Cons_cores = Servers_Consumed_Core[(int) SelectedPath[SFC][3]] + T_VNFI_t_pro_L_max; // This calculate the consumed power of the server.
				 Servers_Consumed_Core[(int) SelectedPath[Rem][3]] -= T_VNFI_t_pro_L_max; // This is to update the server current power consumption after a successful allocation.
				 
				 Tot_PW_idle_and_Cons_Server[(int) SelectedPath[Rem][3]] = Beta_e * delta_t * (PW_idle_cores + Servers_Consumed_Core[(int) SelectedPath[Rem][3]]) ; // As defined in Eramo's equation(15)
				 Servers1Current_PCons  [(int) SelectedPath[Rem][3]] = Tot_PW_idle_and_Cons_Server[(int) SelectedPath[Rem][3]];		
				 //Tot_SN_consumed_power += Servers1Current_PCons[(int) SelectedPath[SFC][3]];
					
				
			 
		//-----------------------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------------------
					 
				Rem++; 
				/* This is a counter to point to the SFC that will be removed. 
				* It increases inside one step during the i-4-for loop.
				*/

				//}
				}// End of for (int i=0 ; i<4 ; i++) that compensates for 4 SFCs each 500 time unites
		
			//-------------- Calculating Total Power Consumption after each Embedding -----------------------------
			//----------------------- Eramo's Formula is used here -------------------------------------------------
			
		} //End of if ( (SFC % 5) == 0 ) 
		}
			
	}// End of if ( SFC >= 20 )
	

	//--------------------------------------------------------------------------------------------------------------------
	//-----------------------------------------------  End of Online part  -----------------------------------------------
	//--------------------------------------------------------------------------------------------------------------------
	
	endTime = System.currentTimeMillis();
	totalTime[SFC] = endTime - startTime;
	
	for (int i=0 ; i < Servers ; i++)
	{


	Servers_CPU_Cur_Util[i] = ((( Servers_MAX_CPU_Cap[i] - Servers_CPU_Cons[i])/ Servers_MAX_CPU_Cap[i]));

	Servers_MAX_Power_Cap      [i] = PC_max_node;  // fill the SN node's power.
	Servers_idle_PCons         [i] = P_idle; // Idle power consumption each SN node.
	Servers_MIN_Power_Cap      [i] = Servers_idle_PCons   [i];
	Servers_Current_PCons_node [i] = Servers_idle_PCons   [i] 
			                      +((Servers_MAX_Power_Cap[i]
			                      -  Servers_idle_PCons   [i])
			                      *  Servers_CPU_Cur_Util [i]); // Current Power consumption per each SN node. 

	MaxPWCap	   += Servers_MAX_Power_Cap[i];
	/*
	System.out.println( 	
					   " MAX_PCons = " + i + "\t" + (int)Servers_MAX_Power_Cap       [i] +"\t" +
					   " MIN_PCons = " + i + "\t" + (int)Servers_idle_PCons          [i] +"\t" +
					   " Cur_PCons = " + i + "\t" + (int)Servers_Current_PCons_node  [i] +"\t" +
					   " CPUCap    = " + i + "\t" + (int)Servers_CPU_Cons            [i] +"\t" +
					   " CPU_Utili = " + i + "\t" + (int)Servers_CPU_Cur_Util        [i]);	
	 */
	}// End of for (int i=0 ; i < Servers ; i++
	//********************************************************************************************************************
	//--------------------------------  This is to find the servers that will be turned off.  ----------------------------
	//********************************************************************************************************************
			
	for (int SNNODES = 0 ; SNNODES < Servers ; SNNODES++ )
		 if (Servers_CPU_Cons[SNNODES] <= 0 )
			  	  	Turned_off_nodes++;		 
					
		NumberofTurndoffSNNodes = Turned_off_nodes; 
		
		SNOffNodes[SFC] = NumberofTurndoffSNNodes;
	/*	System.out.println("Number of Turnd off SN Nodes\t"+NumberofTurndoffSNNodes);
		
		*  save the number of turned off SN nodes to be used in updated their power 								  		 
		*  consumption when calculating the power saving ratio at the end of the code.
		*/

		PC_forSN_TurnedOff_Nodes = Turned_off_nodes *  P_idle; // Total sum of the power consumption in all SN nodes that are turned off.

	//********************************************************************************************************************
	//-------------------  This is to find the Total Current power consumption of all active servers  --------------------
	//********************************************************************************************************************
		Tot_SN_consumed_power    = 0;    // Total consumed power by all SN nodes after each SFC embedding

		for (int ii=0 ; ii < Servers ; ii++)
			{
			    //Tot_SN_consumed_power +=Servers_Current_PCons_node[ii];	
			
			Tot_SN_consumed_power += Servers1Current_PCons[ii];
				
			//System.out.println("SN Current Total Power Consumption\t(" + ii +")  =\t"  + Tot_SN_consumed_power + 
			    //                   " Servers_Current_PCons =\t" + Servers_Current_PCons[ii] );
		  
		    }
	/**/
		
		TotEC[SFC] = Tot_SN_consumed_power;
		
	//********************************************************************************************************************
	//-------------------  This is to find the Total Power consumption of all active servers  --------------------
	//********************************************************************************************************************
		
		SN_Total_PW_Consumption_withTurnOFF[SFC] = Tot_SN_consumed_power + Tot_CMig[SFC];	// this save the SN total PC in all SN in this iteration when idle SN were turned off.
		MaxPWCapacity[SFC]         = MaxPWCap;
		PowerSaving  [SFC]         = PC_forSN_TurnedOff_Nodes;
		
		//Number_of_Migrations[SFC] += MIGRATEDSFCS;

		TotServersConsumedPower   =  SN_Total_PW_Consumption_withTurnOFF[SFC];
		
		Totlanumberofmigration    +=  Number_of_Migrations[SFC];		

	//********************************************************************************************************************
	//------------------------------------  This is to calculate the Acceptance ratio  -----------------------------------
	//********************************************************************************************************************
		
		
		DroppedBW =  rej/ TotBW;
		
		SFCs_Acceptance_Ratio[SFC] = (100 * (TotBW - rej) / TotBW);  //  the acceptance ratio formula  (100-(100*((SFC+1-successfulSFC)/(SFC+1)))); //
		SFCs_Bloking_Ratio   [SFC] = (100 * (rej) / TotBW); //(100 * (rej) / TotBW) the blocking ratio formula   
		
		//System.out.println();
				//System.out.println("-----------------------------------   SFCs_Acceptance_Ratio   ---------------------------  ");
				//System.out.println();        
				System.out.println("SFCs_Blocking_Ratio =\t"  + SFCs_Bloking_Ratio   [SFC] + " %\t" + 
				                   "allocated SFCs =\t"       + successfulSFC + 
				                   "\t" + "Rej SFCs  =\t"     + (SFC+1-successfulSFC));

	/*
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				@SuppressWarnings("resource")
				Scanner sc1 = new Scanner(System.in);
				System.out.println("what is the value of a");
		        System.out.println();
				int a = sc1.nextInt();
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	*/		
				
	  
				
	//*******************************************************************************************************************
	//--------------------------  This is to calculate the Servers and edges utilizations --------------------------------
	//********************************************************************************************************************

				Sum_SN_Utilization = 0;
				
				for (int ii=0 ; ii < Servers ; ii++)
				{					
					Servers1CPU_Utilization[ii] = (100*(Servers1Max_CPU  [ii] - Servers_CPU_Cons[ii]) / Servers1Max_CPU  [ii] ); 
					// This to calculate the CPU utilization per each SN node in the path

					Sum_SN_Utilization       += Servers1CPU_Utilization[ii];
					//Sum_Nodes_CPU_Cons		 += (Servers1Max_CPU  [ii] - Servers_CPU_Cons[ii]);
					//System.out.println("  Server -(" + ii + ")- CPU Current Utilization  =  \t" + Servers1CPU_Utilization[ii] + " \t " + " Sum_SN_Utilization \t" + Sum_SN_Utilization);
				}
				
				nodes_utilization            = (Sum_SN_Utilization / Servers ); // calculate the average CPU utilization per each Server.
				nodes_average_CPU_utili[SFC] = nodes_utilization;
				//Consumed_CPU[SFC]            = Sum_Nodes_CPU_Cons;
				
				//System.out.println("nodes_average_CPU_utili[SFC]\t" + nodes_average_CPU_utili[SFC]);
			
				Sum_edges_Utilization = 0;
				
				for (int i=0 ; i<Servers ; i++)
					for (int j=0 ; j<Servers ; j++)
					{
						if (BW_Adj[i][j] > 0)
						{  
								
							SN_BW_Util [i][j]  = (100*(SN_BWmatrix[i][j] - BW_Adj[i][j]) / SN_BWmatrix[i][j] );	
							
							Sum_edges_Utilization +=  SN_BW_Util [i][j];
							Sum_edges_BW_Cons     += (SN_BWmatrix[i][j] - BW_Adj[i][j]);
					/*		System.out.println("   SN_Edge "             + i + "-->" + j + 
									                                     " BW    =\t" + SN_BWmatrix[i][j] + 
									                                     " Max BW =\t" + Maxsbw + 
									                                     " SN_Edge_Utilization\t" + i + "-->" + j + "  =\t" + SN_BW_Util [i][j] + "\t" + 
									                                     " Sum_edges_BW\t"+ Sum_edges_BW);
					*/	
						}	
					//System.out.println();
				    }		
		
				Consumed_BW       [SFC]	= Sum_edges_BW_Cons;		
				
				edges_utilization = (Sum_edges_Utilization / edgesnum);
				edges_average_BW_utili [SFC] = edges_utilization;// this calculates the average utilization per each SN edge.		edges_average_BW_utili[SFC] = edges_utilization ;
				
				Embedding_cost    [SFC]	= Consumed_CPU[SFC] + Consumed_BW[SFC]; // this is where we calculate the embedding cost. Alfa and Beta are defined as equal to 0.5.
				
	//********************************************************************************************************************
	//--------------------  This is to save all results in the output matrix, then to print them.  -----------------------
	//********************************************************************************************************************
				
				SFCs_output[SFC][0]  = (int) TotServersConsumedPower;
				SFCs_output[SFC][1]  = (int) Tot_SN_consumed_power;
				SFCs_output[SFC][2]  = (int) Tot_CMig                [SFC]; 
				SFCs_output[SFC][3]  = (int) PowerSaving             [SFC];
				SFCs_output[SFC][4]  = 100*((double)(SFC+1-rejectedSFCs))/((double)(SFC+1));    //(100-(100*((SFC+1-successfulSFC)/(SFC+1))))
				SFCs_output[SFC][5]  =  DroppedBW;
				SFCs_output[SFC][6]  = (int) nodes_average_CPU_utili [SFC];
				SFCs_output[SFC][7]  = (int) edges_average_BW_utili  [SFC];
				SFCs_output[SFC][8]  = SNOffNodes                    [SFC];
				SFCs_output[SFC][9]  = Beta_m[betaloop];
				SFCs_output[SFC][10] = totalTime[SFC];
				
				
		
		/*
		//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   To test specific steps  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
					@SuppressWarnings("resource")
					Scanner sc1 = new Scanner(System.in);
					System.out.println("what is the value of a");
			        System.out.println();
					int a = sc1.nextInt();
		//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		*/				
				//On_VNF8_SFC_o-alm-d-100000-Liftetime=10...
				//On_VNF8_SFC_o+alm-d-100000-Liftetime=10...
				//On_VNF8_SFC_o+alm+d-100000-Liftetime=10...
				//On_VNF8_SFC_o+alm-d-5000-Liftetime=R1015-1015...
				//On_VNF8_SFC_o+alm+d-5000-Liftetime=R1015-1015...
				//On_VNF8_SFC_o+alm-d-5000-Liftetime=10...
				//On_VNF484_SFC_o+alm-d-5000-Liftetime=10...
				//On_VNF8_SFC_o+alm+d-10000-Liftetime=R510-110
				
				
				
	if(SFC<10000 || SFC>95000)
		{
		
		System.out.println("SFCs_Acceptance_Ratio =\t"+ 100*((double)(SFC+1-rejectedSFCs))/((double)(SFC+1))+ " %\t" + 
                           "allocated SFCs =\t"       + successfulSFC + 
                           "\t" + "Rej SFCs  =\t"     + rejectedSFCs + "\t"+ rej);

		//System.out.println("((SFC+1-rejectedSFCs)/(SFC+1))\t"+100*((double)(SFC+1-rejectedSFCs))/((double)(SFC+1))+"\t"+
				           // "(SFC+1-rejectedSFCs)\t"         +(SFC+1-rejectedSFCs)+"\t"+
				           // "(SFC+1)\t"                      +(SFC+1));
		
		//rejectedSFCs
	try {	
		BufferedWriter writerSFCOUT =						
			new BufferedWriter ( new FileWriter("NO_mig_NO_consolidationNEW04061.txt", true));
		
		/*
		 * For Online Scenarios:
		 * ON_Nomig_NoDel_NoBuff.txt
		 */
		
		/*
		 * SFCs1_a_traffic(0.3,0.5,0.7,1)_Beta_m_asinEramo_no_mig // To Compare to Hejja
		 * SFCs1_a_traffic(0.3,0.5,0.7,1)_Beta_m_asinEramo_with_mig // To Compare to Eramo
		 * SFCs123_a_traffic(0.1-1)_Beta_m0.0000027_no_mig_no_consolidation
		 * SFCs123_a_traffic(0.1-1)_Beta_m0.0000027_no_mig_with_consolidation
		 * SFCs123_a_traffic(0.1-1)_Beta_m0.0000027_with_mig_no_consolidation
		 * SFCs123_a_traffic(0.1-1)_Beta_m0.0000027_with_mig_with_consolidation
		 */
		
		/* Remane the saving file to:
		* offa_pw_idleSeteqto1.txt, when a_pw_idle Set equal to 1
		* offa_pw_idleSeteqto0.7.txt, when a_pw_idle Set equal to 0.7
		* offa_pw_idleSeteqto0.5.txt, when a_pw_idle Set equal to 0.5
		* offa_pw_idleSeteqto0.3.txt, when a_pw_idle Set equal to 0.3
		* offa_pw_idleSeteqto0.txt, when a_pw_idle Set equal to 0
		* 
		* Or for Online
		* 
		* ON_Nomig_NoDel_NoBuff.txt
		* ON_mig_NoDel_NoBuff.txt
		* ON_Nomig_NoDel_Buff2030.txt
		* ON_mig_DelURLLC_1msec_Delnet800_100microsec_Buff2030.txt
		* ON_Nomig_DelURLLC_1msec_Delnet800_100microsec_Buff2030.txt
		* ON_mig_DelURLLC_1msec_Delnet800_100microsec_Buff23.txt
		* ON_Nomig_DelURLLC_1msec_Delnet800_100microsec_Buff23.txt
		* ON_mig_DeleMBB_8msec_Delnet800_100microsec_Buff2030.txt
		* ON_Nomig_DeleMBB_8msec_Delnet800_100microsec_Buff2030.txt
		* ON_mig_DeleMBB_8msec_Delnet800_100microsec_Buff23.txt
		* ON_Nomig_DeleMBB_8msec_Delnet800_100microsec_Buff23.txt
		* ON_SFCs_100000_Nomig_DelURLLCeMBB_1_8msec_Delnet8000_100microsec_Buff230.txt Most Realistic Case
		* ON_SFCs_100000_mig_DelURLLCeMBB_1_8msec_Delnet8000_100microsec_Buff230.txt
		*/														
								writerSFCOUT.write(String.valueOf(a_pw_idle + "\t" + Runs + "\t" + SFC + "\t" + SFCs_output[SFC][0] + " \t " + 
																				             SFCs_output[SFC][1] + " \t " + 
																						     SFCs_output[SFC][2] + " \t " + 
																						     SFCs_output[SFC][3] + " \t " +
																						     SFCs_output[SFC][4] + " \t " +
																						     SFCs_output[SFC][5] + " \t " +
																						     SFCs_output[SFC][6] + " \t " +
																						     SFCs_output[SFC][7] + " \t " +
																						     SFCs_output[SFC][8]+ " \t " +
																							 SFCs_output[SFC][9] + " \t " +
																							 SFCs_output[SFC][10]));
												writerSFCOUT.newLine();				
								
							writerSFCOUT.close();
					
						} catch (IOException e) 
							{
								e.printStackTrace();
							}
		}


		if(SFC==((MaxSFCs * SFCduplicator)-2))
		{//(MaxSFCs * SFCduplicator)-2
		/*	for (int i=0 ; i< 10; i++)
				System.out.println(Runs+"\t" + i + "\t"+ 
			                       SFCs_output[i][0] +"\t TC\t" +
			                       SFCs_output[i][1] +"\t EC\t" +
								   SFCs_output[i][2] +"\t MC\t" +
								   SFCs_output[i][3] +"\t S\t"  +
								   SFCs_output[i][4] +"\t AR\t" +
								   SFCs_output[i][5] +"\t D_BW\t" +
								   SFCs_output[i][6] +"\t CU\t" +
								   SFCs_output[i][7] +"\t BU\t" +
								   SFCs_output[i][8] +"\t OF\t" +
								   SFCs_output[i][10]+"\t Bta\t" );	
			*/
			
			Runs_Output[betaloop][0]  = (int) SN_Total_PW_Consumption_withTurnOFF[(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][1]  = (int) TotEC                              [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][2]  = (int) Tot_CMig                           [(MaxSFCs * SFCduplicator)-2]; 
			Runs_Output[betaloop][3]  = (int) PowerSaving                        [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][4]  = (int) SFCs_Acceptance_Ratio              [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][5]  = (int) SFCs_Bloking_Ratio                 [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][6]  = (int) nodes_average_CPU_utili            [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][7]  = (int) edges_average_BW_utili             [(MaxSFCs * SFCduplicator)-2];
			Runs_Output[betaloop][8]  = MIGRATEDSFCS;
			Runs_Output[betaloop][9]  = Beta_m[betaloop];
		}else
			continue;
		/**/
		
	}// End of SFC for loop that injected the SFCs.

	//On_VNF8_runs_migalwayesrunning
	//On_VNF8_runs_migalpha02
	//On_VNF8_runs_NOmiga
	//BlockingRuns
	//OFF-VNF8run


	try {	
		BufferedWriter writerSFCOUT =						
				new BufferedWriter ( new FileWriter("RunsNO_mig_NO_consolidationNEW04061.txt", true));
													
					writerSFCOUT.write(String.valueOf(a_pw_idle+ "\t" + Runs + "\t" + 
					        Runs_Output[betaloop][0] + " \t " + 
							Runs_Output[betaloop][1] + " \t " + 
							Runs_Output[betaloop][2] + " \t " + 
							Runs_Output[betaloop][3] + " \t " +
							Runs_Output[betaloop][4] + " \t " +
							Runs_Output[betaloop][5] + " \t " +
							Runs_Output[betaloop][6] + " \t " +
							Runs_Output[betaloop][7] + " \t " +
							Runs_Output[betaloop][8] + " \t " +
							Runs_Output[betaloop][9] ));
									writerSFCOUT.newLine();				
					
				writerSFCOUT.close();
		
			} catch (IOException e) 
				{
					e.printStackTrace();
				}	
	
	for (int i=0 ; i<Servers ; i++)
	Used_Servers_CPU_Cons[betaloop][i]= (int) Servers_CPU_Cons[i];

	//ON_VNF8_cores_migalwayesrunning
	//ON_VNF8_cores_migaalpha02
	//ON_VNF8_cores_NOmiga
	
	/*
	 * try{
		BufferedWriter writerCores =						
				new BufferedWriter ( new FileWriter("D_ON_VNF8_cores_NOmig_new.txt", true));
		for (int i=0 ; i<Servers ; i++)											
		writerCores.write(String.valueOf(Runs + "\t" + 
				Used_Servers_CPU_Cons[betaloop][i] + " \t" ));
		
		writerCores.newLine();				
					
		writerCores.close();
		
			} catch (IOException e) 
				{
					e.printStackTrace();
				}	
 	*/

	}// End of for (int Runs=0 ; Runs< Max_Runs ; Runs++ )

	} // End of for (int betaloop=0 ; betaloop<Beta_m.length ; betaloop++)
		
	}// End of main		    
	
}
